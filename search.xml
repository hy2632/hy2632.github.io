<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CS224NA5</title>
    <url>/2020/08/20/CS224NA5/</url>
    <content><![CDATA[<h1 id="cs224n-assignment-5">CS224N Assignment #5</h1>
<p>(7.20)增加 Pylance 插件作为语言服务器. 打开 type checking mode(basic).</p>
<h2 id="文字题">文字题</h2>
<ul>
<li><ol type="a">
<li>We learned in class that recurrent neural architectures can operate over variable length input (i.e., the shape of the model parameters is independent of the length of the input sentence). Is the same true of convolutional architectures? Write one sentence to explain why or why not.</li>
</ol>
<p>window t ∈ {1, . . . , mword − k + 1}， mword 即最长单词的长度可变， xconv ∈ R^(eword×(mword−k+1))</p></li>
<li><p>(b)...if we use the kernel size k = 5, what will be the size of the padding (i.e. the additional number of zeros on each side) we need for the 1-dimensional convolution, such that there exists at least one window for all possible values of mword in our dataset?</p>
<p>极端情况 mword=1， 前后各 1 个 token，还需 padding=1.</p></li>
<li><ol start="3" type="a">
<li>In step 4, we introduce a Highway Network with <code>xhighway = xgate xproj + (1 − xgate) xconv out</code>. Since xgate is the result of the sigmoid function, it has the range (0, 1).Consider the two extreme cases. If xgate → 0, then xhighway → xconv out. When xgate → 1, then xhighway → xproj. This means the Highway layer is smoothly varying its behavior between that of normal linear layer (xproj) and that of a layer which simply passes its inputs (xconv out) through. Use one or two sentences to explain why this behavior is useful in character embeddings. Based on the definition of <code>xgate = σ(Wgatexconv out + bgate)</code>, do you think it is better to initialize bgate to be negative or positive? Explain your reason briefly. 原因： 所谓的 highway， x_gate=0 可以直接用 x_convout 的值。</li>
</ol>
<p>希望默认 x_gate 较小方便 highway，所以 b 取负。</p></li>
<li><ol start="4" type="a">
<li>In Lecture 10, we briefly introduced Transformers, a non-recurrent sequence (or sequence-to-sequence) model with a sequence of attention-based transformer blocks. Describe 2 advantages of a Transformer encoder over the LSTM-with-attention encoder in our NMT model</li>
</ol>
<p>可以看一下 &lt;<Attention is all you need>&gt;： "Self-attention, sometimes called intra-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence." 每一步都是句子里的所有单词之间建立联系。 主要用到三个矩阵 Key, Query, value, <code>Attention(Q,K,V) = softmax(QK.T/\sqrt(d_k))V</code> (包学包会，这些动图和代码让你一次读懂「自注意力」 - 机器之心的文章 - 知乎 https://zhuanlan.zhihu.com/p/96492170)</p>
<p>attention-based transformers的好处（P6 的 Part 4， Why self-attention）：</p>
<p>未采用RNN就可以避免梯度消失和梯度爆炸等问题, 从sequential computation 到实现parallelized computation, 更易学习到"long-range dependencies in the network", 更加interpretable.</p></li>
</ul>
<h1 id="character-based-convolutional-encoder-for-nmt-36-points">1. Character-based convolutional encoder for NMT (36 points)</h1>
<h2 id="vocab.py">Vocab.py</h2>
<ol type="1">
<li>这种写法很巧妙·</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(self.char_list):</span><br><span class="line">    self.char2id[c] = len(self.char2id)</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li><p>组合用法，类似 zip+enumerate <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">word_freq = Counter(chain(\*corpus))</span><br></pre></td></tr></table></figure></p></li>
<li><p>用字典辅助排序 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">valid_words = [w <span class="keyword">for</span> w, v <span class="keyword">in</span> word_freq.items() <span class="keyword">if</span> v &gt;= freq_cutoff]</span><br><span class="line">top_k_words = sorted(valid_words, key=<span class="keyword">lambda</span> w: word_freq[w], reverse=<span class="literal">True</span>[:size]</span><br></pre></td></tr></table></figure></p></li>
</ol>
<p>用到了<code>json.dump</code>，Vocab 也用此形式存储。</p>
<h2 id="e-implement-to_input_tensor_char-in-vocab.py">(e) Implement <code>to_input_tensor_char()</code> in <code>vocab.py</code></h2>
<p>字母 ∏ Û python 执行有问题，改成<code>&lt;pad&gt;</code>, <code>&lt;unk&gt;</code>。</p>
<h2 id="f-highway">(f) highway</h2>
<p>要求写一个 sanity_check, (f)本身实现很简单，只是一步处理，所以检查一下前后维度就可以。</p>
<h2 id="g-cnn.py-cnn">(g) cnn.py, CNN</h2>
<p>输入(sentence_length, batch_size, e_char, m_word)，前两维不动，对每个词 conv 完，后两维应该是 f 和窗口数，再经过 maxpool 所有窗口， 输出是(sentence_length, batch_size, f) torch 需要使用.contiguous().view(),因为 view 只能作用在 contiguous 的变量上 比较关键的一步。 <strong>07/25 更新</strong>： 果然后面还是出问题了。m_word 是 forward 函数中参数 x_reshaped 的维度属性，如果使用 max_pool layer，一开始并不知道输入的参数 m_word 是多少。所以不应该用 maxpool 层（因为不能对一个多维 tensor 的某一维更新）， 而应该在 forward 函数里直接调用 torch.max(dim=2)</p>
<h2 id="h-model_embeddings.">(h) Model_Embeddings.</h2>
<p>一个问题是 f=e_word, e_word 和 e_char 的关系到底如何？？ 题目假设 e_char=50, e_word 是初始化 model_embeddings 的参数 word_embedding_size, 默认值 21。</p>
<h2 id="j">(j)</h2>
<p>wdnmd， vocab.py 里的 sents_var 总是空的，查了半天发现 utils.pad_sents 忘了粘贴。 nmt_model.py 中 step()函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> enc*masks <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    e_t.data.masked_fill*(enc_masks.bool(), -float(<span class="string">&#x27;inf&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>显示'Tensor' object has no attribute 'bool' 原因应该是 torch 版本较低 事实也确实如此，local*env.yml 显示 pytorch=1.0.0，a4 作业就没有限定版本，估计是助教忘了更新。 解决方案：改成 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e_t.data.masked_fill*(enc_masks==<span class="number">1</span>, -float(<span class="string">&#x27;inf&#x27;</span>))</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">epoch 100, iter 500, cum. loss 0.30, cum. ppl 1.01 cum. examples 200</span><br><span class="line">validation: iter 500, dev. ppl 1.001988</span><br><span class="line">Corpus BLEU: 99.66941696422141</span><br></pre></td></tr></table></figure>
<p>达到题设要求。</p>
<h1 id="character-based-lstm-decoder-for-nmt-26-points">2. Character-based LSTM decoder for NMT (26 points)</h1>
<h2 id="b">(b)</h2>
<p>奇怪的点在于, char_decoder.py 中 train_forward 的 loss 计算，不 softmaxloss 才收敛。 题目要求仔细阅读 nn.CrossEntropyLoss，实际上 Pytorch 中 CrossEntropyLoss()函数将 softmax-log-NLLLoss 合并到一块。</p>
<p><code>This criterion combines nn.LogSoftmax() and nn.NLLLoss() in one single class.</code> loss 0.38, Corpus BLEU: 99.66941696422141</p>
<h2 id="c">(c)</h2>
<p>这部分思路很清晰，用到了一些技巧，比如(tensor,tensor)的 elementwise 的提取，char 拼接成 word 等，详见代码</p>
<h2 id="e">(e)</h2>
<p>在 VM 上训练。 注意 run.sh 可以进行修改，使得 train_local 也可使用 cuda，提高效率。 仍然遇到了环境问题。 “RuntimeError: Given input size: (256x1x12). Calculated output size: (256x1x0). Output size is too small” 于是只能在 VM 上配一个和本地相同的（过时的）环境。问题解决。 <strong>CNN.py 中存在问题，很久之前埋下的坑！！！</strong>：初始化时如果建立 maxpool 就需要提前知道 m_word 以确定 kernel_size。这个问题可以这样解决：避免 maxpool 层，在 forward 中使用 torch.max 函数，对某个维度进行 max。 对 cnn 和 sanity_check 都进行修改。由于默认使用了 sanitycheck 的值 m_word=21,实际上在写其他函数调用 CNN 类的时候没有定义 m_word 值，所以正好不需要改。 参考：Tessa Scott<a href="https://github.com/tessascott039/a5/blob/master/cnn.py" class="uri">https://github.com/tessascott039/a5/blob/master/cnn.py</a></p>
<p><a href="https://github.com/pytorch/pytorch/issues/4166" class="uri">https://github.com/pytorch/pytorch/issues/4166</a> <a href="https://stackoverflow.com/questions/56137869/is-it-possible-to-make-a-max-pooling-on-dynamic-length-sentences-without-padding" class="uri">https://stackoverflow.com/questions/56137869/is-it-possible-to-make-a-max-pooling-on-dynamic-length-sentences-without-padding</a> 探讨了 nn.MaxPool1d 能不能有一个动态的 kernel_size。</p>
<p>train 的结果： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">epoch 29, iter 196300, avg. loss 81.60, avg. ppl 59.75 cum. examples 9600, speed 6086.86 words&#x2F;sec, time elapsed 20580.30 sec</span><br><span class="line">epoch 29, iter 196310, avg. loss 81.10, avg. ppl 50.14 cum. examples 9920, speed 6458.96 words&#x2F;sec, time elapsed 20581.33 sec</span><br><span class="line">epoch 29, iter 196320, avg. loss 78.58, avg. ppl 48.75 cum. examples 10240, speed 6548.57 words&#x2F;sec, time elapsed 20582.32 sec</span><br><span class="line">epoch 29, iter 196330, avg. loss 86.52, avg. ppl 61.24 cum. examples 10537, speed 6019.06 words&#x2F;sec, time elapsed 20583.36 sec</span><br><span class="line">test：Corpus BLEU: 36.395796664198</span><br></pre></td></tr></table></figure></p>
<h1 id="analyzing-nmt-systems-8-points">3. Analyzing NMT Systems (8 points)</h1>
<h2 id="a">(a)</h2>
<p>用 linux 的 grep 命令查找字符串 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(base) hy2632_ubuntu20@DESKTOP-8LEIHPS:~&#x2F;cs224n&#x2F;a5_public\$ grep tradu vocab.json</span><br><span class="line">&quot;traduciendo&quot;: 17349,</span><br><span class="line">&quot;tradujera&quot;: 32719,</span><br><span class="line">&quot;traduccin&quot;: 4562,</span><br><span class="line">&quot;traduzco&quot;: 40154,</span><br><span class="line">&quot;traduzcan&quot;: 23440,</span><br><span class="line">&quot;traductores&quot;: 19447,</span><br><span class="line">&quot;traducir&quot;: 4565,</span><br><span class="line">&quot;traducciones&quot;: 12054,</span><br><span class="line">&quot;traductor&quot;: 11809,</span><br><span class="line">&quot;traducirse&quot;: 36917,</span><br><span class="line">&quot;traducen&quot;: 19640,</span><br><span class="line">&quot;tradujo&quot;: 25176,</span><br><span class="line">&quot;traducido&quot;: 8515,</span><br><span class="line">&quot;traducimos&quot;: 18251,</span><br><span class="line">&quot;traduce&quot;: 7821,</span><br><span class="line">&quot;traducidas&quot;: 20336,</span><br><span class="line">&quot;traduzca&quot;: 44710,</span><br><span class="line">&quot;traducirlo&quot;: 19205,</span><br><span class="line">&quot;traductora&quot;: 13071,</span><br><span class="line">&quot;traduje&quot;: 23103,</span><br><span class="line">&quot;traducirlas&quot;: 35543,</span><br><span class="line">&quot;traducida&quot;: 19350,</span><br></pre></td></tr></table></figure></p>
<p>traduces, traduzcas not in. 如果是 word-based NMT，将 spanish 翻译为 english， 如果句子中出现 traduces 就会判断为<code>&lt;unk&gt;</code>， 无法翻译；但如果是 character-aware NMT，别的类似 traducir(to translate)的动词可能有类似的性质(加 s，从 I 变成 you)，同时又恰好出现在训练集中，那么模型在遇到 traduces 的 s 时就能翻译出 you translate。</p>
<h2 id="b-1">(b)</h2>
<ol type="1">
<li><p>回顾 Word2Vec。<a href="https://projector.tensorflow.org/" class="uri">https://projector.tensorflow.org/</a> 可以查询 k-nearest words。</p>
<p>Markdown 表格生成<a href="https://www.tablesgenerator.com/markdown_tables" class="uri">https://www.tablesgenerator.com/markdown_tables</a></p></li>
</ol>
<table>
<thead>
<tr class="header">
<th>word</th>
<th>closest word</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>financial</td>
<td>economics</td>
</tr>
<tr class="even">
<td>neuron</td>
<td>nerve</td>
</tr>
<tr class="odd">
<td>Francisco</td>
<td>san</td>
</tr>
<tr class="even">
<td>naturally</td>
<td>occurring</td>
</tr>
<tr class="odd">
<td>expectation</td>
<td>norms</td>
</tr>
</tbody>
</table>
<ol start="2" type="1">
<li>也可以上传自己的 character-aware NMT model 的 embeddings 查找 nearest neighbors.</li>
</ol>
<figure>
<img src="https://raw.githubusercontent.com/hy2632/cs224n/master/a5_public/CS224n-A5-emb2-files/embedding_proj.jpg" alt="" /><figcaption>Image</figcaption>
</figure>
<table>
<thead>
<tr class="header">
<th>word</th>
<th>closest word</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>financial</td>
<td>vertical</td>
</tr>
<tr class="even">
<td>neuron</td>
<td>Newton</td>
</tr>
<tr class="odd">
<td>Francisco</td>
<td>France</td>
</tr>
<tr class="even">
<td>naturally</td>
<td>practically</td>
</tr>
<tr class="odd">
<td>expectation</td>
<td>exception</td>
</tr>
</tbody>
</table>
<ol start="3" type="1">
<li>分析 Word2Vec 和 CharCNN 的区别并解释。</li>
</ol>
<p>除了 naturally/practically 意思相近，CharCNN 的 embeddings 更多的还是按照字母组成（同时也包含一些 pos 和 ner）。Word2Vec 则更多地把握了词义的相似和关联性。原因就是模型本身。</p>
<p>word2vec: skip-grams &amp; CBOW(contiguous bag of words)，给定上下文此预测缺失的中心词 c，概率分布 P(C|W)。因而相近的词都是有较大概率作为中心词被代替。</p>
<p>CharCNN: 对某个单词的各个字母进行 charembedding，然后经过 CNN/Highway 等操作最后生成 wordembedding，较大程度上依赖于 charembedding，如果两个词有相同字母的 subset 则 wordembedding 可能相近。</p>
<h2 id="c-1">(c)</h2>
<p>(45)正确的例子： | Category | | | -------------- | -------------------------------------------------------------------------- | | ES | A medida que se derrite un tmpano, estoy respirando su atmsfera ancestral. | | Ref | As an eardrum melts, I am breathing in its ancient atmosphere. | | A4 translation | As a <code>&lt;unk&gt;</code> <code>&lt;unk&gt;</code> I'm breathing its atmosphere <code>&lt;unk&gt;</code> | | A5 translation | As it melts a iceberg, I'm breathing its ancestral atmosphere. |</p>
<p>tímpano，témpano 是同义词，但一个翻译为耳膜一个翻译为冰山。这里冰山显然更为合适。</p>
<p>(85)错误的例子： | Category | | | -------------- | ------------------------------------------------- | | ES | Es el sndrome de insensibilidad a los andrgenos. | | Ref | It is the syndrome of insensitivity to androgens. | | A4 translation | It's called <code>&lt;unk&gt;</code> <code>&lt;unk&gt;</code> | | A5 translation | It's the syndrome of insulin insulin. |</p>
<p>对于连续的<code>&lt;unk&gt;</code>，CharCNN 的表现并没有很好改善（重复出现的 insulin）。</p>
]]></content>
      <categories>
        <category>CS224N作业笔记</category>
      </categories>
      <tags>
        <tag>CS224N</tag>
      </tags>
  </entry>
  <entry>
    <title>8/27OW分享会记录</title>
    <url>/2020/08/29/0827OW/</url>
    <content><![CDATA[<h2 id="basic-info">Basic Info</h2>
<p>Offices: BJ, SH, HK.</p>
<p>技能点：</p>
<ul>
<li>Big data</li>
<li>data mining</li>
<li>machine learning</li>
<li>analytical problem solving</li>
<li>co-creation</li>
<li>design thinking</li>
<li>change enablement</li>
<li>people effectiveness</li>
</ul>
<p>发展路径: 前三年跨行业</p>
<h2 id="project-span-industries-and-capabilities">Project span industries and capabilities</h2>
<p>行业：健康， 消费者工业和服务（教育 房地产）， 金融服务 <img src="https://raw.githubusercontent.com/hy2632/hy2632.github.io/master/2020/08/29/0827OW/span.jpg" alt="Image" /> 横向：不同division和三大类 纵向：不同行业</p>
<h2 id="recruiting">Recruiting</h2>
<p>digital interview: Oct 14, first round interview Oct 25, final round Oct 30. <img src="https://raw.githubusercontent.com/hy2632/hy2632.github.io/master/2020/08/29/0827OW/recruitinginfo.jpg" alt="Image" /></p>
<h2 id="breakout-room-life-as-a-new-consultant-digital-qa">Breakout room (Life as a new consultant + Digital), Q&amp;A</h2>
<figure>
<img src="https://raw.githubusercontent.com/hy2632/hy2632.github.io/master/2020/08/29/0827OW/breakoutrooms.jpg" alt="" /><figcaption>Image</figcaption>
</figure>
<h3 id="相对甲方战略咨询部的特点">相对甲方战略咨询部的特点</h3>
<ol type="1">
<li><p>行业选择</p></li>
<li><p>紧迫感，下一个30天、100天做什么</p></li>
<li><p>好的甲方的核心业务可能比咨询更优，因为有经验积淀</p></li>
<li><p>大厂有丰富的大数据</p></li>
<li><p>乙方咨询还有换赛道的机会，甲方从零开始</p></li>
<li><p>OW的Know:知识库 即插即用</p></li>
<li><p>甲方：战略部 -&gt; 策略部(市场策略)</p></li>
<li><p>咨询的生命周期可能是长期的，专注于商业本质，“无限游戏”</p></li>
<li><p>consultant和engineer合作更加紧密，有multinational的know平台，以及和客户ceo之类有很好的关系和实施的渠道</p></li>
</ol>
<h3 id="简要介绍不同的digital-transformation">简要介绍不同的digital transformation</h3>
<ol type="1">
<li>分行业分业务</li>
<li>例如保险 搬到线上 高净值人群需要线下服务，其实不是对象，应当优化大部分普通客户的流程。</li>
<li>digital products: 把社交媒体如微博的data变为insights，和客户一起探讨，确定客户在意的数据：例如被提到次数、提到内容、注意点。帮助识别emerging brand小众品牌，发现潜在competitors。</li>
<li>data product(server)/data government，组织形式，和各个公司有关</li>
<li>big data可以帮助做datadriven decision， 如促销机制，之前没有理论指导人为因素较大，利用大数据给出的解决方案包含数据分析和专家访谈，确定更换促销机制的周期以及更细致的客户targeting</li>
<li>总而言之可以高层次爷可接地气</li>
</ol>
<h3 id="需要编程技能">需要编程技能</h3>
<ol type="1">
<li>DE/DS/DC，DC除了技能还需要理解<strong>Business Implementation</strong></li>
<li>python必需，还要高效使用package；SQL可以现学</li>
<li>需要学过BA课程， 熟悉pandas/matplotlib等，可以看一些互联网PM的书籍，了解如何分析客户和产品，获得Business Insights</li>
<li><strong>Business implementation 不只是向客户摆事实，而应该告诉客户做什么，例如上新品类，好处的量化</strong></li>
</ol>
<h3 id="digital的发展路径">Digital的发展路径</h3>
<p>不是纵向而是横向，不局限于某个行业，和Operations/Strategy平行</p>
<h3 id="如果business-implementation的阶段性成果未达到预期ow的数字化转型团队有没有调整的机制和经验">如果Business Implementation的阶段性成果未达到预期，OW的数字化转型团队有没有调整的机制和经验</h3>
<ol type="1">
<li>举例: dashboard 的设计调整到更加 user-friendly</li>
<li>说明: 并非一个数字化团队，而是负责数字化的人员一起加入某项目。并非强调准确率，而是“赋能”，有很多qualitative的分析。有时引入新的方法或者数据量不够quant</li>
<li>不是做数据竞赛或做数据框架，而是服务于ceo的模糊想法，是一个工作方向而不是具体地帮助提高销量到某一个值</li>
<li>比如零售商想了解品牌商的想法，而咨询和品牌商有一定合作，可以提供信息</li>
</ol>
<h3 id="new-consultant的经验">new consultant的经验</h3>
<ol type="1">
<li>首先理解任务和clarify</li>
<li>时间紧</li>
<li>汇报要抓重点，不要interesting facts，而是business insights</li>
</ol>
<h3 id="如何知识点成系统">如何知识点成系统</h3>
<ol type="1">
<li>例如研究券商的core trade system</li>
<li>expert call,... 有自己的view，并逐渐完善， 除非manager带过类似项目</li>
<li>manager可以quick learning，需要学习这样的能力</li>
<li>项目完成后需要复盘</li>
</ol>
<h3 id="面试经历">面试经历</h3>
<ol type="1">
<li>第一轮笔试，数学题之类</li>
<li>读casebook， 做presentation</li>
<li>manager面 + 面， 两个digital问题</li>
<li><strong>怎么用ml帮netflix提升revenue？？</strong> 应用哪些方面？为什么？多久能达成结果？</li>
</ol>
<h3 id="fast-promotion">fast-promotion</h3>
<ol type="1">
<li>critical thinking, ownership</li>
<li>communication!!! upward and downward对上和对下</li>
<li>接受变化，疫情后医疗更多，很多公司询问疫情影响</li>
<li>学research，学写邮件，善于观察: 别的人怎么做？
<ul>
<li>写title方便locate subproject title</li>
<li>keyfinding 1 2 3, 然后细节定位</li>
<li>最后提需要review回复的时间，方便对方暂时搁置</li>
</ul></li>
<li>为上级考虑，节省上级时间</li>
<li>例如至少code不能有bug</li>
<li>组织events，增加曝光度 (120个同事)，建立工作之外关系</li>
</ol>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>Oliver Wyman</tag>
      </tags>
  </entry>
  <entry>
    <title>CS224NA4</title>
    <url>/2020/08/20/CS224NA4/</url>
    <content><![CDATA[<h1 id="cs224n-a4-nmt-assignment">CS224N A4: NMT Assignment</h1>
<p>Note: Heavily inspired by the https://github.com/pcyin/pytorch_nmt repository</p>
<p>作业分为两部分， 第一部分代码实现 NMT with RNN， 第二部分文字题分析 NMT</p>
<h2 id="nmt-with-rnn">1. NMT with RNN</h2>
<ul>
<li>Bidirectional LSTM Encoder &amp; Unidirectional LSTM Decoder</li>
<li>勘误：
<ul>
<li>h 为(embedding size)</li>
<li><strong>(3), (4) 式中的下标 1 应改为 m</strong></li>
</ul></li>
<li><ol type="a">
<li>utils.py</li>
</ol>
<ul>
<li>要求每个 batch 里的句子有相同 length。utils.py 中实现 pad_sents(padding)</li>
</ul></li>
<li><ol start="2" type="a">
<li>model_embeddings.py</li>
</ol>
<ul>
<li>先去 vocab.py 里了解类的定义。</li>
<li>VocabEntry 类初始化参数 word2id(dict: words -&gt; indices), id2word 返回 idx 对应的 word 值，from_corpus 从 corpus 生成一个 VocabEntry 实例，from <strong>collections</strong> import <strong>Counter</strong>，Counter 可以直接查找出字符串中字母出现次数</li>
<li>Vocab 类包含 src 和 tgt 语言，初始化参数式两种语言的 VocabEntry， <span class="citation" data-cites="staticmethod">@staticmethod</span> 静态方法</li>
<li>VocabEntry.from_corpus 创建一个 vocab_entry 对象。Vocab.build 分别用 src_sents, tgt_sents 创建 src, tgt 两个 vocab_entry 并返回包含两者的 Vocab(src, tgt)</li>
<li>运用 nn.Embedding 初始化词嵌。</li>
</ul></li>
<li><ol start="3" type="a">
<li>nmt_model.py</li>
</ol>
<ul>
<li>按照 pdf 中的维度对各层初始化</li>
</ul></li>
<li><ol start="4" type="a">
<li>nmt_model.py 中 encode 方法实现</li>
</ol>
<ul>
<li><code>self.encoder</code> 是一个双向 lstm</li>
<li><code>encode</code> 方法传入两个参数：<code>source_padded, source_lengths</code>。前者是已经 pad 后(src_len, b)的 tensor，每一列是一个句子。后者是一个整数列表，表示每个句子实际多少词。</li>
<li>需要返回两个值：enc_hiddens = hencs(所有 1&lt;=i&lt;=m(句长),每一句中所有词，同时对于整个 batch 所有句子), dec_init_state = (hdec0, cdec0)</li>
<li>lstm 要求输入满足规范形状，所以需要<code>pad_packed_sequence</code> 和<code>packed_pad_sequence</code>进行变形</li>
<li>第一步用<code>self.model_embeddings</code>把 source_padded 转换为词嵌入</li>
</ul></li>
<li><ol start="5" type="a">
<li><code>decode</code>方法</li>
</ol>
<ul>
<li><code>self.decode</code>r 是<code>nn.LSTMCell</code>，返回值 h、c，但这部分包装在 step 里面，本 decode 方法里从<code>self.step</code>取得返回值<code>dec_state, combined_output, e_t</code></li>
<li>还是先用<code>model_embeddings</code>将 target_padded 转换为 Y，一个目标词嵌入，(tgt_len, b, e)</li>
<li>用<code>torch.split</code>方法， 将 Y 按第 0 维分成步长为 1 的步数，相当于逐词(t)操作。</li>
<li>(5)式表明了一个迭代过程，最后关心的<code>combined_outputs</code>是 o_t 集合</li>
<li><strong>07/23 勘误</strong> 做a5时发现dedcode忘记更新o_prev</li>
</ul></li>
<li><ol start="6" type="a">
<li><code>step</code>方法</li>
</ol>
<ul>
<li>step 方法具体处理(5)到(12)式。</li>
<li>第一部分，(5)-(7)，运用 bmm、(un)squeeze。bmm 需要注意第 0 维度是留给 batch_size 的，两个三维 tensor 的第一二维相乘，满足维度要求。常见的是在 dim=1/2 做 unsqueeze，乘完再 squeeze</li>
<li>注意到调换乘法次序+不同的变换维度方式会造成最终结果的精度损失。</li>
</ul></li>
<li><ol start="7" type="a">
<li>文字题：<code>generate_sent_masks()</code> 生成 <code>enc_masks(b, src_len)</code>标识 batch 中每个 sentence 每个词是否是 pad，这样做对 attention 计算的影响以及其必要性。</li>
</ol>
<ul>
<li><code>step</code>中，(8)式 α_t 进行了 softmax，后续 a_t 计算为确保 attention 不受 padding 影响要求 padding 处 α_t=0，即 e_t 设置为-∞。</li>
</ul></li>
<li><ol type="i">
<li></li>
</ol>
<ul>
<li><p>git 配置：git remote add origin https://github.com/hy2632/cs224n.git</p></li>
<li><p>git push origin master</p></li>
<li><p>..</p></li>
<li><p>Corpus BLEU: 31.892219171042335</p></li>
</ul></li>
<li><ol start="10" type="a">
<li><table>
<thead>
<tr class="header">
<th>Attention Type</th>
<th>Advantage</th>
<th>Disadvantage</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Dot Product</td>
<td>不需要<code>self.att_projection</code>层</td>
<td>需要满足维度一致</td>
</tr>
<tr class="even">
<td>Multiplicative</td>
<td>-</td>
<td>-</td>
</tr>
<tr class="odd">
<td>Additive</td>
<td>tanh 操作 normalize 了数值</td>
<td>两个参数矩阵，参数更多，空间复杂度大</td>
</tr>
</tbody>
</table></li>
</ol></li>
</ul>
<h2 id="analyzing-nmt-systems-30-points">2. Analyzing NMT Systems (30 points)</h2>
<ul>
<li><p>参考 lec8 slides P50-</p></li>
<li><p>https://www.skynettoday.com/editorials/state_of_nmt</p></li>
<li><p>Out-of-vocabulary words, Domain mismatch between src&amp;tgt, maintaining context over longer text, Low-resource language pairs.</p></li>
<li><ol type="a">
<li></li>
</ol>
<ul>
<li><ol type="i">
<li></li>
</ol>
<ul>
<li><ol type="1">
<li>error: favorite of my favorites,</li>
</ol></li>
<li><ol start="2" type="1">
<li>reason: tgt 库中缺乏 one of my favorites 这样的表达, "Low-resource language pairs"</li>
</ol></li>
<li><ol start="3" type="1">
<li>to fix: 添加训练数据</li>
</ol></li>
</ul></li>
<li><ol start="2" type="i">
<li></li>
</ol>
<ul>
<li><ol type="1">
<li>error: most read 译为了 more reading。</li>
</ol></li>
<li><ol start="2" type="1">
<li>reason: 使用 google translator 发现 ms ledo 被译为 read more， 而 ms ledo en los EEUU 被译为 most read in the US。西班牙语的特点？特定的语言构造。</li>
</ol></li>
<li><ol start="3" type="1">
<li>to fix: 需要让 ms ledo 和后面的定语建立更强的联系，从而把握语义理解。增大 hidden_size</li>
</ol></li>
</ul></li>
<li><ol start="3" type="i">
<li></li>
</ol>
<ul>
<li><ol type="1">
<li>error: "<unk>"</li>
</ol></li>
<li><ol start="2" type="1">
<li>reason: Out-of-vocabulary</li>
</ol></li>
<li><ol start="3" type="1">
<li>to fix: 添加到词表</li>
</ol></li>
</ul></li>
<li><ol start="4" type="i">
<li></li>
</ol>
<ul>
<li><ol type="1">
<li>error: block -&gt; apple</li>
</ol></li>
<li><ol start="2" type="1">
<li>reason: "manzana" 多义性</li>
</ol></li>
<li><ol start="3" type="1">
<li>to fix: 训练集添加 manzana 作为 block 含义的 phrase 数据，且大于“vuelta a la manzana”因为 google translator 仍将该句错译。</li>
</ol></li>
</ul></li>
<li><ol start="22" type="a">
<li></li>
</ol>
<ul>
<li><ol type="1">
<li>error: "la sala de profesores": "teacher's lounge" -&gt; "women's room",</li>
</ol></li>
<li><ol start="2" type="1">
<li>reason: "profesores"应该是复数，不包含性别，该句既错译又包含性别 bias。</li>
</ol></li>
<li><ol start="3" type="1">
<li>to fix: 增加“profesores”/profesor/profesora 的训练数据，平衡性别 bias 的同时也要将 teacher 翻译出来。</li>
</ol></li>
</ul></li>
<li><ol start="6" type="i">
<li></li>
</ol>
<ul>
<li><ol type="1">
<li>error: hectare -&gt; acre</li>
</ol></li>
<li><ol start="2" type="1">
<li>reason: 常识错误，涉及到单位转换</li>
</ol></li>
<li><ol start="3" type="1">
<li>to fix: 没想到好的方法。文章中写：General knowledge about the world is necessary for NMT systems to translate effectively. <strong>However, this knowledge is difficult to encode in its entirety and is not easily extractable from volumes of data. We need mechanisms to incorporate common sense and world knowledge into our neural networks.</strong></li>
</ol></li>
</ul></li>
</ul></li>
<li><ol start="2" type="a">
<li></li>
</ol>
<ul>
<li><p>88:</p>
<ul>
<li>When he 's born , the baby looks a little bit .</li>
<li>When the child is born, she looks like a girl.</li>
<li>Cuando nace, el beb tiene aspecto de nia.(Cuando nace, el bebé tiene aspecto de niña.)</li>
<li>错误：语意，原因：src 本身存在错误无法显示符号，解决方案：样本数据和测试数据的编码格式改一哈</li>
</ul></li>
<li><p>109：</p>
<ul>
<li>So , there are many of a lot of sex .</li>
<li>So sex can come in lots of different varieties.</li>
<li>Entonces, hay muchas variedades de sexo.</li>
<li>错误：语法（many a lot of)，variedades 没有翻译出 variety 的意思。解决方案：增加 muchas variedades 的数据</li>
</ul></li>
</ul></li>
<li><ol start="3" type="a">
<li>BLEU 的定义见 &lt;BLEU: a Method for Automatic Evaluation of Machine Translation&gt; Candidate c, Reference r, BLEU 包含两部分：reference 中出现 candidate 中 ngram phrase 的概率（注意有个 ceiling）和 candidate 太长导致的 brevity penalty。</li>
</ol></li>
<li><ol type="i">
<li></li>
</ol>
<ul>
<li>for c1,
<ul>
<li>p1 = (0 + 1 + 1 + 1 + 0)/5 = 3/5</li>
<li>p2 = (0 + 1 + 1 + 0) /4 = 1/2</li>
<li>len(c) = 5</li>
<li>len(r) = 6</li>
<li>BP = exp(1-6/5) = 0.819</li>
<li><code>BLEU = 0.819 * exp(0.5*log(3/5) + 0.5*log(1/2)) = 0.449</code></li>
</ul></li>
<li>for c2,
<ul>
<li>p1 = (1 + 1 + 0 + 1 + 1)/5 = 4/5</li>
<li>p2 = (1 + 0 + 0 + 1) /4 = 1/2</li>
<li>len(c) = 5</li>
<li>len(r) = 4</li>
<li>BP = 1</li>
<li><code>BLEU = 1 * exp(0.5*log(4/5) + 0.5*log(1/2)) = 0.632</code></li>
</ul></li>
<li>c2 更好。</li>
</ul></li>
<li><ol start="2" type="i">
<li></li>
</ol>
<ul>
<li>c1: p1 = 3/5, p2 = 1/2, BLEU 不变 0.449</li>
<li>c2: p1 = 2/5, p2 = 1/4, len(c) = 5, len(r) = 6, <code>BLEU = 0.819 * exp(0.5*log(2/5) + 0.5*log(1/4)) = 0.259</code></li>
<li>当前 c1 更好。</li>
</ul></li>
<li><ol start="3" type="i">
<li></li>
</ol>
<ul>
<li>单一 ref 产生类似 ii 的问题， 比如对于 r2，c2 可以说是非常好的翻译，如果没有 r2 仅用 r1 判断，c2 就比 c1 差很多。</li>
</ul></li>
<li><ol start="4" type="i">
<li></li>
</ol></li>
</ul>
<table>
<thead>
<tr class="header">
<th>BLEU vs Human</th>
<th>1</th>
<th>2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Pro</td>
<td>Fast</td>
<td>Language independent</td>
</tr>
<tr class="even">
<td>Con</td>
<td>Lack of Common Sense</td>
<td>Need Multiple References</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>CS224N作业笔记</category>
      </categories>
      <tags>
        <tag>CS224N</tag>
      </tags>
  </entry>
  <entry>
    <title>CS224N-Lec15</title>
    <url>/2020/08/24/CS224N-Lec15/</url>
    <content><![CDATA[<h1 id="natural-language-generation">Natural Language Generation</h1>
<h2 id="nlg">NLG</h2>
<ul>
<li>subcomponent of
<ul>
<li>Machine Translation</li>
<li><strong>summarization</strong></li>
<li>dialogue</li>
<li>Freeform question answering(not only from the context)</li>
<li>Image Captioning</li>
</ul></li>
</ul>
<h2 id="recap">Recap</h2>
<ul>
<li><p>Language modeling? the task of predicting the next word: <span class="math display">\[P(y_t|y_1, ..., y_(t-1))\]</span></p></li>
<li><p>Language model</p></li>
<li><p>RNN-LM</p></li>
<li><p>Conditional Language Modeling <span class="math display">\[P(y_t|y_1, ..., y_(t-1), x)\]</span></p>
<ul>
<li>what is x? condition.</li>
<li>Examples:
<ul>
<li>Machine Translation (x = source sentence, y = target sentence)</li>
<li>Summarization (context and summarized)</li>
<li>Dialogue (dialogue history and next utterance)</li>
</ul></li>
</ul></li>
<li><p>training a RNN-LM? <span class="math display">\[J = \dfrac{1}{T}\sum\limits_{t=1}^T J_t\]</span></p>
<ul>
<li>"Teacher Forcing": always use the gold to feed into the decoder</li>
</ul></li>
<li><p><strong>decoding algorithms</strong></p>
<ul>
<li>Greedy decoding: argmax each step</li>
<li>Beam search: aims to find a high prob seq.
<ul>
<li>k most probable partial seqs (hypotheses)</li>
<li>k is the beam size (e.g. 2)</li>
<li>when reaching some stopping criterion, output</li>
<li>what's the effect of changing k?
<ul>
<li>k=1: greedy decoding</li>
<li>larger k: more hypotheses, computationaly expensive
<ul>
<li>for NMT, increasing k too much <strong>decreases</strong> BLEU, reason: producing shorter translations</li>
<li>for chit-chat dialogue, producing too generic responses</li>
</ul></li>
</ul></li>
</ul></li>
<li><strong>sampling-based decoding</strong>
<ul>
<li>pure sampling: randomly sample, instead of argmax in greedy</li>
<li>top-n sampling, randomly sample from top-n. truncate. n is another hyperparameter
<ul>
<li>increasing n, diverse and risky</li>
<li>decreasing n, generic and safe</li>
</ul></li>
</ul></li>
<li><strong>Softmax teperature</strong> -- not actually a decoding algorithm, but a technique applied at test time in conjunction with decoding algorithm
<ul>
<li>temperature hypparam <span class="math inline">\(\tau\)</span> to the softmax:</li>
<li>larger <span class="math inline">\(\tau\)</span>: <span class="math inline">\(P_t\)</span> becomes more uniform, more diverse output(probability is spread around vocab)</li>
</ul></li>
</ul></li>
<li><p>Decoding algorithms: summary</p>
<ul>
<li><u> Greedy </u></li>
<li><u> Beam search </u></li>
<li><u> Sampling methods </u></li>
<li><strong><em>Softmax temperature</em></strong></li>
</ul></li>
</ul>
<h2 id="section-2-nlg-tasks-and-neural-approaches">Section 2: NLG tasks and neural approaches</h2>
<h3 id="summarization">Summarization</h3>
<ul>
<li>definition: x -&gt; y, y is shorter and contains main info of x</li>
<li>examples:
<ul>
<li>Gigaword: headline -&gt; headline. sentence compression</li>
<li><strong>LCSTS</strong> (Chinese microblogging), paragraph -&gt; sentence summary</li>
<li>...</li>
</ul></li>
<li>Sentence simplification:
<ul>
<li>different but related</li>
<li>rewrite, simpler &amp; shorter</li>
<li>examples:
<ul>
<li>simple wikipedia</li>
<li>Newsela: news rewriting for children</li>
</ul></li>
</ul></li>
<li>summarization: 2 mains strategies
<ul>
<li>extractive: highlighter</li>
<li>abastractive: writing</li>
</ul></li>
<li>summarization evaluation: <strong>ROUGE</strong>
<ul>
<li><p>like <strong>BLEU</strong>, based on n-gram overlap</p></li>
<li><p>but no brevity penalty</p></li>
<li><p>ROUGE based on recall while BLEU based on precision</p></li>
<li><p>BLEU is a single number combining the precisions for n=1,2,3,4 n-grams</p></li>
<li><p>ROUGE: ROUGE-1/ROUGE-2/ROUGE-L(Largest common subseq overlap)</p></li>
</ul></li>
<li>Neural summarization:
<ul>
<li>seq2seq + attention NMT</li>
<li>Reinforcement learning</li>
</ul></li>
<li>neural: copy mechanism
<ul>
<li>probability of generation and probability of copying</li>
<li>Pgen: hard(0/1) or soft?</li>
<li>Problem:
<ul>
<li>copy too much: extractive to abstractive</li>
<li>bad at overall content selection, if input is long</li>
<li>no overall strategy for selecting content</li>
</ul></li>
</ul></li>
<li>better content selection
<ul>
<li>2 stages: content selection &amp; surface realization</li>
<li>seq2seq+att, mixed, word-level content selection(attention)</li>
<li>but no global content selection strategy</li>
<li>One solution: bottom-up summarization</li>
</ul></li>
<li>Bottom-up summarization
<ul>
<li>content selection stage: neural sequence tagging</li>
<li>masked, attention</li>
</ul></li>
<li>Neural summarization via RL
<ul>
<li>main idea: directly optimize Rouge-L</li>
<li>Better practice(both ROUGE &amp; human judgement): ML&amp;RL</li>
</ul></li>
</ul>
<h3 id="dialogue">Dialogue</h3>
]]></content>
      <categories>
        <category>CS224N</category>
      </categories>
      <tags>
        <tag>CS224N</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+GitHubio</title>
    <url>/2020/08/20/My-New-Post/</url>
    <content><![CDATA[<h2 id="weblink">Weblink:</h2>
<p>知乎专栏<a href="https://zhuanlan.zhihu.com/p/26625249" class="uri">https://zhuanlan.zhihu.com/p/26625249</a>; 大卫博客<a href="https://univeryinli.github.io/about" class="uri">https://univeryinli.github.io/about</a></p>
<h3 id="安装">安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo -g <span class="comment">#安装Hexo</span></span><br><span class="line">npm update hexo -g <span class="comment">#升级</span></span><br><span class="line">hexo init <span class="comment">#初始化博客</span></span><br></pre></td></tr></table></figure>
<h3 id="命令简写">命令简写</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;我的博客&quot; &#x3D;&#x3D; hexo new &quot;我的博客&quot; #新建文章</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate #生成</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server #启动服务预览</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy #部署</span><br><span class="line"></span><br><span class="line">hexo server #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br><span class="line">hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</span><br><span class="line"></span><br><span class="line">刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作</span><br></pre></td></tr></table></figure>
<h3 id="推送网站"><strong>推送网站</strong></h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim _config.yml;</span><br><span class="line">   deploy:</span><br><span class="line">   type: git</span><br><span class="line"> repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</span><br><span class="line">  branch: master</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h3 id="next-主题">next 主题</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<h3 id="配置next">配置next</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure>
<h4 id="新建about页">新建about页</h4>
<p>编辑<code>source/about/index.md</code>, 进入<code>themes/next/_config.yml</code>, <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br></pre></td></tr></table></figure> 再生成部署。</p>
]]></content>
  </entry>
  <entry>
    <title>Uber盈利和经营策略研究</title>
    <url>/2020/08/22/ResearchOnUber/</url>
    <content><![CDATA[<h3 id="提要">提要</h3>
<p>这是 DROM8110 Business Analytics Strategy 的最终报告，运用了 Contributed Value Analysis / Sustainability Analysis 等框架，分析了 Uber 的主营业务——叫车(Ride-Hailing) 的商业模型、盈利前景和可行策略。</p>
<h3 id="其他作者">其他作者:</h3>
<ul>
<li>RUOMING GU (rg3266@columbia.edu)</li>
<li>YUXIN ZHANG (yz3718@columbia.edu)</li>
</ul>
<h3 id="正文">正文:</h3>
<div class="pdfobject-container" data-target="./BAS_FINAL_YAO.pdf" data-height="1000px"></div>
]]></content>
      <categories>
        <category>报告</category>
      </categories>
      <tags>
        <tag>Business Analytics Strategy</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>十大排序算法</title>
    <url>/2020/08/24/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="链接">链接：</h1>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247484184&amp;idx=1&amp;sn=62965b401aa42107b3c17d1d8ea17454&amp;chksm=fa0e6c99cd79e58f298e9026f677f912bd8c8e55edb48fc509b2b5834f05e529a9b47d59d202&amp;scene=21#wechat_redirect">十大经典排序算法动画与解析，看我就够了！（配代码完全版）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/52884590">视频 | 手撕九大经典排序算法，看我就够了！ - 力扣（LeetCode）的文章 - 知乎</a></p>
<h1 id="复杂度">复杂度</h1>
<figure>
<img src="https://pic2.zhimg.com/v2-b9b0c6526d416d8e8e81916ac1dd63b8_b.jpg" alt="" /><figcaption>复杂度</figcaption>
</figure>
<!-- | Sorting Algorithm | Avg. Time | Best Case  | Worst Case | Space | Inplace | Stability |
| ----------------- | --------- | ---------- | ---------- | ----- | ------- | --------- |
| BubbleSort        | O(n2)     | O(n)       | O(n2)      | O(1)  | Y       | Y         |
| SelectionSort     | O(n2)     | O(n2)      | O(n2)      | O(1)  | Y       | N         |
| InsertSort        | O(n2)     | O(n)       | O(n)       | O(1)  | Y       | N         |
| ShellSort         | O(nlogn)  | O(nlogn) |            | O(1)  | Y       | N         |
| MergeSort         |           |            |            |       | N       |           |
| QuickSort         |           |            |            |       |         |           |
| HeapSort          |           |            |            |       |         |           |
| CountingSort      |           |            |            |       | N       |           |
| BucketSort        |           |            |            |       | N       |           |
| RadixSort         |           |            |            |       | N       |           | -->
<p><a href="https://www.zhihu.com/question/24516934/answer/28076722">很多高效排序算法的代价是 nlogn，难道这是排序算法的极限了吗？ - 曾加的回答 - 知乎</a></p>
<h1 id="排序算法">排序算法</h1>
<h2 id="冒泡排序">冒泡排序</h2>
<p>基础版本： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] BubbleSort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>优化版本： 如果第<code>i</code>个循环，从第<code>0</code>个到第<code>arr.length-1-i</code>都顺序，则可以提前结束 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] BubbleSort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        flag = <span class="keyword">true</span>; <span class="comment">// 默认存在逆序对，会发生交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) </span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//如果全部顺序就提前结束外循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="选择排序">选择排序</h2>
<p>每一步找出未排序序列中的最小值 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] SelectionSort(<span class="keyword">int</span>[] sourceArray)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> argmin = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[argmin])&#123;</span><br><span class="line">                argmin = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[argmin];</span><br><span class="line">        arr[argmin] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="插入排序">插入排序</h2>
<p>把下一个元素插入到有序序列的合适位置 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] InsertSort(<span class="keyword">int</span>[] sourceArray)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        <span class="keyword">while</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp)&#123;</span><br><span class="line">            arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="希尔排序">希尔排序</h2>
<p>优化版的插入排序 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] ShellSort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arr.length &gt;&gt; <span class="number">1</span>; gap &gt;= <span class="number">1</span>; gap &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; arr[j - gap] &gt; temp) &#123;</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">                j -= gap;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="归并排序">归并排序</h2>
<p>递归，如果用原位迭代空间复杂度为o(1)但时间复杂度到o(n2) <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] MergeSort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> middle = arr.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] left = Arrays.copyOfRange(arr, <span class="number">0</span>, middle);</span><br><span class="line">    <span class="keyword">int</span>[] right = Arrays.copyOfRange(arr, middle, arr.length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge(MergeSort(left), MergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;<span class="comment">// 两个有序序列</span></span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result[i] = left[<span class="number">0</span>];</span><br><span class="line">            i++;</span><br><span class="line">            left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i] = right[<span class="number">0</span>];</span><br><span class="line">            i++;</span><br><span class="line">            right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result[i] = left[<span class="number">0</span>];</span><br><span class="line">        i++;</span><br><span class="line">        left = Arrays.copyOfRange(left, <span class="number">1</span>, left.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result[i] = right[<span class="number">0</span>];</span><br><span class="line">        i++;</span><br><span class="line">        right = Arrays.copyOfRange(right, <span class="number">1</span>, right.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="快速排序">快速排序</h2>
<ul>
<li>快速排序是对冒泡排序的一种改进。</li>
<li>时间复杂度并不固定，如果在最坏情况下（元素刚好是反向的）速度比较慢，达到 O(n^2)（和选择排序一个效率），但是如果在比较理想的情况下时间复杂度 O(nlogn)。</li>
</ul>
<figure>
<img src="https://mmbiz.qpic.cn/mmbiz_gif/D67peceibeISwc3aGibUlvZ0XqVnbWtBRiaAY3VU8iaziaYcxAasTdrIu69BOVPYtfvqdvicmlJDS94cG2tjwZhVkdHA/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="" /><figcaption>QuickSort</figcaption>
</figure>
<ul>
<li>从数列中挑出一个元素，称为 “基准”（pivot）;</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。</li>
<li>如果基准值<code>pivot</code>在最左，从<code>i=index=pivot+1</code>开始，每次遇到比<code>arr[index]</code>小的元素，就<code>swap(arr, i, index); index++</code>。<code>index</code>记录分隔符向右移动的情况，但此时pivot的位置还未改变，直到最后再<code>swap(arr), pivot, index-1</code>。</li>
<li>在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] QuickSort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">        <span class="keyword">return</span> quicksort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] quicksort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123; <span class="comment">// 约束，防止partitionIndex到0</span></span><br><span class="line">        <span class="keyword">int</span> partitionIndex = partition(arr, left, right); <span class="comment">// partition实际执行排序操作</span></span><br><span class="line">        quicksort(arr, left, partitionIndex - <span class="number">1</span>); <span class="comment">// 不含中间</span></span><br><span class="line">        quicksort(arr, partitionIndex + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// partition方法对arr进行修改</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = left;</span><br><span class="line">    <span class="keyword">int</span> index = pivot + <span class="number">1</span>; <span class="comment">// 从左端开始</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">            swap(arr, i, index); <span class="comment">// pivot右边一位作为index不断地和后续比arr[pivot]小的元素交换位置，</span></span><br><span class="line">            index++; <span class="comment">// index位向右挪</span></span><br><span class="line">            <span class="comment">// 最终pivot往右直到index-1都是小于基准的，再把pivot放到中间位置index-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr, pivot, index - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> index - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆排序">堆排序</h2>
<ul>
<li>堆：相较于完全二叉树，所有父节点的值大于（小于）子节点</li>
<li>最大堆的最大元素值出现在根结点（堆顶）</li>
<li>稳定性：不稳定</li>
<li>完全二叉树、二叉堆属于数据结构。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> largest = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest] )&#123; <span class="comment">//注意次序，先判断index</span></span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest])&#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &lt; largest)&#123;</span><br><span class="line">        swap(arr, i, largest);</span><br><span class="line">        heapify(arr, largest, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len &gt;&gt; <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123; <span class="comment">//i &gt;= 0</span></span><br><span class="line">        heapify(arr, i, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] sourceArray)&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line"></span><br><span class="line">    buildMaxHeap(arr, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        swap(arr, <span class="number">0</span>, i); <span class="comment">// 右下子节点和根节点交换，根节点最大值放到最后</span></span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, <span class="number">0</span>, len); <span class="comment">//调整堆</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="计数排序">计数排序</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] CountingSort(<span class="keyword">int</span>[] sourceArray)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">        <span class="keyword">return</span> (countingsort(arr, getMaxValue(arr)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] countingsort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> maxValue)&#123;</span><br><span class="line">    <span class="keyword">int</span> bucketlen = maxValue + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] bucketarr = <span class="keyword">new</span> <span class="keyword">int</span>[bucketlen];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> value: arr)&#123;</span><br><span class="line">        bucketarr[value] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sortedIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketlen; i++)&#123; <span class="comment">// i &lt; bucketlen</span></span><br><span class="line">        <span class="keyword">while</span> (bucketarr[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            arr[sortedIndex++] = i;</span><br><span class="line">            bucketarr[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxValue</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        maxValue = arr[i] &gt; maxValue ? arr[i] : maxValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="桶排序">桶排序</h2>
<figure>
<img src="https://mmbiz.qpic.cn/mmbiz_gif/D67peceibeISwc3aGibUlvZ0XqVnbWtBRia0umOurgFRv8ESYzcK6bXknufLgJGLaiaTrDTXUk09R6ia2DhbCPAJx0A/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="" /><figcaption>BucketSort</figcaption>
</figure>
<ul>
<li>设置固定数量的空桶。</li>
<li>把数据放到对应的桶中</li>
<li>对每个不为空的桶中数据进行排序</li>
<li>拼接不为空的桶中数据，得到结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BucketSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123; <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span> &#125;;</span><br><span class="line">        System.out.println(Arrays.toString(sort(a)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">        <span class="keyword">return</span> bucketSort(arr, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//桶排序主体部分 </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] bucketSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> bucketSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> minValue = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">            maxValue = value &gt; maxValue ? value : maxValue;</span><br><span class="line">            minValue = value &lt; minValue ? value : minValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> bucketCount = (<span class="keyword">int</span>) Math.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[bucketCount][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">            <span class="keyword">int</span> bucketIndex = (<span class="keyword">int</span>) Math.floor((value - minValue) / bucketSize);</span><br><span class="line">            buckets[bucketIndex] = arrayAppend(buckets[bucketIndex], value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sortedIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (buckets[i].length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] bucket = buckets[i];</span><br><span class="line">            bucket = InsertSort(bucket);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucket.length; j++) &#123;</span><br><span class="line">                arr[sortedIndex++] = bucket[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个桶内部用到插入排序</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] InsertSort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp) &#123;</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[a];</span><br><span class="line">        arr[a] = arr[b];</span><br><span class="line">        arr[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// array扩容</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] arrayAppend(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a) &#123;</span><br><span class="line">        arr = Arrays.copyOf(arr, arr.length + <span class="number">1</span>);</span><br><span class="line">        arr[arr.length - <span class="number">1</span>] = a;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基数排序">基数排序</h2>
<ul>
<li>首先通过<code>getMaxValue</code>方法得出最大数</li>
<li>通过<code>getDigitCount</code>方法得出最大数的数位数，也就是全arr的最大digits数</li>
<li><code>getDigitValue</code>方法可以给出给定数的某数位的值</li>
<li>从低位（个位）开始，新建0-9十个空桶，按照arr中每个数的个位放入桶中，然后再依次放回到arr中</li>
<li>再进入下一位，新建十个空桶，重复操作</li>
<li>直到遍历MaxDigit</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">        <span class="keyword">int</span> maxDigit = getMaxDigit(arr);</span><br><span class="line">        <span class="keyword">return</span> radixSort(arr, maxDigit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] radixSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> maxDigit) &#123;</span><br><span class="line">        <span class="comment">// 从个位比较开始数位 (低位)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxDigit; i++) &#123;</span><br><span class="line">            <span class="comment">// 每次比较数位时初始化新的10个空桶</span></span><br><span class="line">            <span class="keyword">int</span>[][] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">0</span>]; <span class="comment">// 0-9, 10 buckets, each store several values;</span></span><br><span class="line">            <span class="comment">// arr的值进入10个桶</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">                buckets[getDigitValue(value, i)] = arrayAppend(buckets[getDigitValue(value, i)], value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从桶中把值拿出来放回arr</span></span><br><span class="line">            <span class="keyword">int</span> sortedIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// System.out.printf(&quot;buckets[%d]: %s&quot;, j, Arrays.toString(buckets[j]));</span></span><br><span class="line">                <span class="keyword">if</span> (buckets[j].length == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> value : buckets[j]) &#123;</span><br><span class="line">                    arr[sortedIndex++] = value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 个位为第0位</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDigitValue</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> digit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> digitCount = getDigitCount(a);</span><br><span class="line">        <span class="keyword">if</span> (digit &gt; digitCount - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digit; i++) &#123;</span><br><span class="line">            a /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxDigit</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxValue = getMaxValue(arr);</span><br><span class="line">        <span class="keyword">return</span> getDigitCount(maxValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDigitCount</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> digitCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            a /= <span class="number">10</span>;</span><br><span class="line">            digitCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digitCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxValue</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxValue = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">            maxValue = value &gt; maxValue ? value : maxValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] arrayAppend(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a) &#123;</span><br><span class="line">        arr = Arrays.copyOf(arr, arr.length + <span class="number">1</span>);</span><br><span class="line">        arr[arr.length - <span class="number">1</span>] = a;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123; <span class="number">9</span>, <span class="number">28</span>, <span class="number">7</span>, <span class="number">345</span>, <span class="number">579</span>, <span class="number">42</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">101</span> &#125;;</span><br><span class="line">        System.out.println(Arrays.toString(sort(a)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java数据结构与算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>python股票分析</title>
    <url>/2020/09/01/python%E8%82%A1%E7%A5%A8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1NW411W7FK">【Python学习】股票分析系列（中文自制） by 大力牛肉粉</a></p>
<p><a href="http://data.eastmoney.com/zjlx/detail.html">东方财富网资金流向</a></p>
<p><a href="https://curl.trillworks.com/">Convert curl syntax to Python, Ansible URI, MATLAB, Node.js, R, PHP, Strest, Go, Dart, JSON, Elixir, Rust</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas_datareader <span class="keyword">as</span> pdr <span class="comment"># 获取在线数据</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> style <span class="comment"># style</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="获取数据">获取数据</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start = dt.datetime(<span class="number">2019</span>, <span class="number">8</span>, <span class="number">30</span>)</span><br><span class="line">end = dt.datetime(<span class="number">2020</span>, <span class="number">8</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">df = pdr.get_data_yahoo(<span class="string">&quot;TSLA&quot;</span>, start, end)</span><br><span class="line">df.to_csv(<span class="string">&quot;tsla.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;tsla.csv&quot;</span>, parse_dates=<span class="literal">True</span>, index_col=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">style.use(<span class="string">&quot;ggplot&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.plot(figsize=(<span class="number">16</span>,<span class="number">10</span>),fontsize=<span class="number">16</span>)</span><br></pre></td></tr></table></figure>
<pre><code>&lt;AxesSubplot:xlabel=&#39;Date&#39;&gt;</code></pre>
<figure>
<img src="pyFinance_files/pyFinance_4_1.svg" alt="" /><figcaption>svg</figcaption>
</figure>
<h1 id="十日均线">十日均线</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;tsla.csv&quot;</span>, parse_dates=<span class="literal">True</span>, index_col=<span class="number">0</span>)</span><br><span class="line">df[<span class="string">&quot;10ma&quot;</span>] = df[<span class="string">&quot;Adj Close&quot;</span>].rolling(window=<span class="number">10</span>, min_periods=<span class="number">0</span>).mean()</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
High
</th>
<th>
Low
</th>
<th>
Open
</th>
<th>
Close
</th>
<th>
Volume
</th>
<th>
Adj Close
</th>
<th>
10ma
</th>
</tr>
<tr>
<th>
Date
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
2019-08-30
</th>
<td>
46.487999
</td>
<td>
44.841999
</td>
<td>
45.830002
</td>
<td>
45.122002
</td>
<td>
46603000.0
</td>
<td>
45.122002
</td>
<td>
45.122002
</td>
</tr>
<tr>
<th>
2019-09-03
</th>
<td>
45.790001
</td>
<td>
44.632000
</td>
<td>
44.816002
</td>
<td>
45.001999
</td>
<td>
26770500.0
</td>
<td>
45.001999
</td>
<td>
45.062000
</td>
</tr>
<tr>
<th>
2019-09-04
</th>
<td>
45.692001
</td>
<td>
43.841999
</td>
<td>
45.377998
</td>
<td>
44.136002
</td>
<td>
28805000.0
</td>
<td>
44.136002
</td>
<td>
44.753334
</td>
</tr>
<tr>
<th>
2019-09-05
</th>
<td>
45.959999
</td>
<td>
44.169998
</td>
<td>
44.500000
</td>
<td>
45.916000
</td>
<td>
36976500.0
</td>
<td>
45.916000
</td>
<td>
45.044001
</td>
</tr>
<tr>
<th>
2019-09-06
</th>
<td>
45.928001
</td>
<td>
45.034000
</td>
<td>
45.439999
</td>
<td>
45.490002
</td>
<td>
20947000.0
</td>
<td>
45.490002
</td>
<td>
45.133201
</td>
</tr>
</tbody>
</table>
</div>
<h1 id="ax和subplot">ax和subplot</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="comment"># SimHei：微软雅黑</span></span><br><span class="line"><span class="comment"># FangSong：仿宋</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">ax.plot(df.index, df[<span class="string">&quot;Adj Close&quot;</span>])</span><br><span class="line">ax.plot(df.index, df[<span class="string">&quot;10ma&quot;</span>])</span><br><span class="line">ax.legend([<span class="string">&quot;Adj Close&quot;</span>, <span class="string">&quot;10ma&quot;</span>])</span><br><span class="line">ax.set_title(<span class="string">&quot;Adj_Close &amp; 10ma&quot;</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;Date&quot;</span>, fontsize=<span class="number">18</span>, fontfamily = <span class="string">&#x27;DejaVu Sans&#x27;</span>, fontstyle=<span class="string">&quot;italic&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;$&quot;</span>, fontsize = <span class="string">&quot;x-large&quot;</span>, fontstyle=<span class="string">&quot;oblique&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ax.minorticks_on()</span></span><br><span class="line">ax.grid(which=<span class="string">&quot;minor&quot;</span>, axis=<span class="string">&quot;both&quot;</span>)</span><br><span class="line"><span class="comment"># ax.margins(0)</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="pyFinance_files/pyFinance_8_0.svg" alt="" /><figcaption>svg</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, axs = plt.subplots(<span class="number">2</span>, figsize=(<span class="number">10</span>,<span class="number">6</span>))</span><br><span class="line">ax = axs[<span class="number">0</span>]</span><br><span class="line">ax2 = axs[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">ax.plot(df.index, df[<span class="string">&quot;Adj Close&quot;</span>])</span><br><span class="line">ax.plot(df.index, df[<span class="string">&quot;10ma&quot;</span>])</span><br><span class="line">ax.legend([<span class="string">&quot;Adj Close&quot;</span>, <span class="string">&quot;10ma&quot;</span>])</span><br><span class="line">ax.set_title(<span class="string">&quot;Adj_Close &amp; 10ma&quot;</span>)</span><br><span class="line"><span class="comment"># ax.set_xlabel(&quot;Date&quot;,  fontfamily = &#x27;DejaVu Sans&#x27;, fontstyle=&quot;italic&quot;)</span></span><br><span class="line">ax.set_ylabel(<span class="string">&quot;$&quot;</span>, fontstyle=<span class="string">&quot;oblique&quot;</span>)</span><br><span class="line"></span><br><span class="line">ax2.bar(df.index, df[<span class="string">&quot;Volume&quot;</span>])</span><br><span class="line">ax2.set_ylabel(<span class="string">&quot;Volume&quot;</span>, fontstyle=<span class="string">&quot;oblique&quot;</span>)</span><br><span class="line">style.use(<span class="string">&quot;ggplot&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="pyFinance_files/pyFinance_9_0.svg" alt="" /><figcaption>svg</figcaption>
</figure>
<h1 id="蜡烛图">蜡烛图</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line"><span class="keyword">from</span> mpl_finance <span class="keyword">import</span> candlestick_ohlc <span class="comment">#蜡烛图</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;tsla.csv&quot;</span>, parse_dates=<span class="literal">True</span>, index_col=<span class="number">0</span>)</span><br><span class="line">df_ohlc = df[<span class="string">&quot;Adj Close&quot;</span>].resample(<span class="string">&quot;10D&quot;</span>).ohlc() <span class="comment">#open high low close</span></span><br><span class="line">df_volume = df[<span class="string">&quot;Volume&quot;</span>].resample(<span class="string">&quot;10D&quot;</span>).sum()</span><br><span class="line">df_ohlc.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line">df_ohlc.Date = df_ohlc.Date.map(mdates.date2num)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">10</span>))</span><br><span class="line">ax1 = plt.subplot2grid((<span class="number">6</span>,<span class="number">1</span>), (<span class="number">0</span>,<span class="number">0</span>), rowspan=<span class="number">5</span>, colspan=<span class="number">1</span>)</span><br><span class="line">ax2 = plt.subplot2grid((<span class="number">6</span>,<span class="number">1</span>), (<span class="number">5</span>,<span class="number">0</span>), rowspan=<span class="number">1</span>, colspan=<span class="number">1</span>, sharex = ax1)</span><br><span class="line"></span><br><span class="line">ax1.xaxis_date()</span><br><span class="line">candlestick_ohlc(ax1, df_ohlc.values, width=<span class="number">5</span>, colorup=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">ax2.fill_between(df_volume.index.map(mdates.date2num), df_volume.values, <span class="number">0</span>)</span><br><span class="line">ax2.plot(df_volume)</span><br><span class="line"></span><br><span class="line">style.use(<span class="string">&quot;ggplot&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<figure>
<img src="pyFinance_files/pyFinance_13_0.svg" alt="" /><figcaption>svg</figcaption>
</figure>
<h1 id="标普500公司简称获取爬虫">标普500公司简称获取(爬虫)</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs <span class="comment"># 字典</span></span><br><span class="line"><span class="keyword">import</span> pickle <span class="comment"># 列表，序列化</span></span><br><span class="line"><span class="keyword">import</span> requests <span class="comment"># 网络请求</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_sp500_tickers</span>():</span></span><br><span class="line">    resp = requests.get(<span class="string">&quot;https://en.wikipedia.org/wiki/List_of_S%26P_500_companies&quot;</span>)</span><br><span class="line">    soup = bs(resp.text, <span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    table = soup.find(<span class="string">&quot;table&quot;</span>, &#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;wikitable sortable&quot;</span>&#125;)</span><br><span class="line">    tickers = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> table.findAll(<span class="string">&#x27;tr&#x27;</span>)[<span class="number">1</span>:]:</span><br><span class="line">        ticker = row.findAll(<span class="string">&#x27;td&#x27;</span>)[<span class="number">0</span>].text.replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        tickers.append(ticker)</span><br><span class="line">    <span class="comment"># print(tickers)</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;sp500tickers.pickle&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f: <span class="comment"># 二进制只读</span></span><br><span class="line">        pickle.dump(tickers, f)</span><br><span class="line">    <span class="keyword">return</span> tickers</span><br><span class="line">        </span><br><span class="line"><span class="comment"># save_sp500_tickers()</span></span><br></pre></td></tr></table></figure>
<h1 id="下载sp500股票数据">下载SP500股票数据</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os <span class="comment"># 系统接口</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="keyword">import</span> pandas_datareader <span class="keyword">as</span> pdr</span><br><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data_from_yahoo</span>(<span class="params">isReload=False</span>):</span></span><br><span class="line">    <span class="keyword">if</span> isReload:</span><br><span class="line">        tickers = save_sp500_tickers()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&quot;sp500tickers.pickle&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            tickers = pickle.load(f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;stock_dfs&quot;</span>): <span class="comment">#当前目录无该子目录</span></span><br><span class="line">        os.makedirs(<span class="string">&quot;stock_dfs&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    start = dt.datetime(<span class="number">2016</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    end = dt.datetime(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ticker <span class="keyword">in</span> tickers:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;stock_dfs/&#123;&#125;.csv&quot;</span>.format(ticker)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                df = pdr.get_data_yahoo(ticker, start, end)</span><br><span class="line">                df.to_csv(<span class="string">&quot;stock_dfs/&#123;&#125;.csv&quot;</span>.format(ticker))</span><br><span class="line">                print(<span class="string">&quot;Download complete: &#123;&#125;&quot;</span>.format(ticker))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;Already exist: &#123;&#125;&quot;</span>.format(ticker))</span><br><span class="line">    </span><br><span class="line">get_data_from_yahoo(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h1 id="整合数据">整合数据</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compile_data</span>():</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;sp500tickers.pickle&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        tickers = pickle.load(f)[:<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">    main_df = pd.DataFrame()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># compile</span></span><br><span class="line">    <span class="keyword">for</span> count, ticker <span class="keyword">in</span> enumerate(tickers):</span><br><span class="line">        df = pd.read_csv(<span class="string">&quot;stock_dfs/&#123;&#125;.csv&quot;</span>.format(ticker))</span><br><span class="line">        df.set_index(<span class="string">&quot;Date&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        df.rename(columns = &#123;<span class="string">&quot;Adj Close&quot;</span>: ticker&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line">        df.drop([<span class="string">&quot;Open&quot;</span>, <span class="string">&quot;High&quot;</span>, <span class="string">&quot;Low&quot;</span>, <span class="string">&quot;Close&quot;</span>, <span class="string">&quot;Volume&quot;</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> main_df.empty:</span><br><span class="line">            main_df = df</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            main_df = main_df.join(df, how=<span class="string">&quot;left&quot;</span>)</span><br><span class="line">        print(count)</span><br><span class="line">        <span class="keyword">if</span> count == <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    main_df.to_csv(<span class="string">&quot;sp500_joined.csv&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> main_df</span><br><span class="line"></span><br><span class="line">main_df = compile_data()</span><br></pre></td></tr></table></figure>
<pre><code>0
1
2
3
4
5
6
7
8
9</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">main_df</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
MMM
</th>
<th>
ABT
</th>
<th>
ABBV
</th>
<th>
ABMD
</th>
<th>
ACN
</th>
<th>
ATVI
</th>
<th>
ADBE
</th>
<th>
AMD
</th>
<th>
AAP
</th>
<th>
AES
</th>
</tr>
<tr>
<th>
Date
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
2016-01-04
</th>
<td>
128.033249
</td>
<td>
39.050327
</td>
<td>
46.141216
</td>
<td>
85.239998
</td>
<td>
93.774796
</td>
<td>
36.365803
</td>
<td>
91.970001
</td>
<td>
2.770000
</td>
<td>
150.250793
</td>
<td>
7.769172
</td>
</tr>
<tr>
<th>
2016-01-05
</th>
<td>
128.591339
</td>
<td>
39.041222
</td>
<td>
45.948997
</td>
<td>
85.000000
</td>
<td>
94.262863
</td>
<td>
35.901806
</td>
<td>
92.339996
</td>
<td>
2.750000
</td>
<td>
149.224380
</td>
<td>
7.876278
</td>
</tr>
<tr>
<th>
2016-01-06
</th>
<td>
126.001358
</td>
<td>
38.713760
</td>
<td>
45.956993
</td>
<td>
85.300003
</td>
<td>
94.078682
</td>
<td>
35.563477
</td>
<td>
91.019997
</td>
<td>
2.510000
</td>
<td>
145.276642
</td>
<td>
7.604397
</td>
</tr>
<tr>
<th>
2016-01-07
</th>
<td>
122.931786
</td>
<td>
37.785950
</td>
<td>
45.820843
</td>
<td>
81.919998
</td>
<td>
91.316017
</td>
<td>
35.060810
</td>
<td>
89.110001
</td>
<td>
2.280000
</td>
<td>
146.885345
</td>
<td>
7.414905
</td>
</tr>
<tr>
<th>
2016-01-08
</th>
<td>
122.513206
</td>
<td>
36.994564
</td>
<td>
44.571400
</td>
<td>
84.580002
</td>
<td>
90.431938
</td>
<td>
34.519478
</td>
<td>
87.849998
</td>
<td>
2.140000
</td>
<td>
143.658066
</td>
<td>
7.522010
</td>
</tr>
<tr>
<th>
...
</th>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<th>
2018-12-24
</th>
<td>
168.035690
</td>
<td>
63.701054
</td>
<td>
75.395958
</td>
<td>
281.079987
</td>
<td>
130.427887
</td>
<td>
43.354313
</td>
<td>
205.160004
</td>
<td>
16.650000
</td>
<td>
147.761047
</td>
<td>
13.031178
</td>
</tr>
<tr>
<th>
2018-12-26
</th>
<td>
175.222961
</td>
<td>
67.645943
</td>
<td>
79.767776
</td>
<td>
307.440002
</td>
<td>
135.638382
</td>
<td>
45.749195
</td>
<td>
222.949997
</td>
<td>
17.900000
</td>
<td>
153.823486
</td>
<td>
13.464924
</td>
</tr>
<tr>
<th>
2018-12-27
</th>
<td>
179.399902
</td>
<td>
68.627304
</td>
<td>
80.547180
</td>
<td>
315.670013
</td>
<td>
137.004425
</td>
<td>
46.360237
</td>
<td>
225.139999
</td>
<td>
17.490000
</td>
<td>
153.486160
</td>
<td>
13.474353
</td>
</tr>
<tr>
<th>
2018-12-28
</th>
<td>
178.148697
</td>
<td>
69.074249
</td>
<td>
81.631172
</td>
<td>
318.170013
</td>
<td>
136.428741
</td>
<td>
46.123703
</td>
<td>
223.130005
</td>
<td>
17.820000
</td>
<td>
154.250168
</td>
<td>
13.455495
</td>
</tr>
<tr>
<th>
2018-12-31
</th>
<td>
179.249359
</td>
<td>
70.279106
</td>
<td>
82.589752
</td>
<td>
325.040009
</td>
<td>
137.589874
</td>
<td>
45.897026
</td>
<td>
226.240005
</td>
<td>
18.459999
</td>
<td>
156.234573
</td>
<td>
13.634648
</td>
</tr>
</tbody>
</table>
<p>
754 rows × 10 columns
</p>
</div>
<h1 id="数据可视化">数据可视化</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 股票相关度？</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_data</span>():</span></span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;sp500_joined.csv&quot;</span>)</span><br><span class="line">    df_corr = df.corr()</span><br><span class="line">    df_corr.to_csv(<span class="string">&quot;sp500corr.csv&quot;</span>)</span><br><span class="line">    data1 = df_corr.values</span><br><span class="line">    fig1 = plt.figure()</span><br><span class="line">    ax1 = fig1.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">    heatmap1 = ax1.pcolor(data1, cmap=plt.cm.RdYlGn)</span><br><span class="line">    fig1.colorbar(heatmap1)</span><br><span class="line"></span><br><span class="line">    ax1.set_xticks(np.arange(data1.shape[<span class="number">1</span>]))</span><br><span class="line">    ax1.set_yticks(np.arange(data1.shape[<span class="number">0</span>]))</span><br><span class="line">    ax1.invert_yaxis()</span><br><span class="line">    ax1.xaxis.tick_top()</span><br><span class="line">    column_labels = df_corr.columns</span><br><span class="line">    row_labels = df_corr.index</span><br><span class="line">    ax1.set_xticklabels(column_labels)</span><br><span class="line">    ax1.set_yticklabels(row_labels)</span><br><span class="line">    plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">    heatmap1.set_clim(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">visualize_data()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="pyFinance_files/pyFinance_24_0.svg" alt="" /><figcaption>svg</figcaption>
</figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 股票相关度？</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visualize_data</span>():</span></span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;sp500_joined.csv&quot;</span>)</span><br><span class="line">    df_corr = df.corr()</span><br><span class="line">    df_corr.to_csv(<span class="string">&quot;sp500corr.csv&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    f, axes = plt.subplots(<span class="number">1</span>, figsize=(<span class="number">10</span>,<span class="number">8</span>))</span><br><span class="line">    <span class="comment"># sns.set(style=&quot;whitegrid&quot;)</span></span><br><span class="line">    sns.despine(left=<span class="literal">True</span>)</span><br><span class="line">    sns.heatmap(df_corr, cmap= <span class="string">&quot;RdYlGn&quot;</span>, cbar=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">visualize_data()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="pyFinance_files/pyFinance_26_0.svg" alt="" /><figcaption>svg</figcaption>
</figure>
<h1 id="获取7日内股价波动">获取7日内股价波动</h1>
<ul>
<li>买/卖/持有？</li>
<li>7日内表现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_data_for_labels</span>(<span class="params">ticker</span>):</span></span><br><span class="line">    hm_days = <span class="number">7</span></span><br><span class="line">    df = pd.read_csv(<span class="string">&quot;sp500_joined.csv&quot;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">    tickers = df.columns.values.tolist()</span><br><span class="line">    df.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, hm_days+<span class="number">1</span>):</span><br><span class="line">        df[<span class="string">&quot;&#123;&#125;_&#123;&#125;d&quot;</span>.format(ticker, i)] = (df[ticker].shift(-i)-df[ticker])/df[ticker]</span><br><span class="line">    df.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> tickers, df</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_sell_hold</span>(<span class="params">*args</span>):</span></span><br><span class="line">    cols = [c <span class="keyword">for</span> c <span class="keyword">in</span> args]</span><br><span class="line">    requirement = <span class="number">0.02</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> cols:</span><br><span class="line">        <span class="keyword">if</span> col &gt; requirement:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> col &lt; -requirement:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h1 id="获取特征集合">获取特征集合</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_featuresets</span>(<span class="params">ticker</span>):</span></span><br><span class="line">    tickers, df = process_data_for_labels(ticker)</span><br><span class="line">    df[<span class="string">&quot;&#123;&#125;_target&quot;</span>.format(ticker)] = list(map(buy_sell_hold, </span><br><span class="line">                                    df[<span class="string">&quot;&#123;&#125;_1d&quot;</span>.format(ticker)],</span><br><span class="line">                                    df[<span class="string">&quot;&#123;&#125;_2d&quot;</span>.format(ticker)],</span><br><span class="line">                                    df[<span class="string">&quot;&#123;&#125;_3d&quot;</span>.format(ticker)],</span><br><span class="line">                                    df[<span class="string">&quot;&#123;&#125;_4d&quot;</span>.format(ticker)],</span><br><span class="line">                                    df[<span class="string">&quot;&#123;&#125;_5d&quot;</span>.format(ticker)],</span><br><span class="line">                                    df[<span class="string">&quot;&#123;&#125;_6d&quot;</span>.format(ticker)],</span><br><span class="line">                                    df[<span class="string">&quot;&#123;&#125;_7d&quot;</span>.format(ticker)],</span><br><span class="line">                                    ))</span><br><span class="line"></span><br><span class="line">    vals = df[<span class="string">&quot;&#123;&#125;_target&quot;</span>.format(ticker)].values.tolist()</span><br><span class="line">    str_vals = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> vals]</span><br><span class="line">    <span class="comment"># print(&quot;Data spread&quot;, Counter(str_vals))</span></span><br><span class="line"></span><br><span class="line">    df.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    df.replace([np.inf, -np.inf], np.nan, inplace=<span class="literal">True</span>)</span><br><span class="line">    df.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    df_vals = df[[t <span class="keyword">for</span> t <span class="keyword">in</span> tickers]].pct_change() <span class="comment"># 环比</span></span><br><span class="line">    df_vals.replace([np.inf, -np.inf], np.nan)</span><br><span class="line">    df_vals.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    X = df_vals.values</span><br><span class="line">    y = df[<span class="string">f&quot;<span class="subst">&#123;ticker&#125;</span>_target&quot;</span>].values</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> X, y, df</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="机器学习">机器学习</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X, y, _ = extract_featuresets(<span class="string">&quot;MMM&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm, neighbors <span class="comment">#cross_validation deprecated </span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> VotingClassifier, RandomForestClassifier<span class="comment"># 综合不同算法</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_ml</span>(<span class="params">ticker</span>):</span></span><br><span class="line">    X,y,df</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2020/09/02/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h2 id="链接">链接</h2>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247485570&amp;idx=2&amp;sn=7a4e2635aafcf1c9bd01642f6cedd409&amp;chksm=fa0e6703cd79ee15f692f31c488aac6787a08ffea2ffe457a037310df355c1e6a810919333e4&amp;scene=21#wechat_redirect">二分查找算法详解</a></p>
<h2 id="代码">代码</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">binarysearch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(right_bound(a, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 默认数组有序</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = arr.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (target == arr[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; target)&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找左侧边界</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">left_bound</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line">        <span class="keyword">int</span> left, right;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] == target)&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; target)&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == arr.length) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (arr[left] == target) ? left : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寻找右侧边界</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">right_bound</span><span class="params">(<span class="keyword">int</span>[]arr, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line">        <span class="keyword">int</span> left, right;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">        right = n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] == target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; target)&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (arr[left - <span class="number">1</span>] == target) ? left - <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意点">注意点</h3>
<ol type="1">
<li>确定左右边界时, 初始区间[0, arr.length)。</li>
<li>确定左边界时, 关键在于</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (arr[mid] == target)&#123;</span><br><span class="line">    right = mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是由于每次mid的判断将<code>[Left, right)</code> 分成两部分, 这样可以逐次剥除最右的等于target的元素</p>
<ol start="3" type="1">
<li>确定右边界时,</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (arr[mid] == target)&#123;</span><br><span class="line">    left = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样的，如果剥除最左的等于target的元素，由于区间左闭，需要去除mid。</p>
]]></content>
      <categories>
        <category>Java数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>链表题(持续更新)</title>
    <url>/2020/09/02/%E9%93%BE%E8%A1%A8%E9%A2%98-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h2 id="链表类listnode定义"><a class="markdownIt-Anchor" href="#链表类listnode定义"></a> 链表类<code>ListNode</code>定义</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">        val = x;</span><br><span class="line">        next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] toArray(ListNode head)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;&#125;;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            arr = Arrays.copyOf(arr, arr.length+<span class="number">1</span>);</span><br><span class="line">            arr[arr.length-<span class="number">1</span>] = head.val;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">fromArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode ll = <span class="keyword">new</span> ListNode(arr[<span class="number">0</span>]);</span><br><span class="line">        ListNode head = ll;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            ll.next = <span class="keyword">new</span> ListNode(arr[i]);</span><br><span class="line">            ll = ll.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>提供了导入导出为数组的内置静态方法。</p>
<h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2>
<h3 id="反转链表"><a class="markdownIt-Anchor" href="#反转链表"></a> 反转链表</h3>
<p>题目描述：输入一个链表，反转链表后，输出新链表的表头。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode prev, curr, next, result;</span><br><span class="line">        prev = <span class="keyword">null</span>;</span><br><span class="line">        curr = head;</span><br><span class="line">        result = curr;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span>)&#123;</span><br><span class="line">            next = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            result = curr;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更简洁的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">    ListNode prev, curr, next;</span><br><span class="line">    prev = <span class="keyword">null</span>; curr = head; </span><br><span class="line">    <span class="keyword">while</span>(curr != <span class="keyword">null</span>)&#123;</span><br><span class="line">        next = curr.next;</span><br><span class="line">        curr.next= prev; </span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表有环"><a class="markdownIt-Anchor" href="#链表有环"></a> 链表有环</h3>
<p>题目描述：判断给定的链表中是否有环<br />
扩展：你能给出空间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的解法么？</p>
<p>解法: 快慢指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode fast, slow;</span><br><span class="line">        fast = head;</span><br><span class="line">        slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并有序列表"><a class="markdownIt-Anchor" href="#合并有序列表"></a> 合并有序列表</h3>
<p>题目描述：将两个有序的链表合并为一个新链表，要求新的链表是通过拼接两个链表的节点来生成的</p>
<p>解法: 类似归并排序的思路</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LL</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">mergeTwoLists</span> <span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize </span></span><br><span class="line">        ListNode last;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class="line">            last = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            last = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode result = last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// System.out.printf(&quot;l1.val &#123;%d&#125;, l2.val &#123;%d&#125;\n&quot;, l1.val, l2.val);</span></span><br><span class="line">            <span class="keyword">if</span> (l1.val &lt;= l2.val)&#123;</span><br><span class="line">                last.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                last.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            last = last.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// System.out.printf(&quot;l1.val &#123;%d&#125;\n&quot;, l1.val);</span></span><br><span class="line">            last.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            last = last.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// System.out.printf(&quot;l2.val &#123;%d&#125;\n&quot;, l2.val);</span></span><br><span class="line">            last.next = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">            last = last.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] a2 = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        ListNode l1 = ListNode.fromArray(a1);</span><br><span class="line">        ListNode l2 = ListNode.fromArray(a2);</span><br><span class="line">        ListNode merged = mergeTwoLists(l1, l2);</span><br><span class="line">        System.out.println(Arrays.toString(ListNode.toArray(merged)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="97删除链表的倒数第n个节点"><a class="markdownIt-Anchor" href="#97删除链表的倒数第n个节点"></a> (9.7)删除链表的倒数第n个节点</h3>
<p>题目描述：</p>
<ul>
<li>
<p>给定一个链表，删除链表的倒数第n个节点并返回链表的头指针</p>
</li>
<li>
<p>例如，<br />
给出的链表为:1-&gt;2-&gt;3-&gt;4-&gt;5, n= 2.<br />
删除了链表的倒数第n个节点之后,链表变为1-&gt;2-&gt;3-&gt;5.</p>
</li>
<li>
<p>备注：题目保证n一定是有效的</p>
</li>
<li>
<p>请给出时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的算法</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    ListNode prev, curr, next;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    curr = head;</span><br><span class="line">    <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 去除head</span></span><br><span class="line">    <span class="keyword">if</span> (n == len) &#123;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curr = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    prev = curr;</span><br><span class="line">    curr = curr.next;</span><br><span class="line">    next = curr.next;</span><br><span class="line">    prev.next = next;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="97两个链表生成相加链表"><a class="markdownIt-Anchor" href="#97两个链表生成相加链表"></a> (9.7)两个链表生成相加链表</h3>
<p>题目描述：</p>
<ul>
<li>假设链表中每一个节点的值都在 0 - 9 之间，那么链表整体就可以代表一个整数。</li>
<li>给定两个这种链表，请生成代表两个整数相加值的结果链表。</li>
<li>例如：链表 1 为 9-&gt;3-&gt;7，链表 2 为 6-&gt;3，最后生成新的结果链表为 1-&gt;0-&gt;0-&gt;0。</li>
</ul>
<p>分析：</p>
<p>用到了之前的<strong>反转链表</strong>，以及数组相加的策略（进位）。链表增加结点需要考虑初始化的情况。最重要的还是确定哪一步同步current和result两个链表。<br />
讨论区反映java卡75%算例，超时。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">addInList0907</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">addInList</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ListNode head1Rev = reverseList(head1);</span><br><span class="line">        ListNode head2Rev = reverseList(head2);</span><br><span class="line">        ListNode mergeRevCurr = <span class="keyword">null</span>;</span><br><span class="line">        ListNode mergeRev = mergeRevCurr;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> cache = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> digit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> init = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head1Rev != <span class="keyword">null</span> &amp;&amp; head2Rev != <span class="keyword">null</span>) &#123;</span><br><span class="line">            digit = head1Rev.val + head2Rev.val + cache;</span><br><span class="line">            <span class="keyword">if</span> (digit &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                digit -= <span class="number">10</span>;</span><br><span class="line">                cache = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cache = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode currDigit = <span class="keyword">new</span> ListNode(digit);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (init) &#123;</span><br><span class="line">                init = <span class="keyword">false</span>;</span><br><span class="line">                mergeRevCurr = currDigit; <span class="comment">// 这一步同步</span></span><br><span class="line">                mergeRev = mergeRevCurr;</span><br><span class="line">                <span class="comment">// System.out.println(Arrays.toString(ListNode.toArray(mergeRev)));</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mergeRevCurr.next = currDigit;</span><br><span class="line">                mergeRevCurr = mergeRevCurr.next;</span><br><span class="line">            &#125;</span><br><span class="line">            head1Rev = head1Rev.next;</span><br><span class="line">            head2Rev = head2Rev.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head1Rev != <span class="keyword">null</span>) &#123;</span><br><span class="line">            digit = head1Rev.val + cache;</span><br><span class="line">            <span class="keyword">if</span> (digit &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                digit -= <span class="number">10</span>;</span><br><span class="line">                cache = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cache = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode currDigit = <span class="keyword">new</span> ListNode(digit);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (init)</span><br><span class="line">                mergeRevCurr = currDigit;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                mergeRevCurr.next = currDigit;</span><br><span class="line">                mergeRevCurr = mergeRevCurr.next;</span><br><span class="line">            &#125;</span><br><span class="line">            head1Rev = head1Rev.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head2Rev != <span class="keyword">null</span>) &#123;</span><br><span class="line">            digit = head2Rev.val + cache;</span><br><span class="line">            <span class="keyword">if</span> (digit &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                digit -= <span class="number">10</span>;</span><br><span class="line">                cache = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cache = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ListNode currDigit = <span class="keyword">new</span> ListNode(digit);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (init)</span><br><span class="line">                mergeRevCurr = currDigit;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                mergeRevCurr.next = currDigit;</span><br><span class="line">                mergeRevCurr = mergeRevCurr.next;</span><br><span class="line">            &#125;</span><br><span class="line">            head2Rev = head2Rev.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cache == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// System.out.println(Arrays.toString(ListNode.toArray(mergeRev)));</span></span><br><span class="line">            ListNode currDigit = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">            mergeRevCurr.next = currDigit;</span><br><span class="line">            mergeRevCurr = mergeRevCurr.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reverseList(mergeRev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode prev, curr, next;</span><br><span class="line">        prev = <span class="keyword">null</span>;</span><br><span class="line">        curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode l1 = ListNode.fromArray(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">9</span>,</span><br><span class="line">                <span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">0</span> &#125;);</span><br><span class="line">        ListNode l2 = ListNode.fromArray(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>,</span><br><span class="line">                <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">6</span> &#125;);</span><br><span class="line">        <span class="comment">// System.out.println(Arrays.toString(ListNode.toArray(reverseList(l1))));</span></span><br><span class="line">        System.out.println(Arrays.toString(ListNode.toArray(addInList(l2, l1))));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="914-链表中环的入口节点"><a class="markdownIt-Anchor" href="#914-链表中环的入口节点"></a> (9/14) 链表中环的入口节点</h3>
<p>题目描述</p>
<ul>
<li>对于一个给定的链表，返回环的入口节点，如果没有环，返回null</li>
</ul>
<p>解题思路</p>
<ul>
<li>首先用快慢指针判断是否存在环</li>
<li>如存在环，假设环前长度为 d , 环长度为 l , 相遇点在环入口后 s 处</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>+</mo><mi>l</mi><mo>+</mo><mi>s</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>d</mi><mo>+</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d+l+s = 2*(d+s) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>+</mo><mi>s</mi><mo>=</mo><mi>l</mi></mrow><annotation encoding="application/x-tex">d+s = l 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span></span></p>
<ul>
<li>快指针归零，再走 (l-s)</li>
<li>慢指针</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>+</mo><mi>s</mi><mo>+</mo><mo stretchy="false">(</mo><mi>l</mi><mo>−</mo><mi>s</mi><mo stretchy="false">)</mo><mo>=</mo><mi>d</mi><mo>+</mo><mi>l</mi></mrow><annotation encoding="application/x-tex">d+s+(l-s)=d+l 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span></span></p>
<ul>
<li>快指针</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>−</mo><mi>s</mi><mo>=</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">l-s = d
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span></span></p>
<ul>
<li>二者在 d 处相遇</li>
</ul>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NowCoder_DetectCycle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode ptr1 = head;</span><br><span class="line">        ListNode ptr2 = head;</span><br><span class="line">        ListNode meetpoint = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(ptr1 != <span class="keyword">null</span> &amp;&amp; ptr1.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ptr1 = ptr1.next.next;</span><br><span class="line">            ptr2 = ptr2.next;</span><br><span class="line">            <span class="keyword">if</span> (ptr2 == ptr1)&#123;</span><br><span class="line">                meetpoint = ptr1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否有环</span></span><br><span class="line">        <span class="keyword">if</span> (meetpoint == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 快指针从头出发，慢指针接着走</span></span><br><span class="line">        ptr1 = head;</span><br><span class="line">        <span class="keyword">while</span>(ptr1 != ptr2)&#123;</span><br><span class="line">            ptr1 = ptr1.next;</span><br><span class="line">            ptr2 = ptr2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ptr1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ListNode l1 = ListNode.fromArray(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;);</span><br><span class="line">        l1.next.next.next.next.next = l1.next.next;</span><br><span class="line">        ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        System.out.println(detectCycle(l2).val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="914-两个链表的第一个公共节点"><a class="markdownIt-Anchor" href="#914-两个链表的第一个公共节点"></a> (9/14) 两个链表的第一个公共节点</h3>
<p>题目描述</p>
<ul>
<li>输入两个链表，找出它们的第一个公共结点。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）</li>
</ul>
<p>解题思路1——<strong>链表成环</strong></p>
<ul>
<li>两链表应该呈现出 “Y” 形。把第二个链表接到第一个链表尾巴上形成一个环，若存在公共节点，则必形成环。</li>
<li>如果保留 p1, 最后的节点 temp -&gt; p2。用 detectCycle(p1) 找出节点 result。<strong>再将temp -&gt; p2 断开</strong>。返回result。</li>
<li>代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pHead1 == <span class="keyword">null</span> || pHead2 == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    ListNode curr = pHead1;</span><br><span class="line">    <span class="keyword">while</span> (curr.next != <span class="keyword">null</span>) curr = curr.next;</span><br><span class="line">    curr.next = pHead2;</span><br><span class="line">    <span class="comment">// 把两个链表接起来找第一个</span></span><br><span class="line"></span><br><span class="line">    ListNode firstCommon = detectCycle(pHead1);</span><br><span class="line">    <span class="comment">// 断开两个链表</span></span><br><span class="line">    curr.next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> firstCommon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ListNode ptr1 = head;</span><br><span class="line">    ListNode ptr2 = head;</span><br><span class="line">    ListNode meetpoint = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(ptr1 != <span class="keyword">null</span> &amp;&amp; ptr1.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">        ptr1 = ptr1.next.next;</span><br><span class="line">        ptr2 = ptr2.next;</span><br><span class="line">        <span class="keyword">if</span> (ptr2 == ptr1)&#123;</span><br><span class="line">            meetpoint = ptr1;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (meetpoint == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 快指针从头出发，慢指针接着走</span></span><br><span class="line">    ptr1 = head;</span><br><span class="line">    <span class="keyword">while</span>(ptr1 != ptr2)&#123;</span><br><span class="line">        ptr1 = ptr1.next;</span><br><span class="line">        ptr2 = ptr2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ptr1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解题思路2</p>
<ul>
<li>先遍历两链表，分别得出长度</li>
<li>较长者截取掉更长的部分，因为共同部分肯定比较短的链表更短</li>
<li>然后两链表同时向后遍历直到二者相同</li>
<li>代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解法：截取长度并依次比较。复杂度O(m+n)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> </span>&#123;</span><br><span class="line">    ListNode p1 = pHead1;</span><br><span class="line">    ListNode p2 = pHead2;</span><br><span class="line">    <span class="keyword">int</span> len1 = <span class="number">0</span>, len2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (p1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        p1 = p1.next;</span><br><span class="line">        len1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        p2 = p2.next;</span><br><span class="line">        len2++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len1 &gt;= len2)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1 - len2; i++)&#123;</span><br><span class="line">            pHead1 = pHead1.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2 - len1; i++)&#123;</span><br><span class="line">            pHead2 = pHead2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (pHead1 != pHead2)&#123;</span><br><span class="line">        pHead1 = pHead1.next;</span><br><span class="line">        pHead2 = pHead2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pHead1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>分治</title>
    <url>/2020/09/03/%E5%88%86%E6%B2%BB/</url>
    <content><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247485228&amp;idx=1&amp;sn=9f48aee51dcb2b98b56b1827cc658439&amp;chksm=fa0e68adcd79e1bbcd0183ef30a79ede4e46c5835ce05ee6644169c3cc9454073019ccd85d3d&amp;scene=21#wechat_redirect">浅谈分治算法</a></p>
<h2 id="使用场景">使用场景</h2>
<p>可以分解为若干 MECE 的相同子问题，即具有最优子结构</p>
<h2 id="步骤">步骤</h2>
<ol type="1">
<li>分解</li>
<li>求解：直接/递归</li>
<li>合并</li>
</ol>
<h2 id="案例">案例</h2>
<h3 id="二分查找基本">二分查找(基本)</h3>
<ul>
<li>算法流程：
<ul>
<li>选择一个标志位 i 将集合分为两个子集合</li>
<li>判断 <code>arr[i]</code> 和 <code>target</code> 关系，相等则返回</li>
<li>否则判断在左侧还是右侧查找</li>
<li>递归直到找到或退出</li>
</ul></li>
<li>代码： <a href="https://hy2632.github.io/2020/09/02/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/">二分查找</a></li>
</ul>
<h3 id="全排列问题">全排列问题</h3>
<ul>
<li>问题描述：
<ul>
<li>有1，2，3，4个数，问你有多少种排列方法，并输出排列。</li>
</ul></li>
<li>问题分析：
<ul>
<li>确定第一位后，对后续序列进行全排列。直到只有一个数字时停止。</li>
</ul></li>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        fullSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fullSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (start == end)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.prinln();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++)&#123;</span><br><span class="line">            swap(arr, i, start);</span><br><span class="line">            fullSort(arr, start + <span class="number">1</span>, end); <span class="comment">// 把该位放到开头，对剩下的位数全排列</span></span><br><span class="line">            swap(arr, i, start;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="归并排序">归并排序</h3>
<ul>
<li>问题分析：
<ul>
<li>一个序列从中点分为两个有序子序列，然后合并。</li>
</ul></li>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">guibing</span> </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">int</span>[] mergeSort(<span class="keyword">int</span>[] sourceArray)&#123;</span><br><span class="line">        <span class="keyword">if</span> (sourceArray.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> sourceArray;</span><br><span class="line">        <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">        <span class="keyword">int</span> mid = arr.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] left = Arrays.copyOfRange(arr, <span class="number">0</span>, mid);</span><br><span class="line">        <span class="keyword">int</span>[] right = Arrays.copyOfRange(arr, mid, arr.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a1 &amp; a2 are both sorted</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] a1, <span class="keyword">int</span>[] a2)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[a1.length + a2.length];</span><br><span class="line">        <span class="keyword">int</span> sortedIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt; a1.length &amp;&amp; j &lt; a2.length)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a1[i] &lt;= a2[j])&#123;</span><br><span class="line">                result[sortedIndex++] = a1[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[sortedIndex++] = a2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; a1.length)&#123;</span><br><span class="line">            result[sortedIndex++] = a1[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; a2.length)&#123;</span><br><span class="line">            result[sortedIndex++] = a2[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">76</span>,<span class="number">4</span>,<span class="number">32</span>,<span class="number">643</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(mergeSort(arr)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速排序">快速排序</h3>
<ul>
<li>问题分析：
<ul>
<li>partition: 一个序列，选定一个 pivot ，调整 pivot 位置使得它左边的值小于它，右边的值大于它，并确定该 pivot 的位置</li>
<li>对于左右的序列分别进行快速排序</li>
</ul></li>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">kuaipai</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[a];</span><br><span class="line">        arr[a] = arr[b];</span><br><span class="line">        arr[b] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] sourceArray) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line">        <span class="keyword">return</span> quickSortRecursion(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] quickSortRecursion(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = partition(arr, left, right);</span><br><span class="line">            quickSortRecursion(arr, left, mid - <span class="number">1</span>);</span><br><span class="line">            quickSortRecursion(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = left;</span><br><span class="line">        <span class="keyword">int</span> index = pivot + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = index;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt;= arr[pivot]) &#123;</span><br><span class="line">                swap(arr, i, index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr, pivot, index - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> index - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123; <span class="number">3</span>, <span class="number">76</span>, <span class="number">4</span>, <span class="number">32</span>, <span class="number">643</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line">        System.out.println(Arrays.toString(quickSort(arr)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="汉诺塔">汉诺塔</h3>
<ul>
<li>问题分析：
<ul>
<li>原问题：n 个盘子，从 source 到 target ，中途可借助 temp</li>
<li>子问题：上面 n-1 个盘子放到temp，最底下盘子到target，然后 temp 上的 n-1 个盘子借助 source 移到 target 上。 如果 n = 1， 直接移。</li>
</ul></li>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, String source, String temp, String target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">        move (n, source, target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        hanoi (n - <span class="number">1</span>, source, target, temp);</span><br><span class="line">        move (n, source, target);</span><br><span class="line">        hanoi (n - <span class="number">1</span>, temp, source, target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> n, String source, String target)</span></span>&#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;第 %d 号盘子 move: %s ---&gt; %s \n&quot;</span>, n, source, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>09/06 论文笔记</title>
    <url>/2020/09/06/09-06-%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="deep-visual-semantic-alignments-for-generating-image-descriptions"><a href="https://cs.stanford.edu/people/karpathy/cvpr2015.pdf"><strong>Deep Visual-Semantic Alignments for Generating Image Descriptions</strong></a></h2>
<p>摘要</p>
<ul>
<li>图像 CNN，文本 BiRNN，multimodal embedding，alignment model</li>
</ul>
<p>介绍部分</p>
<ul>
<li>先前：给定categories的labeling</li>
<li>目标：生成images的dense description</li>
<li>要求：模型同时推断内容和找出自然语言的表示，并且通过训练获得</li>
<li>数据集的challenge：image captioning的数据集并不包含图片中实体的定位</li>
<li>core insight: 句子作为weak labels，句子和图像的定位都未知 -&gt; 模型需要推断位置的 latent alignment</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/2020/09/08/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h2 id="题目">题目</h2>
<h3 id="买卖股票的最佳时机">(0908)买卖股票的最佳时机</h3>
<p>知识点：数组，动态规划</p>
<p>难度：简单</p>
<p>题目描述：</p>
<ul>
<li>假设你有一个数组，其中第 i 个元素是股票在第 i 天的价格。</li>
<li>你有一次买入和卖出的机会。（只有买入了股票以后才能卖出）。请你设计一个算法来计算可以获得的最大收益。</li>
<li>示例1</li>
<li>输入 [1,4,2]</li>
<li>输出 3</li>
</ul>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> buy = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">int</span> sell = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">        buy = Math.max(buy, -prices[i]);</span><br><span class="line">        sell = Math.max(sell, prices[i] + buy);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="带权值的最小路径和">(0908)带权值的最小路径和</h3>
<p>知识点：数组，动态规划（矩阵）</p>
<p>难度：中等</p>
<p>题目描述：</p>
<ul>
<li>给定一个由非负整数填充的m x n的二维数组，现在要从二维数组的左上角走到右下角，请找出路径上的所有数字之和最小的路径。注意：你每次只能向下或向右移动。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">int</span> rows = grid.length;</span><br><span class="line">    <span class="keyword">int</span> columns = grid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[rows + <span class="number">1</span>][columns + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rows; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= columns; j++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; j != <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = Math.min(dp[i][j + <span class="number">1</span>], dp[i + <span class="number">1</span>][j]) + grid[i][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i + <span class="number">1</span>][j] + grid[i][j];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = dp[i][j + <span class="number">1</span>] + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[rows][columns];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="子数组的最大累加和">(0909)子数组的最大累加和</h3>
<ul>
<li><p>知识点：分治，动态规划</p></li>
<li><p>难度：简单</p></li>
<li><p>题目描述：</p>
<ul>
<li>给定一个数组arr，返回子数组的最大累加和</li>
<li>例如，arr = [1, -2, 3, 5, -2, 6, -1]，所有子数组中，[3, 5, -2, 6]可以累加出最大的和12，所以返回12.</li>
<li>要求时间复杂度为<span class="math inline">\(O(n)\)</span>，空间复杂度为<span class="math inline">\(O(1)\)</span></li>
</ul></li>
<li><p>理解：问题分为：到某一位为止的最优累加和，和整个数列不同位置为终点的累加和中的最大值(max)。</p></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxsumofSubarray</span> <span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span> (arr.length == <span class="number">1</span>) <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> currSum = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> maxSum = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (currSum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            currSum = arr[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currSum += arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        maxSum = currSum &gt; maxSum ? currSum : maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="lis最长递增子序列现解法超时">(0911)LIS最长递增子序列（现解法超时）</h3>
<ul>
<li><p>知识点：<strong>二分</strong>，动态规划</p></li>
<li><p>难度：中等</p></li>
<li><p>题目描述：</p>
<ul>
<li>给定数组arr，设长度为n，输出arr的最长递增子序列。（如果有多个答案，请输出其中字典序最小的）</li>
</ul></li>
<li><p>目前解法：</p>
<ul>
<li><code>arrayCompare</code>: 先比较长度，再比较字典序</li>
<li><code>DP[length]</code>: 逐步更新，长度为length的所有子序列中最优解</li>
<li>从arr第一位到最后一位，每次检查<strong>以当前位为最后一位</strong>的最长递增子序列</li>
<li>检查的方法<code>searchInsert</code>：对之前的所有<code>DP[length] (1&lt;=length&lt;=maxlength)</code>遍历，插入当前位<code>arr[i]</code>并舍去大于当前位的部分。这部分用到<code>二分查找</code>。</li>
</ul></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NowCoder_LIS</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] LIS(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] DP = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length][];</span><br><span class="line">        <span class="comment">// 括号内表示LIS长度</span></span><br><span class="line">        DP[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;&#125;;</span><br><span class="line">        DP[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; arr[<span class="number">0</span>] &#125;;</span><br><span class="line">        <span class="keyword">int</span> maxlength = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] bestarr = DP[maxlength];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            bestarr = searchInsert(DP[maxlength], arr[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = maxlength-<span class="number">1</span>; j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">                bestarr = arrayCompare(bestarr, searchInsert(DP[j], arr[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            DP[bestarr.length] = bestarr;</span><br><span class="line">            <span class="keyword">if</span> (bestarr.length &gt; maxlength) maxlength=bestarr.length;</span><br><span class="line">            System.out.printf(<span class="string">&quot;arr[%d]: %d, DP[%d] : %s \n&quot;</span>, i, arr[i], maxlength, Arrays.toString(DP[maxlength]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DP[maxlength];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] arrayCompare(<span class="keyword">int</span>[] a1, <span class="keyword">int</span>[] a2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a1.length != a2.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> a1.length &gt; a2.length ? a1 : a2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// return (Arrays.compare(a1, a2) == 0) ? a1 : a2;</span></span><br><span class="line">            <span class="keyword">return</span> (Arrays.toString(a1).compareTo(Arrays.toString(a2)) == <span class="number">0</span>) ? a1 : a2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] searchInsert(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length == <span class="number">0</span> || a &lt; arr[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; a &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt;= arr[arr.length - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> arrayAppend(arr, a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> right = arr.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (left + <span class="number">1</span> != right)&#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (arr[mid] &gt; a)&#123;</span><br><span class="line">                    right = mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span>[] result = Arrays.copyOfRange(arr, <span class="number">0</span>, right+<span class="number">1</span>);</span><br><span class="line">            result[result.length - <span class="number">1</span>] = a;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] arrayAppend(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> a) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = Arrays.copyOf(arr, arr.length + <span class="number">1</span>);</span><br><span class="line">        result[result.length - <span class="number">1</span>] = a;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">7</span>,&#125;;</span><br><span class="line">        System.out.println(Arrays.toString(LIS(arr)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最大正方形">(0911)最大正方形</h3>
<ul>
<li><p>初始化，<code>DP = mat</code></p></li>
<li><p>遍历，<code>包含第[i][j]个结点的最大正方形</code></p></li>
<li><p>状态转移方程:</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if mat[i][j] &#x3D;&#x3D; 1&#123;</span><br><span class="line">    dp[i][j] &#x3D; min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NowCoder_BiggestSquare</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[][] mat = &#123; &#123; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span> &#125;, &#123; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span> &#125;, &#123; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span> &#125; &#125;;</span><br><span class="line">        System.out.println(solve(mat));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = matrix[i][j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (dp[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    max = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">                    max = Math.max(dp[i][j], max);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            System.out.println(Arrays.toString(dp[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max * max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java数据结构与算法</category>
      </categories>
      <tags>
        <tag>Dynamic Programming (DP)</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Mining Lec1</title>
    <url>/2020/09/12/Data-Mining-Lec1/</url>
    <content><![CDATA[<h3 id="课程信息-ieore4540">课程信息 IEORE4540</h3>
<p>Lecturer: <a href="https://research.google/people/KrzysztofChoromanski/">Krzysztof Choromanski</a></p>
<ul>
<li>Krzysztof Choromanski works on several aspects of machine learning and robotics. His current research interests include reinforcement learning and randomized methods such as nonlinear embeddings based on structured random feature maps and quasi-Monte-Carlo methods. He was also working on online nonparametric clustering for massive high-dimensional streams. Krzysztof is an author of several nonlinear embedding mechanisms based on structured matrices that can be used to speed up: neural network computations, kernel methods applying random feature maps, convex optimization solvers, quantization and soft clustering methods as well as several LSH-based algorithms. With his background in structural graph theory, he is also interested in applying graph theory and other combinatorial methods in machine learning.</li>
</ul>
<p>Contact: <a href="KMC2178@columbia.edu">KMC2178@columbia.edu</a>|<a href="CHOROMANSKI1@gmail.com">CHOROMANSKI1@gmail.com</a>|<a href="KCHORO@google.com">KCHORO@google.com</a></p>
<h3 id="提要">提要</h3>
<p>第一节课主要涉及几类核方法(Kernel)，random feature map，和MSE</p>
<h3 id="笔记正文">笔记正文</h3>
<div class="pdfobject-container" data-target="./Lec1.pdf" data-height="1000px"></div>
<h3 id="补充-核函数-kernels-与-svm">补充： 核函数 Kernels 与 SVM</h3>
<p><a href="https://www.youtube.com/watch?v=mTyT-oHoivA">cs229 Lecture 12.4 — Support Vector Machines | (Kernels-I) — [ Machine Learning | Andrew Ng]</a></p>
<h4 id="kernels">Kernels</h4>
<p>Kernel is aka similarity function. We set up <code>landmarks</code>: <span class="math inline">\(l_1, l_2, l_3\)</span> and we wanna know the similarity between our input <span class="math inline">\(x\)</span> and these landmarks.</p>
<p>Gaussian kernel <span class="math inline">\(K_{Gauss}\)</span> is</p>
<p><span class="math display">\[f_i = similarity(x, l^{(i)}) = exp(-\frac{||x-l^{(i)}||^2}{2\sigma^2})\]</span></p>
<p><span class="math inline">\(\sigma\)</span> is one hyperparameter which decides the shape of "contour graph" -- aka scaling the similarity</p>
<p>Then we are gonna use similarities <span class="math inline">\(f_i\)</span> to classify <span class="math inline">\(y\)</span>.</p>
<p>Predict <span class="math inline">\(y=1\)</span> if</p>
<p><span class="math display">\[\theta_0 + \theta_1f_1 + \theta_2f_2 + \theta_3f_3 \geq 0\]</span></p>
<p>Here, <span class="math inline">\(\theta\)</span> s are weights. If we wanna know whether <span class="math inline">\(x\)</span> is close to landmarks <span class="math inline">\(l_1\)</span> and <span class="math inline">\(l_2\)</span>, we could set <span class="math inline">\(\theta_1 = 1, \theta_2 = 1, \theta_3 = 0\)</span>.</p>
<h4 id="svm-with-kernels">SVM with Kernels</h4>
<p>Given <span class="math inline">\((x^{(1)}, y^{(1)}), (x^{(2)}, y^{(2)}), ..., (x^{(m)}, y^{(m)})\)</span></p>
<p>we choose <code>landmarks</code> <span class="math inline">\(l^{(i)} = x^{(i)}\)</span></p>
<p><span class="math display">\[f_1 = similarity(x, l^{(1)})\]</span> <span class="math display">\[f_2 = similarity(x, l^{(2)})\]</span> <span class="math display">\[......\]</span> <span class="math display">\[f_m = similarity(x, l^{(m)})\]</span></p>
<p>Define <span class="math inline">\(f\)</span></p>
<p><span class="math display">\[f = \begin{bmatrix}f_0\\f_1\\f_2\\...\\f_m\end{bmatrix}\]</span> where <span class="math inline">\(f_0 = 1\)</span></p>
<p>for training example <span class="math display">\[f^{(i)} = \begin{bmatrix}f_0^{(i)}\\f_1^{(i)}\\f_2^{(i)}\\...\\f_m^{(i)}\end{bmatrix}\]</span></p>
<p><span class="math inline">\(f \in \large{R}^{m+1}\)</span>, predict <span class="math inline">\(y=1\)</span> if <span class="math inline">\(\theta^{T}f \geq 0\)</span></p>
<p><span class="math inline">\(\theta \in \large{R}^{m+1}\)</span></p>
<p>When training, the objective function changes w.r.t <span class="math inline">\(f\)</span></p>
<p><span class="math display">\[\min_{\theta} C\sum_{i=1}^{m}{y^{(i)}cost_1{(\theta^Tf^{(i)})} +  (1-y^{(i)})cost_0{(\theta^Tf^{(i)})}} + \frac{1}{2} \sum_{j=1}^{m}{\theta_j^2}\]</span></p>
<h3 id="wiki-kernel-method">Wiki: <a href="https://en.wikipedia.org/wiki/Kernel_method">Kernel Method</a></h3>
<p>使用内核函数，在高维隐式特征空间中操作，而无需计算该空间中数据的坐标，而是在特征空间中计算内积。</p>
<p>基于实例： 内核方法基于实例学习，并非训练一些固定数量的参数, 而是记住 <span class="math inline">\(i\)</span>-th training example <span class="math inline">\((\mathbf {x}_{i},\mathbf {y}_{i})\)</span> 并学习到对应的权重 <span class="math inline">\(w_{i}\)</span>.</p>
<p><span class="math display">\[\therefore w:\mathbf R^m, x:\mathbf R^m\]</span></p>
<h3 id="总结一下遇到的各种核函数"><a href="https://blog.csdn.net/wsj998689aa/article/details/47027365">总结一下遇到的各种核函数</a></h3>
<p>PCA在原始空间中的数学模型 <span class="math display">\[XX^Tw_i=\lambda_iw_i\]</span> 在高维空间中 <span class="math display">\[\Phi(X)\Phi(X)^Tw_i^{\Phi} = \lambda_iw_i^{\Phi}\]</span> 基向量 <span class="math inline">\(w_i^{\Phi}\)</span> 用训练样本线性表示(上文提到 <span class="math inline">\(w\)</span> 和 <span class="math inline">\(x\)</span> 关系,都在 <span class="math inline">\(N\times d\)</span> 维空间) <span class="math display">\[w_i^{\Phi} = \sum_{k=1}^{N}{\alpha_k\Phi(x_k)} = \Phi(X)\alpha_i \]</span> 代入 <span class="math display">\[\Phi(X)\Phi(X)^T\Phi(X)\alpha_i = \lambda_i\Phi(X)\alpha_i\]</span> <span class="math display">\[\Phi(X)^T\Phi(X)\Phi(X)^T\Phi(X)\alpha_i = \lambda_i\Phi(X)^T\Phi(X)\alpha_i\]</span> 某种<strong>核函数</strong>满足 <span class="math display">\[ k(x_i, x_j) = \Phi(x_i)^T\Phi(x_j) \]</span> 矩阵化表示 <span class="math display">\[ K(X,Y) = \Phi(X)^T\Phi(X) \]</span> 则 <span class="math display">\[ K^2\alpha_i = \lambda_iK\alpha_i \]</span> 可以看见高维映射被抹掉了。</p>
<p>那么核函数具有什么样的性质？</p>
<h3 id="mercers-theorem"><a href="https://en.wikipedia.org/wiki/Mercer%27s_theorem">Mercer's theorem</a></h3>
<p>Mercer's theorem: 任何半正定的函数都可以作为核函数。(充分不必要)</p>
<p><span class="math display">\[X = (x_1,x_2,...x_n)\]</span></p>
<p>我们定义矩阵的元素 <span class="math display">\[a_{ij} = f(x_i,x_j)\]</span></p>
<p>如果这个 <span class="math inline">\(n*n\)</span> 的矩阵是半正定的，那么 <span class="math inline">\(f(x_i,x_j)\)</span> 就称为半正定的函数。</p>
<h3 id="常见核函数">常见核函数</h3>
<h4 id="linear-kernel">Linear Kernel</h4>
<p><span class="math display">\[ k(x,y) = x^Ty \]</span></p>
<h4 id="gaussian-kernel">Gaussian Kernel</h4>
<p><span class="math display">\[ k_{Gauss}(x,y) = \exp(-\frac{||x-y||^2}{2\sigma^2}) \]</span></p>
<h4 id="exponential-kernel">Exponential Kernel</h4>
<p>将高斯核的 L2 距离调整为 L1 距离</p>
<p><span class="math display">\[ k(x,y) = \exp(-\frac{||x-y||}{2\sigma^2}) \]</span></p>
<h4 id="laplacian-kernel">Laplacian Kernel</h4>
<p>等价于指数核</p>
<p><span class="math display">\[ k(x,y) = \exp(-\frac{||x-y||}{\sigma}) \]</span></p>
<h4 id="softmax-kernel">Softmax Kernel</h4>
<p><span class="math display">\[ K_{SM}(x,y) = e^{x^Ty} \]</span> <span class="math display">\[ = e^{\frac{||x||^2}{2}}  e^{\frac{||y||^2}{2}}  K_{Gauss}(x,y) \]</span></p>
<h4 id="angular-kernel">Angular Kernel</h4>
<p><span class="math display">\[ K_{Ang}(x,y) = 1 - \frac{2\theta_{x,y}}{\pi} \]</span></p>
<h3 id="feature-map-phi-的结构">feature map <span class="math inline">\(\Phi\)</span> 的结构</h3>
<p><span class="math display">\[ \Phi(x) = \frac{1}{\sqrt{m}} \begin{bmatrix}f_1(w_1^Tx),...,f_1(w_m^Tx)\\...\\f_l(w_1^Tx),...,f_l(w_m^Tx)\end{bmatrix}^T \]</span></p>
]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark Tutorial -- Wordcount in Spark</title>
    <url>/2020/09/15/Spark-Tutorial-Wordcount-in-Spark/</url>
    <content><![CDATA[<h2 id="cs246---colab-1-wordcount-in-spark">CS246 - Colab 1 Wordcount in Spark</h2>
<div class="pdfobject-container" data-target="./CS246Colab1.pdf" data-height="1000px"></div>
]]></content>
  </entry>
  <entry>
    <title>递归</title>
    <url>/2020/09/18/%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h3 id="集合的所有子集">(0918) 集合的所有子集</h3>
<p>题目描述</p>
<p>现在有一个没有重复元素的整数集合S，求S的所有子集</p>
<p>注意： - 你给出的子集中的元素必须按升序排列 - 给出的解集中不能出现重复的元素 - 例如：如果S=[1,2,3], 给出的解集应为： [ [3], [1], [2], [1,2,3], [1,3], [2,3], [1,2], []]</p>
<p>解法： - 递归，集合每增加一个新元素，先前所有非空子集 + 这些非空子集加入新元素生成的新子集 + 该元素本身形成的集合 - 边界条件：空集合需要包含一个空子集 - 注意：递归时非空子集的运算屏蔽空子集 (continue) ，但每次返回时增加一个空子集。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NowCoder_subsets</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 集合的所有子集 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] S) &#123;</span><br><span class="line">        <span class="comment">// 包含空子集</span></span><br><span class="line">        <span class="keyword">if</span> (S.length == <span class="number">0</span>) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; empty = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            result.add(empty);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] S_m1 = Arrays.copyOfRange(S, <span class="number">0</span>, S.length - <span class="number">1</span>);</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result_m1 = subsets(S_m1);</span><br><span class="line">        <span class="keyword">for</span> (ArrayList&lt;Integer&gt; subset_m1 : result_m1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (subset_m1.size() == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// 空子集暂时不管</span></span><br><span class="line">            result.add(subset_m1); <span class="comment">// 之前的也要加上</span></span><br><span class="line">            ArrayList&lt;Integer&gt; subset = (ArrayList&lt;Integer&gt;) subset_m1.clone();</span><br><span class="line">            subset.add(S[S.length - <span class="number">1</span>]);</span><br><span class="line">            Collections.sort(subset);</span><br><span class="line">            result.add(subset);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 加最后一位的一元子集</span></span><br><span class="line">        ArrayList&lt;Integer&gt; lastDigit = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lastDigit.add(S[S.length - <span class="number">1</span>]);</span><br><span class="line">        result.add(lastDigit);</span><br><span class="line">        <span class="comment">// 加空集</span></span><br><span class="line">        ArrayList&lt;Integer&gt; empty = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        result.add(empty);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] S = &#123; <span class="number">1</span> &#125;;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; subset = subsets(S);</span><br><span class="line">        <span class="keyword">for</span> (ArrayList&lt;Integer&gt; i : subset)</span><br><span class="line">            System.out.println(Arrays.toString(i.toArray()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二叉树层序遍历">(0919) 二叉树层序遍历</h3>
<p>题目描述 给定一个二叉树，返回该二叉树层序遍历的结果，（从左到右，一层一层地遍历）例如：给定的二叉树是{3,9,20,#,#,15,7},该二叉树层序遍历的结果是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">[3],</span><br><span class="line">[9,20],</span><br><span class="line">[15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NowCoder_LevelOrder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root TreeNode类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型ArrayList&lt;ArrayList&lt;&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ArrayList&lt;Integer&gt; width = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            width.add(root.val);</span><br><span class="line">            result.add(width);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> depth = treeDepth(root);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; depth; i++) &#123;</span><br><span class="line">            result.add(ithlevel(root, i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定二叉树深度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">treeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(treeDepth(root.left), treeDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归确定二叉树每层width的所有结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">ithlevel</span><span class="params">(TreeNode root, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; width = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> width;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            width.add(root.val);</span><br><span class="line">            <span class="keyword">return</span> width;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; leftwidth = ithlevel(root.left, i - <span class="number">1</span>);</span><br><span class="line">            ArrayList&lt;Integer&gt; rightwidth = ithlevel(root.right, i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> val : rightwidth) &#123;</span><br><span class="line">                leftwidth.add(val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> leftwidth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>Data-Mining-Lec2</title>
    <url>/2020/09/16/Data-Mining-Lec2/</url>
    <content><![CDATA[<h2 id="0920lemmas"><a class="markdownIt-Anchor" href="#0920lemmas"></a> (09/20)Lemmas</h2>
<h3 id="eulers-formula-欧拉公式"><a class="markdownIt-Anchor" href="#eulers-formula-欧拉公式"></a> Euler’s formula 欧拉公式</h3>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>e</mi><mrow><mi>i</mi><mi>x</mi></mrow></msup><mo>=</mo><mi>cos</mi><mo>⁡</mo><mi>x</mi><mo>+</mo><mi>i</mi><mi>sin</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">e^{ix} = \cos{x} + i\sin{x} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8746639999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8746639999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span></span></p>
<h3 id="fourier-transform-傅里叶变换"><a class="markdownIt-Anchor" href="#fourier-transform-傅里叶变换"></a> Fourier transform 傅里叶变换</h3>
<p><a href="https://www.zhihu.com/question/19714540/answer/1119070975">如何理解傅里叶变换公式？ - 苗华栋的回答 - 知乎</a></p>
<h4 id="三角函数正交性"><a class="markdownIt-Anchor" href="#三角函数正交性"></a> 三角函数正交性</h4>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mo>−</mo><mi>π</mi></mrow><mi>π</mi></munderover><mrow><mi>sin</mi><mo>⁡</mo><mrow><mi>m</mi><mi>x</mi></mrow><mi>sin</mi><mo>⁡</mo><mrow><mi>n</mi><mi>x</mi></mrow><mi>d</mi><mi>x</mi></mrow><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo><mi>m</mi><mi mathvariant="normal">≠</mi><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>π</mi><mo separator="true">,</mo><mi>m</mi><mo>=</mo><mi>n</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\sum_{-\pi}^{\pi}{\sin{mx}\sin{nx} dx} = \begin{cases} 0, m\neq n \\ \pi, m = n \end{cases} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.959733em;vertical-align:-1.308336em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8999949999999999em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">π</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.308336em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>证明： 积化和差，周期内积分。</p>
<h4 id="正余弦函数组成正交基时域-to-频域"><a class="markdownIt-Anchor" href="#正余弦函数组成正交基时域-to-频域"></a> 正余弦函数组成正交基，时域 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> 频域</h4>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mn>2</mn><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mn>2</mn><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">1, cos(x), sin(x), cos(2x), sin(2x), ... cos(nx), sin(nx) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></span></p>
<h4 id="公式实值函数时"><a class="markdownIt-Anchor" href="#公式实值函数时"></a> 公式(实值函数时)</h4>
<p>频率表示为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>π</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">2 \pi f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>N</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><msub><mi>a</mi><mn>0</mn></msub><mn>2</mn></mfrac><mo>+</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></munderover><mrow><mo stretchy="false">[</mo><msub><mi>a</mi><mi>n</mi></msub><mi>cos</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>f</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><mo>+</mo><msub><mi>b</mi><mi>n</mi></msub><mi>sin</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>f</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><mo stretchy="false">]</mo></mrow></mrow><annotation encoding="application/x-tex">s_{N}(x) = \frac{a_0}{2} + \sum_{n = 1}^{\infty}{[a_n\cos{(2 \pi fnx)} + b_n\sin{(2 \pi fnx)}]} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935599999999998em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.9185100000000004em;vertical-align:-1.267113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.882887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.267113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span><span class="mclose">]</span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><msub><mi>A</mi><mi>n</mi></msub><mi>sin</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><msub><mi>ϕ</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><mo separator="true">,</mo><msub><mi>b</mi><mi>n</mi></msub><mo>=</mo><msub><mi>A</mi><mi>n</mi></msub><mi>cos</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><msub><mi>ϕ</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">a_{n} = A_{n}\sin{(\phi_{n})}, b_{n} = A_{n}\cos{(\phi_{n})}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msub><mi>a</mi><mn>0</mn></msub><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{a_0}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.056492em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7114919999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 对应直流份量，任何连续周期信号都可以由一组适当的正弦曲线组合而成。（非周期信号的周期认为是无穷大）</p>
<p>一般地，可以用正交性求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">a_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">b_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mn>2</mn><mi>f</mi><msubsup><mo>∫</mo><msub><mi>x</mi><mn>0</mn></msub><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><mfrac><mn>1</mn><mi>f</mi></mfrac></mrow></msubsup><mrow><mi>s</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>cos</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>f</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><mi>d</mi><mi>x</mi></mrow></mrow><annotation encoding="application/x-tex">a_{n} = 2f \int_{x_0}^{x_0 + \frac{1}{f}}{s(x)\cdot \cos{(2\pi fnx)}dx} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.71597em;vertical-align:-1.01205em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.70392em;"><span style="top:-2.08805em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.112900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.01205em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>n</mi></msub><mo>=</mo><mn>2</mn><mi>f</mi><msubsup><mo>∫</mo><msub><mi>x</mi><mn>0</mn></msub><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>+</mo><mfrac><mn>1</mn><mi>f</mi></mfrac></mrow></msubsup><mrow><mi>s</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>sin</mi><mo>⁡</mo><mrow><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mi>f</mi><mi>n</mi><mi>x</mi><mo stretchy="false">)</mo></mrow><mi>d</mi><mi>x</mi></mrow></mrow><annotation encoding="application/x-tex">b_{n} = 2f \int_{x_0}^{x_0 + \frac{1}{f}}{s(x)\cdot \sin{(2\pi fnx)}dx} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.71597em;vertical-align:-1.01205em;"></span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.70392em;"><span style="top:-2.08805em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-4.112900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.01205em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span></span></span></p>
<h1 id="shift-invariant-kernels"><a class="markdownIt-Anchor" href="#shift-invariant-kernels"></a> Shift-invariant Kernels</h1>
<h2 id="random-fourier-featuresrff"><a class="markdownIt-Anchor" href="#random-fourier-featuresrff"></a> Random Fourier Features(RFF)</h2>
<p><a href="https://people.eecs.berkeley.edu/~brecht/papers/07.rah.rec.nips.pdf">Random Features for Large-Scale Kernel Machines</a></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mo>&lt;</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mo>=</mo><mi>z</mi><mo stretchy="false">(</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mo mathvariant="normal">′</mo></msup><mi>z</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k(x,y) = &lt;\phi(x), \phi(y)&gt; = z(x)&#x27;z(y) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p>
<p>Gaussian:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">Δ</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></mrow></msup></mrow><annotation encoding="application/x-tex">e^{-\frac{||\Delta||^2}{2}} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2886700000000002em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mtight">Δ</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>Shift-invariant: x + z, y + z, delta remains, Radial basis function (<strong>RBF</strong>) kernel</p>
<p>The only thing that matters is the length of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span></span></span></span></p>
<p>Random Feature Map function of Gaussian:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Φ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><msqrt><mi>m</mi></msqrt></mfrac><mo stretchy="false">(</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Phi(x) = \frac{1}{\sqrt{m}} (\sin(w_1^Tx),...\sin(w_m^Tx), \cos(w_1^Tx),...\cos(w_m^Tx)) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Φ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.9300000000000002em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">m</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9300000000000002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<h3 id="bochners-theorem"><a class="markdownIt-Anchor" href="#bochners-theorem"></a> <strong>Bochner’s Theorem</strong></h3>
<p>A continuous kernel <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mi mathvariant="normal">−</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k(x, y) = f(x − y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> on <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span> is positive definite if and only if <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo stretchy="false">(</mo><mi>δ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">k(δ)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="mclose">)</span></span></span></span> is the Fourier transform of a non-negative measure. Here ignore the imaginery part <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>sin</mi><mo>⁡</mo></mrow><annotation encoding="application/x-tex">\sin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mop">sin</span></span></span></span>.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup><mo>×</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">K: \mathbb{R}^d \times \mathbb{R}^d \to R 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9824379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup></msub><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>w</mi><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msup><mi>w</mi><mi>T</mi></msup><mi>z</mi><mo stretchy="false">)</mo><mi>d</mi><mi>w</mi></mrow><mo>=</mo><msub><mi>E</mi><mrow><mi>w</mi><mo>∼</mo><mi mathvariant="normal">Ω</mi></mrow></msub><mo stretchy="false">[</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msup><mi>w</mi><mi>T</mi></msup><mi>z</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">K(x,y) = f(x-y) = f(z) = \int_{\mathbb{R}^d}{p(w)cos(w^Tz)dw}=E_{w \sim \Omega}[cos(w^Tz)]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.27195em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.36453em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathbb mtight">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7820285714285713em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mrel mtight">∼</span><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></p>
<p>where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span> is the probability distribution corresponding to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span></p>
<p>Example, if <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> is Gaussian then <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>=</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>I</mi><mi>d</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omega = N(0, I_d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>Since we have the form of expectation, we run <strong>simulations</strong> or say <strong>[Monte Carlo]</strong> to estimate shift-invariant kernels.</p>
<ul>
<li>choose your number of random samples</li>
<li>Sample <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>w</mi><mi>m</mi></msub><mo>∼</mo><mrow><mi>i</mi><mi>i</mi><mi>d</mi></mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">w_1, ..., w_m \sim{iid} \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span><span class="mord">Ω</span></span></span></span></li>
<li>Estimate: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">K(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>K</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{K}(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>K</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{K}(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>: the mean of the sum, unbiased estimation of the original kernel.</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>K</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>i</mi><mi>T</mi></msubsup><mi>z</mi><mo stretchy="false">)</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\hat{K}(x,y) = \frac{1}{m} \sum_{i=1}^{m}{cos(w_i^Tz)} = \frac{1}{m} \sum_{i=1}^m{X_i} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">X_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is iid and bounded, strong concentration results.</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>K</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mi>ϕ</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{K}(x,y) = \phi(x)^T\phi(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ? How we can disentangle <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> from <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span>? cosine identities.</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>K</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>i</mi><mi>T</mi></msubsup><mi>x</mi><mo>−</mo><msubsup><mi>w</mi><mi>i</mi><mi>T</mi></msubsup><mi>y</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">\hat{K}(x,y) = \frac{1}{m} \sum_{i=1}^{m}{cos(w_i^Tx - w_i^Ty)} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mrow><mo stretchy="false">[</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>i</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>i</mi><mi>T</mi></msubsup><mi>y</mi><mo stretchy="false">)</mo><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>i</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>i</mi><mi>T</mi></msubsup><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow></mrow><annotation encoding="application/x-tex">= \frac{1}{m} \sum_{i=1}^{m}{[cos(w_i^Tx)cos(w_i^Ty) + sin(w_i^Tx)sin(w_i^Ty)]} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></span></p>
<ul>
<li>
<p>Disentangled!</p>
</li>
<li>
<p>Define</p>
</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><msqrt><mi>m</mi></msqrt></mfrac><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\phi(x) = \frac{1}{\sqrt{m}} \begin{bmatrix}\cos(w_1^Tx)\\...\\\cos(w_m^Tx)\\\sin(w_1^Tx)\\...\\\sin(w_m^Tx) \end{bmatrix} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:7.208652000000001em;vertical-align:-3.3526620000000005em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">m</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9300000000000002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8559900000000003em;"><span style="top:-0.44997000000000076em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.6049700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.2059700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.8069700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.4079700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.008970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.609970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.85599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500499999999995em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8526620000000005em;"><span style="top:-6.011331000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-4.811331em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-2.408669em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-1.2086690000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-0.007337999999999567em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3526620000000005em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8559900000000003em;"><span style="top:-0.44997000000000076em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.6049700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.2059700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.8069700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.4079700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.008970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.609970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.85599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500499999999995em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>K</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mi>ϕ</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\hat{K}(x,y) = \phi(x)^T\phi(y) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p>
<ul>
<li>Now <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span> can be distributions other than Gaussian: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo>∼</mo><mi>i</mi><mi>i</mi><mi>d</mi><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">w_i \sim iid \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord">Ω</span></span></span></span></li>
</ul>
<h3 id="attention-model-softmax-kernel-and-random-feature-map"><a class="markdownIt-Anchor" href="#attention-model-softmax-kernel-and-random-feature-map"></a> Attention Model - Softmax kernel and random feature map</h3>
<p>Sequence. We wanna find out similarity between embeddings(tokens) and how they attend to each other. We use kernels to calculate this attention.</p>
<p>Construct a huge matrix (len*len).</p>
<p>One most popular similarity model is <strong>softmax attention</strong></p>
<p>Softmax kernel:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mrow><mi>S</mi><mi>M</mi></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mrow><msup><mi>x</mi><mi>T</mi></msup><mi>y</mi></mrow></msup></mrow><annotation encoding="application/x-tex">K_{SM}(x,y) = e^{x^Ty}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.056365em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.056365em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>Relationship between gaussian kernel and softmax kernel? Just by expanding</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mrow><mi>G</mi><mi>a</mi><mi>u</mi><mi>s</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>K</mi><mrow><mi>S</mi><mi>M</mi></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></mrow></msup><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></mrow></msup></mrow><annotation encoding="application/x-tex">K_{Gauss}(x,y) = K_{SM}(x,y) e^{-\frac{||x||^2}{2}} e^{-\frac{||y||^2}{2}} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5386700000000002em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><a href="https://arxiv.org/pdf/2006.03555.pdf">Masked Language Modeling for Proteins via LinearlyScalable Long-Context Transformers</a> This one covers the relationship between two kernels.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>M</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></msup><msub><mi>K</mi><mrow><mi>G</mi><mi>a</mi><mi>u</mi><mi>s</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></msup></mrow><annotation encoding="application/x-tex">SM(x,y) = e^{\frac{||x||^2}{2}}K_{Gauss}(x,y)e^{\frac{||y||^2}{2}} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5386700000000002em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>From above, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mover accent="true"><mi>K</mi><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">K(x,y) = E[\hat{K}(x,y)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span>,</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mrow><mi>G</mi><mi>a</mi><mi>u</mi><mi>s</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mi>ϕ</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">K_{Gauss}(x,y) = E[\phi(x)^T\phi(y)] 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>M</mi></mrow><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></msup><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mi>ϕ</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><msup><mi>e</mi><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></msup></mrow><annotation encoding="application/x-tex">\hat{SM}(x,y) = e^{\frac{||x||^2}{2}}\phi(x)^T\phi(y)e^{\frac{||y||^2}{2}} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5386700000000002em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>e</mi><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></msup><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mo stretchy="false">(</mo><msup><mi>e</mi><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></msup><mi>ϕ</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">= (e^{\frac{||x||^2}{2}}\phi(x))^T(e^{\frac{||y||^2}{2}}\phi(y)) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5386700000000002em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>ϕ</mi><mrow><mi>S</mi><mi>M</mi></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></msup><msub><mi>ϕ</mi><mrow><mi>G</mi><mi>a</mi><mi>u</mi><mi>s</mi><mi>s</mi></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></msup><mfrac><mn>1</mn><msqrt><mi>m</mi></msqrt></mfrac><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\phi_{SM}(x) = e^{\frac{||x||^2}{2}}\phi_{Gauss}(x) = e^{\frac{||x||^2}{2}} \frac{1}{\sqrt{m}} \begin{bmatrix}\cos(w_1^Tx)\\...\\\cos(w_m^Tx)\\\sin(w_1^Tx)\\...\\\sin(w_m^Tx) \end{bmatrix} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5386700000000002em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">u</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:7.208652000000001em;vertical-align:-3.3526620000000005em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">m</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9300000000000002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8559900000000003em;"><span style="top:-0.44997000000000076em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.6049700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.2059700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.8069700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.4079700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.008970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.609970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.85599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500499999999995em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8526620000000005em;"><span style="top:-6.011331000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-4.811331em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-2.408669em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-1.2086690000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-0.007337999999999567em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3526620000000005em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8559900000000003em;"><span style="top:-0.44997000000000076em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.6049700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.2059700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.8069700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.4079700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.008970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.609970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.85599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500499999999995em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>M</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mover accent="true"><mrow><mi>S</mi><mi>M</mi></mrow><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><msub><mi>ϕ</mi><mrow><mi>S</mi><mi>M</mi></mrow></msub><mo stretchy="false">(</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><msub><mi>ϕ</mi><mrow><mi>S</mi><mi>M</mi></mrow></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">SM(x,y) = E[\hat{SM}(x,y)] = E[\phi_{SM}(x)^T\phi_{SM}(y)] 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></p>
<h1 id="orthogonal-random-featuresorf"><a class="markdownIt-Anchor" href="#orthogonal-random-featuresorf"></a> Orthogonal random features(ORF)</h1>
<p><a href="https://papers.nips.cc/paper/6246-orthogonal-random-features.pdf">https://papers.nips.cc/paper/6246-orthogonal-random-features.pdf)</a></p>
<h2 id="standard-setting-for-constructing-random-features-via-gaussian-projections"><a class="markdownIt-Anchor" href="#standard-setting-for-constructing-random-features-via-gaussian-projections"></a> Standard setting for constructing random features via Gaussian projections</h2>
<p><strong>IID</strong>: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>w</mi><mi>m</mi></msub><mo>∼</mo><mrow><mi>i</mi><mi>i</mi><mi>d</mi></mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">w_1, ..., w_m \sim{iid} \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span></span><span class="mord">Ω</span></span></span></span>. Sampling independently from canonical multivariate gaussian distribution.</p>
<h2 id="constructing-orthogonal-random-features"><a class="markdownIt-Anchor" href="#constructing-orthogonal-random-features"></a> Constructing orthogonal random features</h2>
<h3 id="definition"><a class="markdownIt-Anchor" href="#definition"></a> Definition</h3>
<p><strong>ORT</strong>: for variance reduction, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>w</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">w_1, ..., w_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> sampled in a way that,</p>
<ul>
<li>
<p>marginal distributions are still the same as for IID, i.e. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><mo>∼</mo><mrow><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>I</mi><mi>d</mi></msub><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">w_1 \sim{N(0,I_d)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
</li>
<li>
<p>different samples <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> are conditioned to <strong>be exactly and definitely orthogonal</strong>, i.e. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>w</mi><mi>i</mi><mi>T</mi></msubsup><msub><mi>w</mi><mi>j</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">w_i^Tw_j = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1274389999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi mathvariant="normal">≠</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">i\neq j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span></p>
</li>
</ul>
<p>They are not independent(if i.i.d, although <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">E=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mi>a</mi><mi>r</mi><mi mathvariant="normal">≠</mi><mn>0</mn></mrow><annotation encoding="application/x-tex">Var\neq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>). Rows have to be <strong>deterministic</strong> in the Linear Space.</p>
<h3 id="how-we-obtain-this-orthogonality"><a class="markdownIt-Anchor" href="#how-we-obtain-this-orthogonality"></a> How we obtain this orthogonality?</h3>
<ol>
<li>Create Gaussian matrix <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">G\in \mathbb{R}^{m\times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span> with entries (a.k.a <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) taken independently at random from scalar Gaussian distribution N(0,1).</li>
<li><strong>Gram-Schmidt</strong> orthogonalize <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span>. After this rows of G are exactly orthogonal and of unit L2-norm.</li>
<li>Renormalize each row of the resulting matrix by multiplying via random variable token from <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>χ</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi(d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">χ</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span> distribution. The renormalization for each row can be same or different.</li>
<li><strong>Note</strong>: the procedures are feasible only when <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≤</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">m \leq d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span></li>
</ol>
<h4 id="gram-schmidt-orthogonalization-施密特正交化"><a class="markdownIt-Anchor" href="#gram-schmidt-orthogonalization-施密特正交化"></a> <strong>Gram-schmidt orthogonalization 施密特正交化</strong></h4>
<p>Gram–Schmidt process is a method for orthonormalizing a set of vectors in an inner product space, most commonly the Euclidean space Rn equipped with the standard inner product. The Gram–Schmidt process takes a finite, linearly independent set S = {v1, …, vk} for <strong>k ≤ n</strong> and generates an orthogonal set S′ = {u1, …, uk} that spans the same k-dimensional subspace of Rn as S.</p>
<p>Whenever move to the next row, subtract the projection from previous rows.</p>
<h2 id="complexity-analysis"><a class="markdownIt-Anchor" href="#complexity-analysis"></a> Complexity analysis</h2>
<p>D: random features, d: dimensionality</p>
<p>ORF is as expensive as RFF.</p>
<ul>
<li>ORF:
<ul>
<li>generating <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>×</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">d\times d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> orthogonal matrix, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>d</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> time and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>d</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> space</li>
<li>computing the transformation, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>d</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> time and space</li>
</ul>
</li>
</ul>
<h2 id="structured-orf-sorf-to-be-continued"><a class="markdownIt-Anchor" href="#structured-orf-sorf-to-be-continued"></a> Structured ORF (SORF) …to be continued</h2>
]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>0922</title>
    <url>/2020/09/22/0922/</url>
    <content><![CDATA[<p>看到一篇讲SVM不错的文章 <a href="https://zhuanlan.zhihu.com/p/49331510">看了这篇文章你还不懂SVM你就来打我</a></p>
<p>google SVM 的 scaling，又看到了该作者的个人站点 <a href="https://tangshusen.me/">TangShusen</a>，同样是基于Hexo的next主题，感觉很值得借鉴。</p>
<p>看了下<a href="https://github.com/ShusenTang">GitHub</a>还有不少宝藏内容。关注了。</p>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
  </entry>
  <entry>
    <title>Data-Mining-Lec3</title>
    <url>/2020/09/23/Data-Mining-Lec3/</url>
    <content><![CDATA[<h2 id="general-scheme"><a class="markdownIt-Anchor" href="#general-scheme"></a> General scheme</h2>
<p>Approximating the kernel <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup><mo>×</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup><mo>→</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">K(x,y) : \mathbb{R}^d \times \mathbb{R}^d \to \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup><mo>→</mo><msup><mi mathvariant="double-struck">R</mi><mi>m</mi></msup></mrow><annotation encoding="application/x-tex">\phi: \mathbb{R}^d \to \mathbb{R}^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ϕ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span></span></span></span></span></span></span> randomized</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mi>ϕ</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">K(x,y) = E[\phi(x)^T\phi(y)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><msqrt><mi>m</mi></msqrt></mfrac><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>f</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>f</mi><mi>l</mi></msub><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>f</mi><mi>l</mi></msub><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\phi(x) = \frac{h(x)}{\sqrt{m}}\begin{bmatrix}f_1(w_1^Tx), ..., f_1(w_m^Tx)\\f_2(w_1^Tx), ..., f_2(w_m^Tx)\\...\\f_l(w_1^Tx), ..., f_l(w_m^Tx)\end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.8040065em;vertical-align:-2.1519965em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">m</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9300000000000002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6519965em;"><span style="top:-4.810665500000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-3.6093344999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-2.4093344999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.2080035em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1519965em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6520099999999998em;"><span style="top:-1.6499900000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.80499em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.40599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.65201em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15003em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>for some <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>:</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup><mo>→</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">h: \mathbb{R}^d \to \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span></p>
<p>Example:</p>
<ol>
<li>Dot-product kernel, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">l = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">f_1(x)=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h(x)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>=</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>I</mi><mi>d</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omega = N(0, I_d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
<li>Gaussian kernel, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">l=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_1(x)=\cos(x), f_2(x)=\sin(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>=</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>I</mi><mi>d</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omega = N(0, I_d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
<li>Softmax kernel, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">l=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_1(x)=\cos(x), f_2(x)=\sin(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>=</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>I</mi><mi>d</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Omega = N(0, I_d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, renormalizer <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></msup></mrow><annotation encoding="application/x-tex">h(x) = e^{\frac{||x||^2}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2386700000000002em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2386700000000002em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></li>
<li>Angular kernel, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>g</mi><mi>n</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">Ω</mi><mo>=</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>I</mi><mi>d</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">l=1, f_1(x)=sgn(x), h(x)=1, \Omega = N(0,I_d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">Ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
</ol>
<h2 id="orthogonal-random-features"><a class="markdownIt-Anchor" href="#orthogonal-random-features"></a> Orthogonal Random Features</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>w</mi><mi>m</mi></msub><mo>∼</mo><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">w_1, ..., w_m \sim \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span>, construct pdf function on a fixed isotopic sphere</p>
<p>ORFs:</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo><msub><mi>w</mi><mi>i</mi></msub><mo>∼</mo><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\to w_i \sim \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>→</mo><msubsup><mi>w</mi><mi>i</mi><mi>T</mi></msubsup><msub><mi>w</mi><mi>j</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\to w_i^Tw_j = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1274389999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.441336em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.258664em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> with prob 1 for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi mathvariant="normal">≠</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">i \neq j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span></p>
<ol>
<li>Why do we need ORFs?</li>
<li>How to construct them?</li>
</ol>
<p>We use ORFs reduce the variance of estimator. Then each new <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> provides new information. We can have fewer features.</p>
<h2 id="recipe-for-constucting-orfsonly-for-omega-isotopic"><a class="markdownIt-Anchor" href="#recipe-for-constucting-orfsonly-for-omega-isotopic"></a> Recipe for constucting ORFs(Only for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span>-isotopic)</h2>
<p>Only when <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>≤</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">m\leq d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span></p>
<ol>
<li>Constuct <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>w</mi><mi>m</mi></msub><mo>∼</mo><mi>i</mi><mi>i</mi><mi>d</mi><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">w_1, ..., w_m \sim iid \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord">Ω</span></span></span></span></li>
<li>Construct matrix G:</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>m</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">G = \begin{pmatrix}w_1^T\\...\\w_m^T\end{pmatrix} \in \mathbb{R}^{m\times d}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6026619999999996em;vertical-align:-1.5513309999999998em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.051331em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.8086690000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5513309999999998em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<ol start="3">
<li>
<p>Conduct Gram-Schmidt orthogon of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">G_{ort}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to get with L2-normalized rows</p>
</li>
<li>
<p>Renormalize each row of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">G_{ort}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> simply by multiplying it with a scalar random variable <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>∼</mo><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">X\sim \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span>, distribution of lengths of vectors taken from <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span></p>
</li>
</ol>
<h2 id="proxies"><a class="markdownIt-Anchor" href="#proxies"></a> Proxies</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi></mrow></msub><mo>→</mo><mo stretchy="false">?</mo></mrow><annotation encoding="application/x-tex">G_{ort} \to ?</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mclose">?</span></span></span></span></p>
<ol>
<li>Random-Hadamand Matrices</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mfrac><mn>1</mn><msqrt><mi>d</mi></msqrt></mfrac><mi>H</mi><msub><mi>D</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mfrac><mn>1</mn><msqrt><mi>d</mi></msqrt></mfrac><mi>H</mi><msub><mi>D</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G_{ort} = (\frac{1}{\sqrt{d}}HD_1)...(\frac{1}{\sqrt{d}}HD_k) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.17778em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.93222em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">d</span></span></span><span style="top:-2.89222em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.10777999999999999em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.17778em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.93222em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">d</span></span></span><span style="top:-2.89222em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.10777999999999999em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>for some <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>∈</mo><msub><mi>N</mi><mo>+</mo></msub></mrow><annotation encoding="application/x-tex">k\in N_{+}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>i</mi></msub><mo>=</mo><mi>d</mi><mi>i</mi><mi>a</mi><mi>g</mi><mo stretchy="false">(</mo><msubsup><mi>τ</mi><mi>i</mi><mn>1</mn></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msubsup><mi>τ</mi><mi>i</mi><mi>d</mi></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_i = diag(\tau_i^1, ... \tau_i^d) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1491079999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999998em;"><span style="top:-2.4530000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>τ</mi><mi>i</mi></msub><mo>∼</mo><mi>i</mi><mi>i</mi><mi>d</mi><mo stretchy="false">{</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mo>+</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\tau_i \sim iid \{-1, +1\} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.1132em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mopen">{</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">+</span><span class="mord">1</span><span class="mclose">}</span></span></span></span></span></p>
<p>H is a Hadamand matrix (to be more precise, H is called a Kronecker-Hadamand matrix)</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>=</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">H_0 = [1] \in \mathbb{R}^{1\times 1} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">×</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>H</mi><mi>t</mi></msub><mo separator="true">,</mo><msub><mi>H</mi><mi>t</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>H</mi><mi>t</mi></msub><mo separator="true">,</mo><mo>−</mo><msub><mi>H</mi><mi>t</mi></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">H_{t+1} = \begin{bmatrix} H_t, H_t\\ H_t, -H_t \end{bmatrix} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mi>t</mi></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><msup><mn>2</mn><mi>t</mi></msup><mo>×</mo><msup><mn>2</mn><mi>t</mi></msup></mrow></msup></mrow><annotation encoding="application/x-tex">H_t \in \mathbb{R}^{2^t \times 2^t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9722399999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9722399999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8703428571428571em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span><span class="mbin mtight">×</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8703428571428571em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> has orthogonal rows/columns.</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">H_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is symmetric</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi></mrow></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>d</mi><mo>×</mo><mi>d</mi></mrow></msup><mo>=</mo><mo stretchy="false">(</mo><mfrac><mn>1</mn><msqrt><mi>d</mi></msqrt></mfrac><mi>H</mi><msub><mi>D</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">(</mo><mfrac><mn>1</mn><msqrt><mi>d</mi></msqrt></mfrac><mi>H</mi><msub><mi>D</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G_{ort} \in \mathbb{R}^{d \times d} = (\frac{1}{\sqrt{d}}HD_1)...(\frac{1}{\sqrt{d}}HD_k) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25144em;vertical-align:-0.93em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.17778em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.93222em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">d</span></span></span><span style="top:-2.89222em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.10777999999999999em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.17778em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.93222em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">d</span></span></span><span style="top:-2.89222em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.10777999999999999em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>H have to be <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mrow><mi>d</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^{d \times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>, what if not power of 2? <strong>Zero padding</strong> to our input data.</p>
<ul>
<li>Larger k implies better approximation of the original mechanism, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msqrt><mi>d</mi></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{d}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.383108em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5335085em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.937845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mathdefault mtight">d</span></span></span><span style="top:-2.8978450000000002em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.102155em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> is normalized orthogonal, doing this for k times</li>
</ul>
<ol start="2">
<li>Givens rotations</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi></mrow></msub><mo>=</mo><mi>G</mi><mi>i</mi><msub><mi>v</mi><mn>1</mn></msub><mi>G</mi><mi>i</mi><msub><mi>v</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>G</mi><mi>i</mi><msub><mi>v</mi><mi>k</mi></msub><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mi>log</mi><mo>⁡</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G_{ort} = Giv_1 Giv_2...Giv_k, k = O(d\log{d}) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">G</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">G</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">d</span></span><span class="mclose">)</span></span></span></span></span></p>
<p>Givens rotations: … diagonal 1, where i, j exhibits</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo separator="true">,</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mo separator="true">,</mo><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix} \cos{\theta}, \sin{\theta}\\ -\sin{\theta}, \cos{\theta}\end{bmatrix} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p>
<p>The ith and jth rotated <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span></p>
<h2 id="neural-networks-attention-mechanism"><a class="markdownIt-Anchor" href="#neural-networks-attention-mechanism"></a> Neural Networks &amp; Attention Mechanism</h2>
<p>Our object of interest: sequential data<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>L</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1, ..., x_L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> -&gt; L-tuple, each <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">\in \mathbb{R}^d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.849108em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="examples"><a class="markdownIt-Anchor" href="#examples"></a> Examples</h3>
<p>(a) text data, where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>s correspond to embeddings of words.</p>
<p>(b) music data, where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>s correspond to embeddings of notes.</p>
<p>© bio-informatics, protein-chains, embeddings of amino-acids.</p>
<h3 id="self-attention"><a class="markdownIt-Anchor" href="#self-attention"></a> Self-Attention</h3>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>L</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1, ..., x_L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, understanding how the tokens attend to each other</p>
<p>similarity functions: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>→</mo><mi mathvariant="double-struck">R</mi></mrow><annotation encoding="application/x-tex">K(x_i, x_j) \to \mathbb{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbb">R</span></span></span></span></span></p>
<h2 id="attention-matrix-a"><a class="markdownIt-Anchor" href="#attention-matrix-a"></a> Attention matrix A</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>L</mi><mo>×</mo><mi>L</mi></mrow></msup></mrow><annotation encoding="application/x-tex">A \in \mathbb{R}^{L \times L}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">L</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mi>K</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A_{i,j} = K(x_i, x_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>a.k.a kernel matrix corresponding to Kernel sequence <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>L</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1, ..., x_L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>usually fixed kernel, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>S</mi><mi>M</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mrow><msubsup><mi>x</mi><mi>i</mi><mi>T</mi></msubsup><msub><mi>x</mi><mi>j</mi></msub></mrow></msup></mrow><annotation encoding="application/x-tex">K(x_i, x_j) = SM(x_i, x_j) = e^{x_i^Tx_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.006365em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.006365em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>we don’t want the value to be exponentially large.</p>
<p>By renormalizing, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>e</mi><mrow><msubsup><mi>x</mi><mi>i</mi><mi>T</mi></msubsup><msub><mi>x</mi><mi>j</mi></msub></mrow></msup><mo>→</mo><msup><mi>e</mi><mfrac><mrow><msubsup><mi>x</mi><mi>i</mi><mi>T</mi></msubsup><msub><mi>x</mi><mi>j</mi></msub></mrow><msqrt><mi>d</mi></msqrt></mfrac></msup></mrow><annotation encoding="application/x-tex">e^{x_i^Tx_j} \to e^{\frac{x_i^Tx_j}{\sqrt{d}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.006365em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.006365em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.528895em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.528895em;"><span style="top:-3.528895em;margin-right:0.05em;"><span class="pstrut" style="height:3.024695em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.46385em;"><span style="top:-2.5066107142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.937845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mathdefault mtight">d</span></span></span><span style="top:-2.8978450000000002em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.102155em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.6871857142857145em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0873300000000001em;"><span style="top:-2.23181em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.6833299999999998em;"></span><span class="mord mathdefault mtight">i</span></span><span style="top:-3.0873299999999997em;margin-right:0.1em;"><span class="pstrut" style="height:2.6833299999999998em;"></span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.45152em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.65952em;"></span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5091600000000001em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5663571428571429em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mrow><mo stretchy="false">(</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mi>T</mi></msup><mo stretchy="false">(</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">K(x_i, x_j) = e^{(w_1x_i)^T(w_2x_j)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.006365em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.006365em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>Thinking about xis as row vectors,</p>
<p>e<sup>{(w_1x_i)</sup>T(w_2x_j)}$</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>S</mi><mi>M</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mrow><msub><mi>x</mi><mi>i</mi></msub><msubsup><mi>x</mi><mi>j</mi><mi>T</mi></msubsup></mrow></msup></mrow><annotation encoding="application/x-tex">K(x_i, x_j) = SM(x_i, x_j) = e^{x_ix_j^T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.048535em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.048535em;"><span style="top:-3.10517em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42488571428571426em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>Q</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>k</mi></msub><mo>:</mo><msub><mi>K</mi><mrow><msub><mi>W</mi><mi>Q</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>k</mi></msub></mrow></msub><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>S</mi><mi>M</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><msub><mi>W</mi><mi>Q</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><msub><mi>W</mi><mi>k</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">W_Q, W_k: K_{W_Q, W_k}(x_i, x_j) = SM(x_iW_Q, x_jW_k) 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.097525em;vertical-align:-0.347525em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833100000000004em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34479999999999994em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.28217857142857145em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.347525em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><msup><mi>e</mi><mrow><msub><mi>x</mi><mi>i</mi></msub><msub><mi>W</mi><mi>Q</mi></msub><msubsup><mi>W</mi><mi>K</mi><mi>T</mi></msubsup><msubsup><mi>x</mi><mi>j</mi><mi>T</mi></msubsup></mrow></msup></mrow><annotation encoding="application/x-tex">= e^{x_iW_QW_K^Tx_j^T} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.056365em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.056365em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34479999999999994em;"><span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.28217857142857145em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42488571428571426em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><msub><mi>W</mi><mi>Q</mi></msub></mrow><annotation encoding="application/x-tex">q_i = x_iW_Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>, query-vector corresponding to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mi>j</mi></msub><mo>=</mo><msub><mi>x</mi><mi>j</mi></msub><msub><mi>W</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">k_j = x_jW_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, key-vector corresponding to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>use <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to calculate <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">q_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">k_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, see how <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">q_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> attends to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">k_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">q_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> attends to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">k_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msup><mi>e</mi><mfrac><mrow><msub><mi>q</mi><mi>i</mi></msub><msubsup><mi>k</mi><mi>j</mi><mi>T</mi></msubsup></mrow><msqrt><mi>d</mi></msqrt></mfrac></msup></mrow><annotation encoding="application/x-tex">A_{i,j} = e^{\frac{q_ik_j^T}{\sqrt{d}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.597295em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.597295em;"><span style="top:-3.597295em;margin-right:0.05em;"><span class="pstrut" style="height:3.093095em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5615642857142857em;"><span style="top:-2.5066107142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.937845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mathdefault mtight">d</span></span></span><span style="top:-2.8978450000000002em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.102155em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.7849em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:-0.03588em;margin-right:0.1em;"><span class="pstrut" style="height:2.65952em;"></span><span class="mord mathdefault mtight">i</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.31472em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0873300000000001em;"><span style="top:-2.23181em;margin-left:-0.03148em;margin-right:0.1em;"><span class="pstrut" style="height:2.6833299999999998em;"></span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span><span style="top:-3.0873299999999997em;margin-right:0.1em;"><span class="pstrut" style="height:2.6833299999999998em;"></span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.64596em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5663571428571429em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>L(L-tuple) -&gt; [attention block] -&gt; another L-tuple -&gt; [attention block2] …</p>
<p>…</p>
<p>Output of the attention: L<br />
AV = [A(L*L) * [V(L*d)<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub><mo>=</mo><msub><mi>X</mi><mi>i</mi></msub><mo>⋅</mo><msub><mi>W</mi><mi>V</mi></msub></mrow><annotation encoding="application/x-tex">V_i = X_i \cdot W_V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<h3 id="attention-block-version-i"><a class="markdownIt-Anchor" href="#attention-block-version-i"></a> Attention Block version I</h3>
<p>Input: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span></p>
<p>Hyperparams: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>Q</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>K</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>V</mi></msub></mrow><annotation encoding="application/x-tex">W_Q, W_K, W_V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>Compute <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi><mo>=</mo><mi>X</mi><msub><mi>W</mi><mi>Q</mi></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>L</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">Q = XW_Q \in \mathbb{R}^{L\times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>, and so are <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo separator="true">,</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">K, V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span></p>
<p>Output: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>V</mi></mrow><annotation encoding="application/x-tex">AV</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><msup><mi>e</mi><mfrac><mrow><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup></mrow><msqrt><mi>d</mi></msqrt></mfrac></msup></mrow><annotation encoding="application/x-tex">A = e^{\frac{QK^T}{\sqrt{d}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3715350000000002em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3715350000000002em;"><span style="top:-3.5042em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2390500000000002em;"><span style="top:-2.5066107142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.937845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mathdefault mtight">d</span></span></span><span style="top:-2.8978450000000002em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.102155em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.4623857142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">Q</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0873300000000001em;"><span style="top:-3.0873299999999997em;margin-right:0.1em;"><span class="pstrut" style="height:2.6833299999999998em;"></span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5663571428571429em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>Attention block is parametrized by 3 matrices.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>k</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">q_i, k_i, v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希</title>
    <url>/2020/09/25/%E5%93%88%E5%B8%8C/</url>
    <content><![CDATA[<h3 id="找到最长无重复字串长度">找到最长无重复字串长度</h3>
<ul>
<li>题目描述
<ul>
<li>给定一个数组arr，返回arr的最长无的重复子串的长度(无重复指的是所有数字都不相同</li>
<li>示例1 输入 <code>[2,3,4,5]</code>, 输出 <code>4</code></li>
</ul></li>
<li>考点： 哈希，双指针，字符串</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr int整型一维数组 the array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int整型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NowCoder_MaxLength</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滑动窗口是一个set，如果没有就添加，否则比较长度，start增加1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxLength</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>; end &lt; arr.length; end++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(arr[end])) &#123;</span><br><span class="line">                start = Math.max(start, map.get(arr[end]) + <span class="number">1</span>); <span class="comment">// 注意点</span></span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max, end - start + <span class="number">1</span>);</span><br><span class="line">            map.put(arr[end], end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123; <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line">        System.out.println(maxLength(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nc61-twosum">NC61 TwoSum</h3>
<ul>
<li><p>题目描述</p>
<p>给出一个整数数组，请在数组中找出两个加起来等于目标值的数， 你给出的函数twoSum 需要返回这两个数字的下标（index1，index2），需要满足 index1 小于index2</p>
<p>注意：下标是从1开始的 假设给出的数组中只存在唯一解</p>
<p>例如： 给出的数组为 {20, 70, 110, 150},目标值为90</p>
<p>输出 index1=1, index2=2</p></li>
<li><p>代码</p></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NC61</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numbers int整型一维数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target  int整型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - numbers[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; map.get(target - numbers[i]) + <span class="number">1</span>, i + <span class="number">1</span> &#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(numbers[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123; <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span> &#125;;</span><br><span class="line">        <span class="keyword">int</span> tgt = <span class="number">6</span>;</span><br><span class="line">        System.out.println(Arrays.toString(twoSum(nums, tgt)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title>Data-Mining-Lec4</title>
    <url>/2020/09/30/Data-Mining-Lec4/</url>
    <content><![CDATA[<h1 id="attention-mechanism">Attention Mechanism</h1>
<p>Attention block: takes a sequence of vectors, <span class="math inline">\(x_1, ... x_L (\mathbb{R}^d)\)</span>, and output another series <span class="math inline">\(x_1, ... x_L (\mathbb{R}^d)\)</span></p>
<p>Within the block, <span class="math inline">\(W_Q, W_K, W_V\)</span>, <span class="math inline">\(X = \begin{bmatrix}x_1\\x_2\\...\\x_L\end{bmatrix} \in \mathbb{R}^{L\times d}\)</span> <span class="math display">\[ \mathbb{R}^{L\times d}\begin{cases} Q = W_QX\\ K = W_KX\\V=W_VX\end{cases} \]</span> <span class="math display">\[ Q = \begin{bmatrix}q_1\\q_2\\...\\q_L\end{bmatrix} \]</span> all these weight matrices will be learned.</p>
<p>rows:<span class="math inline">\(q_1, ..., q_L\)</span>, columns: <span class="math inline">\(k_1, ..., k_L\)</span> compose a orthogonal matrix A. <span class="math display">\[ A_{ij} = K(q_i, k_j) \]</span></p>
<p>...</p>
<h3 id="not-normalized-attention-av">Not normalized attention: <span class="math inline">\(AV\)</span></h3>
<p>The rows would be embeddings</p>
<p><span class="math display">\[\begin{bmatrix} x_1&#39;\\...\\x_L&#39;\end{bmatrix} = AV \in \mathbb{R}^{L\times L}\]</span> <span class="math display">\[ A:L\times L; V: L\times d\]</span> <span class="math display">\[ x_i&#39; = \sum_{j=1}^{L}{K(q_ik_j)v_j} \]</span></p>
<h3 id="normalized-attention">Normalized attention:</h3>
<p><span class="math display">\[ x_i&#39; = \sum_{j=1}^{L}{\frac{K(q_ik_j)v_j}{\sum_{s=1}^{L}{K(q_i, k_s)}}} \]</span> The weight sum up to 1 and &gt;=0; <span class="math inline">\(K: \mathbb{R}^d\times \mathbb{R}^d: \mathbb{R}^+\)</span></p>
<p><span class="math display">\[D^{-1}AV\]</span> D: diagonal L*L,</p>
<p>partition function: <span class="math display">\[ d_i = \sum_{s=1}^{L}{K(q_i, k_s)} \]</span></p>
<h2 id="unidirectional-attention">Unidirectional Attention</h2>
<h3 id="not-normalized-setting">Not-normalized setting:</h3>
<p><span class="math display">\[ A_{masked}V \]</span></p>
<p>masked attention matrix, zero out uptriangular part.</p>
<p><span class="math display">\[ A_{masked} =...\]</span></p>
<h3 id="normalized">Normalized:</h3>
<p><span class="math display">\[D_{masked}^{-1}A_{masked}V\]</span></p>
<p><span class="math display">\[D: diagonal: L*L\]</span></p>
<p><span class="math display">\[ d_i = \sum_{s=1}^{i}{K(q_i, k_s)} \]</span></p>
<h2 id="problems-with-standard-attention-algorithm">Problems with standard attention algorithm</h2>
<ul>
<li>Time and space complecity for computing attention is quadratic in L (cannot be used for very long sequences)</li>
</ul>
<h3 id="sparsification">Sparsification:</h3>
<ul>
<li>attend just to a few tokens(either learned or fixed)
<ul>
<li>in a unidirectional case (lower triangular part is non-zero) last <span class="math inline">\(l\)</span> tokens (like a column till the diagonal);</li>
<li>in a bidirectional case, closest <span class="math inline">\(l\)</span> tokens. (Like a diagonal strip)</li>
</ul></li>
</ul>
<p>for <code>Graph data</code>, people often attend only to neighbors (graph attention methods).</p>
<ul>
<li>attend to a few tokens, but learn those that you would like to attend to.</li>
</ul>
<p>How to choose what <span class="math inline">\(k\)</span>s to attend to? Close ones. Choose 10 closests.</p>
<p>if <span class="math inline">\(Q=K(W_Q = W_K)\)</span>, can <strong>cluster</strong> queries into groups</p>
<ul>
<li>clustering</li>
<li>hashing, nearest neighbour approach, 10 closest neighbours, code the query to reduce complexity</li>
</ul>
<h2 id="efficient-dense-attention">Efficient Dense Attention</h2>
<p>Approximate the attention? While the matrix is still dense? Decomposition.</p>
<h3 id="bidirectional-not-normalized-attention">Bidirectional not-normalized attention</h3>
<p><span class="math inline">\(AV\)</span></p>
<p>Let's try to rewrite <span class="math inline">\(A\)</span> as <span class="math inline">\(A\approx F_1\cdot F_2 \cdot... \cdot F_L\)</span> for some simpler matrices <span class="math inline">\(F_i\)</span></p>
<p><span class="math display">\[ (F_1\cdot F_2\cdot...\cdot F_L)\cdot V = F_1\cdot (F_2\cdot(...\cdot(F_L\cdot V)...) \]</span> <span class="math display">\[ AV \in \mathbb{R}^{L \times d} \]</span></p>
<p>Q: Can we rewrite <span class="math inline">\(A = F_1 \cdot F_2, L\times L = L \times m * m\times L\)</span>, where <span class="math inline">\(m &lt; L\)</span> <span class="math inline">\(A\)</span> can be full rank (<span class="math inline">\(\det A \neq 0\)</span>)</p>
<p>large matrices on the diagonal, small every where else</p>
<p>Look at the rank, <span class="math inline">\(F_1, F_2\)</span> has rank <span class="math inline">\(\leq m\)</span>, so no solution.</p>
<p>What aboyut random <span class="math inline">\(F_i\)</span>?</p>
<ul>
<li>Can we find random matrices <span class="math inline">\(F_1\)</span> and <span class="math inline">\(F_2\)</span> such that:
<ul>
<li><span class="math inline">\(A = E[F_1F_2]\)</span></li>
<li>the error of the approximation small</li>
</ul></li>
</ul>
<p><span class="math display">\[ A_{ij} = e^{\frac{q_ik_j^T}{\sqrt{d}}} = e^{\frac{q_i}{d^{\frac{1}{4}}}}... \]</span></p>
<p>We conclude that</p>
<p><span class="math display">\[ A_{ij} = E[\phi(\bar{q_i})\phi(\bar{k_j}^T)] \]</span></p>
<p><span class="math display">\[ Q&#39; = \begin{bmatrix} \phi(\bar{q_1})\\...\\\phi(\bar{q_L}) \end{bmatrix} \]</span> <span class="math display">\[ K&#39; = \begin{bmatrix} \phi(\bar{k_1})\\...\\\phi(\bar{k_L}) \end{bmatrix} \]</span></p>
<p><span class="math display">\[ Q&#39;(K&#39;)^T_{ij} =  \phi(\bar{q_i})\phi(\bar{k_j})^T\]</span> <span class="math display">\[ E[Q&#39;(K&#39;)^T_{ij}] =  E[\phi(\bar{q_i})\phi(\bar{k_j})^T]\]</span> <span class="math display">\[ A = E[Q&#39;(K&#39;)^T]\]</span></p>
<p><span class="math display">\[ \phi_{SM}(x) = e^{\frac{||x||^2}{2}}\phi_{Gauss}(x) = e^{\frac{||x||^2}{2}} \frac{1}{\sqrt{m}} \begin{bmatrix}\cos(w_1^Ty)\\...\\\cos(w_m^Ty)\\\sin(w_1^Ty)\\...\\\sin(w_m^Ty) \end{bmatrix} \]</span></p>
<p><span class="math display">\[ AV = E[Q&#39;(K&#39;)^T]V = E[Q&#39;(K&#39;)^TV] \]</span></p>
<p><span class="math display">\[ AV \approx Q&#39;K&#39;^TV = Q&#39;(K&#39;^TV)\]</span></p>
<p><span class="math display">\[ Q\in \mathbb{R}^{L\times m}, K&#39; \in \mathbb{R}^{m\times L}, V \in \mathbb{R}^{L\times d} \]</span> <span class="math display">\[ m = 2v \]</span> space complexity: <span class="math inline">\(O(L\times d + m\times d + L\times m)\)</span></p>
<p>time complexity: <span class="math inline">\(O(mLd)\)</span> versus <span class="math inline">\(O(L^2d)\)</span> for standard attention complexity.</p>
<p>if <span class="math inline">\(m &lt;&lt; L\)</span></p>
<h2 id="problems-with-trignometric-features">Problems with trignometric features</h2>
<p>for a row, <span class="math display">\[ \sum_{s=1}^{L}{K(q_i, ks)}\]</span> if lots of entries in a row are close to 0 then lots of estimators' values could be potentially <strong>negative</strong></p>
<p>In general, as long as kernel used for attention can be written as</p>
<p><span class="math display">\[ K(x,y) = E[\phi(x)\phi(y)^T] \]</span></p>
<p>for some <span class="math inline">\(\phi: \mathbb{R}^{d} \to \mathbb{R}^{m} (m &lt; \infty)\)</span> deterministic or random, we can get attention computation mechanism with $O(mLd) time complexity and O(mL+Ld+md) space complexity</p>
<p>Remark:</p>
<p>if random features are used, random features for attention computation should be periodically redrawn in downstream algorithms using attention-based models.</p>
<p>Remark:</p>
<p>in practice, it suffices to take <span class="math inline">\(m: O(d\log d)\)</span> to ahve accurate estimation of the attention matrix.</p>
<p>as long as <span class="math inline">\(d &lt;&lt; L\)</span>, presented mechanism provides space and time complexity gains.</p>
]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Data-Mining-施密特正交化</title>
    <url>/2020/10/01/Data-Mining-%E6%96%BD%E5%AF%86%E7%89%B9%E6%AD%A3%E4%BA%A4%E5%8C%96/</url>
    <content><![CDATA[<h1 id="最小二乘法与投影">最小二乘法与投影</h1>
<p>"最小二乘法的本质是希尔伯特空间的投影。"</p>
<p>Suppose we want to project some higher-dimensional vector to a lower-dimensional space(say plane).</p>
<p>The projection is <span class="math inline">\(\vec{p}\)</span>, original one is <span class="math inline">\(\vec{b}\)</span>, the vector that is vertical(or say orthogonal) to the space should be <span class="math display">\[\vec{e} = \vec{b} - \vec{p}\]</span></p>
<p>for the vector <span class="math inline">\(\vec{p}\)</span> that is within the plane(say <strong>n-dimensional</strong> space) <span class="math display">\[\vec{p} = Ax \]</span> where A is the matrix where each column <span class="math inline">\(a_i\)</span> is a basis.</p>
<p>since <span class="math inline">\(e\perp a_i\)</span> <span class="math display">\[a_i^T(b-Ax) = 0\]</span> <span class="math display">\[A^T(b-Ax) = 0\]</span> <span class="math display">\[A^TAx = A^Tb\]</span></p>
<p>If <span class="math inline">\(A^TA\)</span> is invertible <span class="math display">\[x = (A^TA)^{-1}A^Tb\]</span> <span class="math display">\[p = Ax = A(A^TA)^{-1}A^Tb\]</span></p>
<p>The best scenario is A is composed of orthogonal basis. A is standard orthogonal matrix.</p>
<hr />
<p><strong>Question</strong>: when is <span class="math inline">\(A^TA\)</span> invertible?</p>
<p><strong>Answer</strong>: when the column vectors of <span class="math inline">\(A(m\times n)\)</span> are linearly independent</p>
<p><strong>Proof(Contradiction):</strong></p>
<p>If column vectors are linearly independent and <span class="math inline">\(A^TA\)</span> is invertible,</p>
<p><span class="math inline">\(A^TAx=0\)</span> has non-zero solution (because <span class="math inline">\(\det{A^TA} = 0\)</span>)</p>
<p><span class="math display">\[x^TA^TAx = 0\]</span></p>
<p><span class="math display">\[(Ax)^TAx = 0\]</span></p>
<p><span class="math display">\[\therefore Ax = 0\]</span></p>
<p><span class="math inline">\(\because\)</span> A's columns are linearlly independent <span class="math display">\[\therefore x=0\]</span> Contradicted, so when column vectors are linearly independent, <span class="math inline">\(A^TA\)</span> is invertible</p>
<hr />
<h1 id="格拉姆-施密特正交化-gram-schmidt-orthogonalization">格拉姆-施密特正交化 Gram-Schmidt Orthogonalization</h1>
<p><a href="https://zhuanlan.zhihu.com/p/76703543">知乎回答：格拉姆-施密特正交化--QR分解法的来源</a></p>
<p>标准正交阵 <span class="math inline">\(Q\)</span> 满足:</p>
<p><span class="math display">\[ Q^TQ = I\]</span> <span class="math display">\[ Q^T = Q^{-1}\]</span></p>
<p>投影矩阵 <span class="math inline">\(P\)</span> 满足: <span class="math display">\[ P = A(A^TA)^{-1}A^T \]</span></p>
<p>当<span class="math inline">\(A\)</span>为正交阵<span class="math inline">\(Q\)</span>时， <span class="math display">\[P = Q(Q^TQ)^{-1}Q^T = QQ^T\]</span></p>
<p>如果有一个矩阵 <span class="math display">\[q = [a, b, c]\]</span> 经过正交化 <span class="math display">\[Q = [A, B, C]\]</span> 其中<span class="math inline">\(A, B, C\)</span>正交。令<span class="math inline">\(A=a\)</span>(第一个列向量不变，调整其他向量使正交)</p>
<p>研究<span class="math inline">\(b\)</span>在<span class="math inline">\(a(A)\)</span>上的投影<span class="math inline">\(p\)</span>，利用向量投影公式 <span class="math display">\[p = \frac{A^Tb}{A^TA}A\]</span></p>
<p><span class="math inline">\(B\)</span>就是<span class="math inline">\(b\)</span>到<span class="math inline">\(A\)</span>垂线的向量 <span class="math display">\[B = b - p = b - \frac{A^Tb}{A^TA}A\]</span></p>
<p>已经有了前两个维度，<span class="math inline">\(C\)</span>就是<span class="math inline">\(c\)</span>减去在<span class="math inline">\(A,B\)</span>平面上的投影，也可以认为是减去在前两个方向上的投影(因为平面上的投影也是两个方向上投影的叠加) <span class="math display">\[C = c - \frac{A^Tc}{A^TA}A - \frac{B^Tc}{B^TB}B\]</span></p>
<p>对<span class="math inline">\(u_i = A,B,C\)</span>模数归一化得到<span class="math inline">\(e_i\)</span>，就得到正交矩阵<span class="math inline">\(Q\)</span></p>
<h1 id="qr分解">QR分解</h1>
<p><a href="https://zhuanlan.zhihu.com/p/84415000">知乎回答：[数值计算] QR分解</a></p>
<p><span class="math inline">\(Ax = b, A\in \mathbb{R}^{m\times n}\)</span> 的可能情况有： 1. <span class="math inline">\(m=n\)</span> 2. <span class="math inline">\(m&gt;n\)</span>, over-determined 3. <span class="math inline">\(m&lt;n\)</span>, under-determined</p>
<h2 id="定义">定义</h2>
<p><span class="math inline">\(A\in \mathbb{R}^{m\times n}, m\geq n\)</span>可以被分解成 <span class="math inline">\(A=QR\)</span>, 其中: * <span class="math inline">\(Q\in \mathbb{R}^{m\times m}\)</span> 是正交矩阵 * <span class="math inline">\(R = \begin{bmatrix}\hat{R}\\0\end{bmatrix}\in \mathbb{R}^{m\times n}\)</span> * <span class="math inline">\(\hat{R}\in \mathbb{R}^{n\times n}\)</span>是上三角阵</p>
<h2 id="正交矩阵性质">正交矩阵性质</h2>
<ul>
<li><span class="math inline">\(Q^TQ = QQ^T = I\)</span></li>
<li>左乘正交矩阵不影响欧式范数</li>
</ul>
<h2 id="计算qr分解的方法">计算QR分解的方法</h2>
<ul>
<li>Gram-Schmidt orthogonalization</li>
<li>Householder Triangularization</li>
<li>Givens Rotations</li>
</ul>
<h2 id="gram-schmidt-orthogonalization">Gram-Schmidt Orthogonalization</h2>
<h3 id="reduced-qr分解">Reduced QR分解</h3>
<p>GSO从矩阵<span class="math inline">\(A\in \mathbb{R}^{m\times n}\)</span>的第一个列向量<span class="math inline">\(A_{:,0}\)</span>开始构建互相正交的基。 对于原矩阵<span class="math inline">\(A\)</span> <span class="math display">\[A_{:,0} = r_{0,0}q_0\]</span> <span class="math display">\[A_{:,1} = r_{0,1}q_0 + r_{1,1}q_1\]</span> <span class="math display">\[...\]</span> <span class="math display">\[A_{:,n-1} = r_{0,n-1}q_0 + r_{1,n-1}q_1 ... + r_{n-1,n-1}q_{n-1}\]</span></p>
<p><span class="math display">\[ A = \hat{Q} \hat{R} \]</span> <span class="math display">\[ [A_{:,0}, ... A_{:,n-1}] = [q_0, ..., q_{n-1}] \begin{bmatrix} r_{0,0} \ r_{0,1} \ ... r_{0,n-1}\\ ~~~~~~~ r_{1,1} \ ... r_{1,n-1} \\ ~~~~... \\ ~~~~~~~~~~~~~r_{n-1, n-1}\end{bmatrix} \]</span></p>
<p><span class="math inline">\(\hat{Q} \in \mathbb{R}^{m\times n}, \hat{R} \in \mathbb{R}^{n\times n}\)</span> 称为 Reduced-QR，<span class="math inline">\(\hat{Q}\)</span>不为方阵。 <span class="math inline">\(\hat{Q}^T\hat{Q} = I\)</span>，因为<span class="math inline">\(m&gt;n\)</span>，不满足<span class="math inline">\(\hat{Q}\hat{Q}^T = I\)</span> （满秩方阵才能两侧逆）</p>
<h3 id="full-qr分解">Full-QR分解</h3>
<p><span class="math inline">\(Q \in \mathbb{R}^{m\times m}, R \in \mathbb{R}^{m\times n}\)</span></p>
<p>若<span class="math inline">\(m&gt;n\)</span>，需要把<span class="math inline">\(\hat{Q}\)</span>的n个基拓展到m个基。多出的<span class="math inline">\(m-n\)</span>个基对应到<span class="math inline">\(R = \begin{bmatrix} \hat{R} \\ 0 \end{bmatrix}\)</span> 的空白部分。</p>
<h3 id="python-numpy代码">Python numpy代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q, r = np.linalg.qr(A) <span class="comment"># Reduced-QR</span></span><br><span class="line">q, r = np.linalg.qr(A, mode = <span class="string">&quot;complete&quot;</span>) <span class="comment"># Full-QR</span></span><br></pre></td></tr></table></figure>
<h3 id="classic-gso-cgso">Classic GSO (CGSO)</h3>
<p><span class="math display">\[ [A_{:,0}, ... A_{:,n-1}] = [q_0, ..., q_{n-1}] \begin{bmatrix} r_{0,0} \ r_{0,1} \ ... r_{0,n-1}\\ ~~~~~~~ r_{1,1} \ ... r_{1,n-1} \\ ~~~~... \\ ~~~~~~~~~~~~~r_{n-1, n-1}\end{bmatrix} \]</span></p>
<p>每一次迭代<span class="math inline">\(q_0, ..., q_{j-1}\)</span>已知，<span class="math inline">\(r_{j,j}\)</span>未知，<span class="math inline">\(r_{0,j}, ..., r_{j-1,j}\)</span>满足 <span class="math display">\[r_{i,j} = q_i^TA_{:,~j}\]</span></p>
<p><span class="math display">\[r_{j,j}q_j = v_j =  A_{:,j} - \sum_{i=0}^{j-1}{r_{i,j}q_i} = A_{:,j} - \sum_{i=0}^{j-1}{q_i^TA_{:,~j}q_i}\]</span></p>
<p>对<span class="math inline">\(v_i\)</span>按模数归一化， <span class="math display">\[q_j = \frac{v_j}{||v_j||_2}\]</span> <span class="math display">\[r_{j,j} = ||v_j||_2\]</span></p>
<h3 id="modified-gso-mgso">Modified GSO (MGSO)</h3>
<p>...</p>
<h2 id="givens-rotations">Givens Rotations</h2>
<h3 id="矩阵形式">矩阵形式</h3>
<p><img src="https://www.zhihu.com/equation?tex=G%28i%2Cj%2C%5Ctheta%29+%3D++%5Cbegin%7Bbmatrix%7D+1+%26+%5Cdots+%26+0+%26+%5Cdots+%26+0+%26+%5Cdots+%26+0%5C%5C+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots%5C%5C+0+%26+%5Cdots+%26+cos%5Ctheta+%26+%5Cdots+%26+sin%5Ctheta+%26+%5Cdots+%26+0%5C%5C+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots%5C%5C+0+%26+%5Cdots+%26+-sin%5Ctheta+%26+%5Cdots+%26+cos%5Ctheta+%26+%5Cdots+%26+0%5C%5C+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots%5C%5C+0+%26+%5Cdots+%26+0+%26+%5Cdots+%26+0+%26+%5Cdots+%26+1%5C%5C+%5Cend%7Bbmatrix%7D+%5Ctag%7B8%7D" alt="G(i,j,θ)" /> <img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Baligned%7D+i+%26%3C+j+%5C%5C+G_%7Bi%2Ci%7D+%26%3D+c%5C%5C+G_%7Bj%2Cj%7D+%26%3D+c%5C%5C+G_%7Bi%2Cj%7D+%26%3D+s%5C%5C+G_%7Bj%2Ci%7D+%26%3D+-s%5C%5C+G_%7Bk%2Ck%7D+%26%3D+1%2C%5C+for%5C+k%5Cne+i%5C+or%5C+j%5C%5C+G_%7Bt%2Cs%7D+%26%3D+0%2C%5C+otherwise+%5Cend%7Baligned%7D+%5Ctag%7B9%7D" alt="Equations" /></p>
<h3 id="矩阵作用">矩阵作用</h3>
<p><span class="math inline">\(A\in \mathbb{R}^{m\times n}, m \geq n, A_{i,j}, A_{i,k}, j &lt; k\)</span>, <span class="math display">\[\begin{bmatrix}c &amp; s\\-s &amp; c \end{bmatrix} \begin{bmatrix}A_{i,j}\\A_{i,k}\end{bmatrix} = \begin{bmatrix} \alpha \\ 0 \end{bmatrix}\]</span> <span class="math display">\[\alpha = \sqrt{A_{i,j}^2 + A_{i,k}^2}\]</span> <span class="math display">\[c=\frac{A_{i,j}}{\alpha}\]</span> <span class="math display">\[s=\frac{A_{i,k}}{\alpha}\]</span></p>
]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Data-Mining-Recitation1</title>
    <url>/2020/10/05/Data-Mining-Recitation1/</url>
    <content><![CDATA[<h1 id="recitation1"><a class="markdownIt-Anchor" href="#recitation1"></a> Recitation1:</h1>
<p>主要讨论Random Feature map 对高斯核的模拟，以及G正交化的影响</p>
<p>P.S.<br />
<a href="https://chrismroberts.com/2020/01/06/using-markdown-in-hexo-to-add-images/">hexo部署时添加图片 Adding Images to Hexo Posts with Markdown</a> <code>npm i -s hexo-asset-link</code></p>
<p><a href="https://nbconvert.readthedocs.io/en/latest/install.html#installing-tex">jupyter导出pdf</a> 安装TeX</p>
<h4 id="import-packages"><a class="markdownIt-Anchor" href="#import-packages"></a> Import packages</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import math</span><br><span class="line">from sklearn.metrics import mean_squared_error </span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import os</span><br><span class="line">import random</span><br><span class="line">import pandas as pd</span><br><span class="line">import seaborn as sns</span><br><span class="line">from tqdm import tqdm</span><br><span class="line">import datetime</span><br><span class="line">from scipy.stats import norm</span><br></pre></td></tr></table></figure>
<h4 id="calculate-gram-schmidt-orthogonalization"><a class="markdownIt-Anchor" href="#calculate-gram-schmidt-orthogonalization"></a> Calculate Gram-Schmidt Orthogonalization</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def gram_schmidt_columns(X):</span><br><span class="line">    Q, R &#x3D; np.linalg.qr(X)</span><br><span class="line">    return Q</span><br><span class="line"></span><br><span class="line">def orthgonalize(V):</span><br><span class="line">    N &#x3D; V.shape[0]</span><br><span class="line">    d &#x3D; V.shape[1]</span><br><span class="line">    turns &#x3D; int(N&#x2F;d)</span><br><span class="line">    remainder &#x3D; N%d</span><br><span class="line">    </span><br><span class="line">    #V &#x3D;  np.random.normal(size&#x3D;[(turns+1)*d, d])</span><br><span class="line">    #V &#x3D;  np.random.normal(size &#x3D;[N, d])</span><br><span class="line">    #print(V.shape)</span><br><span class="line">    V_ &#x3D; np.zeros_like(V)</span><br><span class="line">    </span><br><span class="line">    for i in range(turns):</span><br><span class="line">        v &#x3D; gram_schmidt_columns(V[i*d:(i+1)*d, :].T).T</span><br><span class="line">        V_[i*d:(i+1)*d, :] &#x3D; v</span><br><span class="line">    if remainder !&#x3D; 0:</span><br><span class="line">        V_[turns*d:,:] &#x3D; gram_schmidt_columns(V[turns*d:,:].T).T</span><br><span class="line">        </span><br><span class="line">    return V_</span><br></pre></td></tr></table></figure>
<h6 id="step-1-iid-sampling"><a class="markdownIt-Anchor" href="#step-1-iid-sampling"></a> Step 1: i.i.d. sampling</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">random_matrix &#x3D; np.random.normal(0, 1, size &#x3D; (6,3))</span><br><span class="line">random_matrix</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 1.59895494,  0.29885485,  0.43694542],
       [-0.43523095, -0.10324217, -1.28703438],
       [-0.7452128 , -0.12095329,  0.31481384],
       [ 0.0779075 ,  0.43587534, -0.04371553],
       [ 0.35963102,  0.90466958, -1.25109187],
       [ 1.58862906, -0.08350228, -0.51967566]])
</code></pre>
<h6 id="step-2-calculate-the-norm-of-each-sampling-for-later-renormalization"><a class="markdownIt-Anchor" href="#step-2-calculate-the-norm-of-each-sampling-for-later-renormalization"></a> Step 2: Calculate the norm of each sampling for later renormalization</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">norms &#x3D; np.linalg.norm(random_matrix, axis &#x3D; 1).reshape(6,1)</span><br><span class="line">norms</span><br></pre></td></tr></table></figure>
<pre><code>array([[1.6843077 ],
       [1.36254996],
       [0.81797284],
       [0.44493588],
       [1.58524206],
       [1.67355242]])
</code></pre>
<h6 id="step-3-orthogonalize-the-random-features"><a class="markdownIt-Anchor" href="#step-3-orthogonalize-the-random-features"></a> Step 3: Orthogonalize the random features</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; orthgonalize(random_matrix)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a, a.shape</span><br></pre></td></tr></table></figure>
<pre><code>(array([[-0.94932472, -0.17743483, -0.25942137],
        [-0.25846666, -0.02888627,  0.9655882 ],
        [-0.17882269,  0.98370853, -0.01843854],
        [-0.17509826, -0.9796363 ,  0.09825129],
        [ 0.14721431, -0.12472189, -0.98120966],
        [ 0.97348269, -0.15734411,  0.16605506]]), (6, 3))
</code></pre>
<h6 id="step-4-renormalize-the-orthogonalized-random-features"><a class="markdownIt-Anchor" href="#step-4-renormalize-the-orthogonalized-random-features"></a> Step 4: Renormalize the orthogonalized random features</h6>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a*norms</span><br></pre></td></tr></table></figure>
<pre><code>array([[-1.59895494, -0.29885485, -0.43694542],
       [-0.35217373, -0.03935899,  1.31566217],
       [-0.14627211,  0.80464686, -0.01508222],
       [-0.0779075 , -0.43587534,  0.04371553],
       [ 0.23337031, -0.19771438, -1.55545483],
       [ 1.62917431, -0.26332362,  0.27790185]])
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">np.dot(a[0, :], a[1, :])</span><br></pre></td></tr></table></figure>
<pre><code>5.551115123125783e-17
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># G就是(w1, ..., wm)</span><br><span class="line"># 高斯核的phi(x)</span><br><span class="line">def baseline_eval_gaussian(x, G, m):</span><br><span class="line">    &quot;&quot;&quot;Calculate the result of baseline random feature mapping</span><br><span class="line"></span><br><span class="line">        Parameters</span><br><span class="line">        ----------</span><br><span class="line">        x: array, dimension &#x3D; d</span><br><span class="line">            The data point to input to the baseline mapping</span><br><span class="line">        </span><br><span class="line">        G: matrix, dimension &#x3D; m*d</span><br><span class="line">            The matrix in the baseline random feature mapping</span><br><span class="line">            </span><br><span class="line">        m: integer</span><br><span class="line">            The number of dimension that we want to reduce to</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    left &#x3D; np.cos(np.dot(G, x).astype(np.float32))</span><br><span class="line">    right &#x3D; np.sin(np.dot(G, x).astype(np.float32))</span><br><span class="line">    return ((1&#x2F;m)**0.5) * np.append(left, right)</span><br><span class="line"></span><br><span class="line">def find_sigma(random_sample):</span><br><span class="line">    all_distances &#x3D; []</span><br><span class="line">    for i in range(len(random_sample)): # dimensionality: d</span><br><span class="line">        #print(f&#39;Calculating the distance of &#123;i&#125;th samples&#39;)</span><br><span class="line">        distances &#x3D; []</span><br><span class="line">        for j in range(len(random_sample)):</span><br><span class="line">            if j!&#x3D;i:</span><br><span class="line">                distances.append(np.linalg.norm(random_sample[i] - random_sample[j]))</span><br><span class="line">        distances.sort()</span><br><span class="line">        all_distances.append(distances[50]) # 只取第50个</span><br><span class="line">        # all_distances.append(np.mean(distances))</span><br><span class="line">    return np.mean(all_distances)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find_sigma(np.random.normal(0, 1, (100,50)))</span><br></pre></td></tr></table></figure>
<pre><code>10.11949067744566
</code></pre>
<h4 id="main"><a class="markdownIt-Anchor" href="#main"></a> Main</h4>
<h5 id="load-dataset"><a class="markdownIt-Anchor" href="#load-dataset"></a> Load dataset</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from google.colab import drive</span><br><span class="line">drive.mount(&#39;&#x2F;content&#x2F;drive&#39;)</span><br></pre></td></tr></table></figure>
<pre><code>Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(&quot;/content/drive&quot;, force_remount=True).
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%cd &quot;&#x2F;content&#x2F;drive&#x2F;My Drive&#x2F;20FA&#x2F;Recitation&quot;</span><br></pre></td></tr></table></figure>
<pre><code>/content/drive/My Drive/20FA/Recitation
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &#x3D; 10  # Dimension of data</span><br><span class="line">d_ &#x3D; 10  # Number of multipliers</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">letters &#x3D; pd.read_csv(&#39;letter-recognition.csv&#39;)</span><br><span class="line">letters.head()</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;
</code></pre>
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>letter</th>
      <th>xbox</th>
      <th>ybox</th>
      <th>width</th>
      <th>height</th>
      <th>onpix</th>
      <th>xbar</th>
      <th>ybar</th>
      <th>x2bar</th>
      <th>y2bar</th>
      <th>xybar</th>
      <th>x2ybar</th>
      <th>xy2bar</th>
      <th>xedge</th>
      <th>xedgey</th>
      <th>yedge</th>
      <th>yedgex</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>T</td>
      <td>2</td>
      <td>8</td>
      <td>3</td>
      <td>5</td>
      <td>1</td>
      <td>8</td>
      <td>13</td>
      <td>0</td>
      <td>6</td>
      <td>6</td>
      <td>10</td>
      <td>8</td>
      <td>0</td>
      <td>8</td>
      <td>0</td>
      <td>8</td>
    </tr>
    <tr>
      <th>1</th>
      <td>I</td>
      <td>5</td>
      <td>12</td>
      <td>3</td>
      <td>7</td>
      <td>2</td>
      <td>10</td>
      <td>5</td>
      <td>5</td>
      <td>4</td>
      <td>13</td>
      <td>3</td>
      <td>9</td>
      <td>2</td>
      <td>8</td>
      <td>4</td>
      <td>10</td>
    </tr>
    <tr>
      <th>2</th>
      <td>D</td>
      <td>4</td>
      <td>11</td>
      <td>6</td>
      <td>8</td>
      <td>6</td>
      <td>10</td>
      <td>6</td>
      <td>2</td>
      <td>6</td>
      <td>10</td>
      <td>3</td>
      <td>7</td>
      <td>3</td>
      <td>7</td>
      <td>3</td>
      <td>9</td>
    </tr>
    <tr>
      <th>3</th>
      <td>N</td>
      <td>7</td>
      <td>11</td>
      <td>6</td>
      <td>6</td>
      <td>3</td>
      <td>5</td>
      <td>9</td>
      <td>4</td>
      <td>6</td>
      <td>4</td>
      <td>4</td>
      <td>10</td>
      <td>6</td>
      <td>10</td>
      <td>2</td>
      <td>8</td>
    </tr>
    <tr>
      <th>4</th>
      <td>G</td>
      <td>2</td>
      <td>1</td>
      <td>3</td>
      <td>1</td>
      <td>1</td>
      <td>8</td>
      <td>6</td>
      <td>6</td>
      <td>6</td>
      <td>6</td>
      <td>5</td>
      <td>9</td>
      <td>1</td>
      <td>7</td>
      <td>5</td>
      <td>10</td>
    </tr>
  </tbody>
</table>
</div>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">letters &#x3D; np.asarray(letters)</span><br><span class="line">data &#x3D; letters[:, 1:d+1]</span><br><span class="line">data &#x3D; list(data)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data[0]</span><br></pre></td></tr></table></figure>
<pre><code>array([2, 8, 3, 5, 1, 8, 13, 0, 6, 6], dtype=object)
</code></pre>
<h5 id="parameters-setup"><a class="markdownIt-Anchor" href="#parameters-setup"></a> Parameters setup</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#d &#x3D; 10  # dimension of the data point </span><br><span class="line">N &#x3D; [d*i for i in range(1,d_+1)]  # number of samplings</span><br><span class="line">episode &#x3D; 100</span><br><span class="line">epoch &#x3D;  450  # number of experiments to perform for each episode</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">N</span><br></pre></td></tr></table></figure>
<pre><code>[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
</code></pre>
<h5 id="start-running"><a class="markdownIt-Anchor" href="#start-running"></a> Start running</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 正交化可以降低variance</span><br><span class="line"># 对不同样本大小测试</span><br><span class="line"></span><br><span class="line">iid_estimates &#x3D; np.zeros((d_, episode, epoch))</span><br><span class="line">orthog_estimates &#x3D; np.zeros((d_, episode, epoch))</span><br><span class="line"></span><br><span class="line">MSE_iid &#x3D; []</span><br><span class="line">MSE_orthog &#x3D; []</span><br><span class="line"></span><br><span class="line">MSE_iid_ &#x3D; []</span><br><span class="line">MSE_orthog_ &#x3D; []</span><br><span class="line"></span><br><span class="line">list_of_samples &#x3D; []</span><br><span class="line">true_values &#x3D; []</span><br><span class="line"></span><br><span class="line">random_sample &#x3D; random.sample(data, 1000)</span><br><span class="line">sigma &#x3D; find_sigma(random_sample)</span><br><span class="line"></span><br><span class="line">random_sample &#x3D; [i&#x2F;sigma for i in random_sample]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sigma</span><br></pre></td></tr></table></figure>
<pre><code>5.760360599001658
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 取出20000个数据点中的1000个作为random_sample</span><br><span class="line"># find_sigma从每行中取第50个，整体做平均，可以省去一个mean的运算</span><br><span class="line"># random_sample的每行数据点除以标准差，归一化</span><br><span class="line">random_sample[0], len(random_sample)</span><br></pre></td></tr></table></figure>
<pre><code>(array([0.34720048608530246, 0.17360024304265123, 0.34720048608530246,
        0.34720048608530246, 0.17360024304265123, 0.8680012152132562,
        1.7360024304265125, 0.6944009721706049, 0.8680012152132562,
        1.7360024304265125], dtype=object), 1000)
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># [tqdm](https:&#x2F;&#x2F;tqdm.github.io&#x2F;)</span><br><span class="line">for i in tqdm(range(10000000)):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<pre><code>  0%|          | 0/10000000 [00:00&lt;?, ?it/s] [A
  3%|▎         | 318248/10000000 [00:00&lt;00:03, 3182475.45it/s] [A
  6%|▋         | 639853/10000000 [00:00&lt;00:02, 3192472.62it/s] [A
 10%|▉         | 960927/10000000 [00:00&lt;00:02, 3197929.60it/s] [A
 13%|█▎        | 1320869/10000000 [00:00&lt;00:02, 3308643.11it/s] [A
 17%|█▋        | 1694130/10000000 [00:00&lt;00:02, 3425362.30it/s] [A
 21%|██        | 2086242/10000000 [00:00&lt;00:02, 3560404.17it/s] [A
 25%|██▍       | 2491758/10000000 [00:00&lt;00:02, 3695671.55it/s] [A
 29%|██▉       | 2901121/10000000 [00:00&lt;00:01, 3806689.20it/s] [A
 33%|███▎      | 3300819/10000000 [00:00&lt;00:01, 3861844.78it/s] [A
 37%|███▋      | 3714063/10000000 [00:01&lt;00:01, 3939226.23it/s] [A
 41%|████▏     | 4127830/10000000 [00:01&lt;00:01, 3996729.87it/s] [A
 45%|████▌     | 4548321/10000000 [00:01&lt;00:01, 4056985.18it/s] [A
 50%|████▉     | 4974120/10000000 [00:01&lt;00:01, 4115263.66it/s] [A
 54%|█████▍    | 5401755/10000000 [00:01&lt;00:01, 4162298.98it/s] [A
 58%|█████▊    | 5841688/10000000 [00:01&lt;00:00, 4230680.58it/s] [A
 63%|██████▎   | 6272699/10000000 [00:01&lt;00:00, 4254198.50it/s] [A
 67%|██████▋   | 6700434/10000000 [00:01&lt;00:00, 4261115.77it/s] [A
 71%|███████▏  | 7141608/10000000 [00:01&lt;00:00, 4305207.12it/s] [A
 76%|███████▌  | 7594108/10000000 [00:01&lt;00:00, 4368868.06it/s] [A
 80%|████████  | 8036809/10000000 [00:02&lt;00:00, 4386147.78it/s] [A
 85%|████████▍ | 8484505/10000000 [00:02&lt;00:00, 4413000.38it/s] [A
 89%|████████▉ | 8925941/10000000 [00:02&lt;00:00, 4386127.92it/s] [A
 94%|█████████▍| 9377578/10000000 [00:02&lt;00:00, 4424403.07it/s] [A
100%|██████████| 10000000/10000000 [00:02&lt;00:00, 4092170.78it/s]
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for e in tqdm(range(episode), position&#x3D;0, leave&#x3D;True): # episode &#x3D; 100</span><br><span class="line"></span><br><span class="line">    x, y &#x3D; random.sample(random_sample, k&#x3D;2)</span><br><span class="line"></span><br><span class="line">    true_value &#x3D; math.exp((-1)*(np.linalg.norm(x - y)**2)&#x2F;(2)) #K_Gauss(x, y) &#x3D; e^&#123;(x-y)^2&#x2F;2&#125;</span><br><span class="line">    list_of_samples.append((x, y)) # 1000个值，与true_value对应</span><br><span class="line">    true_values.append(true_value)</span><br><span class="line"></span><br><span class="line">for n in range(len(N)): # 10组样本，sample_size10到100</span><br><span class="line"></span><br><span class="line">    mse_iid_n &#x3D; []</span><br><span class="line">    mse_orthog_n &#x3D; []</span><br><span class="line"></span><br><span class="line">    for e in tqdm(range(episode), position&#x3D;0, leave&#x3D;True):</span><br><span class="line">        #print(f&#39;&#123;N[n]&#125; samplings, &#123;e&#125;th episode&#39;)</span><br><span class="line">        true &#x3D; np.repeat(true_values[e], epoch) # epoch&#x3D;450</span><br><span class="line">        </span><br><span class="line">        x &#x3D; list_of_samples[e][0]</span><br><span class="line">        y &#x3D; list_of_samples[e][1]</span><br><span class="line">        </span><br><span class="line">        for i in range(epoch):</span><br><span class="line"></span><br><span class="line">            np.random.seed()</span><br><span class="line">            # N[n]即m的值变化，aka V&#x3D;[w1, ..., wm]变化</span><br><span class="line">            V &#x3D; np.random.normal(0, 1, (N[n],d))   #create N*d iid matrix</span><br><span class="line">            V_orthog &#x3D; orthgonalize(V)   #create N*d matrix with orthogonal blocks</span><br><span class="line">            norms &#x3D; np.linalg.norm(V, axis&#x3D;1).reshape([N[n],1])</span><br><span class="line">            </span><br><span class="line">            # K(x, y) &#x3D; Φ(x)^T Φ(y)</span><br><span class="line">            # Φ(x) &#x3D; 1&#x2F;sqrt(m) * [cos(w1x), ... cos(wmx), sin(w1x), ..., sin(wmx)]</span><br><span class="line">            iid_estimates[n, e, i] &#x3D; np.dot(baseline_eval_gaussian(x, V, N[n]), # Original &quot;G&quot;</span><br><span class="line">                        baseline_eval_gaussian(y, V, N[n]))</span><br><span class="line"></span><br><span class="line">            orthog_estimates[n, e, i] &#x3D; np.dot(baseline_eval_gaussian(x, V_orthog*norms, N[n]), # Orthogonalized &quot;G&quot;</span><br><span class="line">                        baseline_eval_gaussian(y, V_orthog*norms, N[n]))</span><br><span class="line">            </span><br><span class="line">        mse_iid_n.append(mean_squared_error(true, iid_estimates[n, e])) # compare m values</span><br><span class="line">        mse_orthog_n.append(mean_squared_error(true, orthog_estimates[n, e]))</span><br><span class="line">    </span><br><span class="line">    MSE_iid_.append(mse_iid_n)</span><br><span class="line">    MSE_iid.append(np.mean(mse_iid_n))</span><br><span class="line">    </span><br><span class="line">    MSE_orthog_.append(mse_orthog_n)</span><br><span class="line">    MSE_orthog.append(np.mean(mse_orthog_n))</span><br></pre></td></tr></table></figure>
<pre><code>100%|██████████| 100/100 [00:00&lt;00:00, 41614.29it/s]
100%|██████████| 100/100 [00:21&lt;00:00,  4.61it/s]
100%|██████████| 100/100 [00:26&lt;00:00,  3.74it/s]
100%|██████████| 100/100 [00:31&lt;00:00,  3.16it/s]
100%|██████████| 100/100 [00:35&lt;00:00,  2.78it/s]
100%|██████████| 100/100 [00:40&lt;00:00,  2.47it/s]
100%|██████████| 100/100 [00:44&lt;00:00,  2.23it/s]
100%|██████████| 100/100 [00:49&lt;00:00,  2.00it/s]
100%|██████████| 100/100 [00:54&lt;00:00,  1.84it/s]
100%|██████████| 100/100 [00:58&lt;00:00,  1.72it/s]
100%|██████████| 100/100 [01:02&lt;00:00,  1.60it/s]
</code></pre>
<h5 id="visualization"><a class="markdownIt-Anchor" href="#visualization"></a> Visualization</h5>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sns.set_style(&quot;darkgrid&quot;)    </span><br><span class="line"></span><br><span class="line">x1 &#x3D; range(1, d_+1)</span><br><span class="line">x1 &#x3D; x1 + np.zeros((episode, d_))</span><br><span class="line">x1 &#x3D; np.sort(x1.reshape(episode*d_,)) </span><br><span class="line"></span><br><span class="line">mse_iid_ &#x3D; np.asarray(MSE_iid_).reshape(-1)</span><br><span class="line">category &#x3D; [&#39;MC&#39; for i in range(episode*d_)]</span><br><span class="line">df1 &#x3D; pd.DataFrame(&#123;&#39;D&#x2F;d&#39;: x1, &#39;MSE&#39;:mse_iid_, &#39;Category&#39;:category&#125;)</span><br><span class="line"></span><br><span class="line">mse_ortho_ &#x3D; np.asarray(MSE_orthog_).reshape(-1)</span><br><span class="line">category &#x3D; [&#39;OMC&#39; for i in range(episode*d_)]</span><br><span class="line">df3 &#x3D; pd.DataFrame(&#123;&#39;D&#x2F;d&#39;: x1, &#39;MSE&#39;:mse_ortho_, &#39;Category&#39;:category&#125;)</span><br><span class="line"></span><br><span class="line">df &#x3D; pd.concat([df1, df3], ignore_index&#x3D;True)</span><br><span class="line"></span><br><span class="line">sns.lineplot(x&#x3D;&quot;D&#x2F;d&quot;, y&#x3D;&quot;MSE&quot;, hue&#x3D;&quot;Category&quot;,</span><br><span class="line">                   err_style&#x3D;&quot;bars&quot;, ci&#x3D;95, data&#x3D;df)</span><br><span class="line">plt.title(&#39;Gaussian_kernel_Comparison&#39;)</span><br><span class="line">plt.savefig(f&#39;Gaussian_kernel_Comparison_&#123;datetime.datetime.now()&#125;.png&#39;, dpi &#x3D; 300)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/05/Data-Mining-Recitation1/DM_recitation_files/DM_recitation_34_0.png" alt="" /></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># !sudo apt-get install texlive-xetex texlive-fonts-recommended texlive-generic-recommended</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!jupyter nbconvert --to PDF DM_recitation.ipynb</span><br></pre></td></tr></table></figure>
<pre><code>[NbConvertApp] Converting notebook DM_recitation.ipynb to PDF
[NbConvertApp] Support files will be in DM_recitation_files/
[NbConvertApp] Making directory ./DM_recitation_files
[NbConvertApp] Writing 76544 bytes to ./notebook.tex
[NbConvertApp] Building PDF
[NbConvertApp] Running xelatex 3 times: [u'xelatex', u'./notebook.tex', '-quiet']
[NbConvertApp] Running bibtex 1 time: [u'bibtex', u'./notebook']
[NbConvertApp] WARNING | bibtex had problems, most likely because there were no citations
[NbConvertApp] PDF successfully created
[NbConvertApp] Writing 75123 bytes to DM_recitation.pdf
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTex 速查表</title>
    <url>/2020/10/07/LaTex-%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    <content><![CDATA[<p>一些常用LaTex的命令。</p>
<div class="pdfobject-container" data-target="./Latex.pdf" data-height="1000px"></div>]]></content>
      <categories>
        <category>misc</category>
      </categories>
  </entry>
  <entry>
    <title>Data-Mining-HW1</title>
    <url>/2020/10/05/Data-Mining-HW1/</url>
    <content><![CDATA[<h1 id="description">Description</h1>
<h2 id="problem-1-softmax-kernel-approximators-50-points">1 Problem 1: Softmax-kernel approximators [50 points]</h2>
<p>The goal of this task is to test different random feature map based estimators of the softmax-kernel. Choose two feature vectors <span class="math inline">\(x, y \in \mathbb{R}^{20}\)</span> of unit <span class="math inline">\(L_2\)</span>-norm and with angle <span class="math inline">\(\frac{π}{3}\)</span> between them. Consider three estimators of the value of the softmax-kernel in these points: the regular one using independent sin/cos-random features (leveraging random feature maps for the Gaussian kernel) and its two modifications: the one using Givens random rotations and the one applying random Hadamard matrices (with three <strong>HD</strong>-blocks). Describe in detail each estimator. Then for the number of random projections <span class="math inline">\(m = 5, 10, 20, 30, 50, 100\)</span> and each estimator, compute its value as an average over <span class="math inline">\(s = 10\)</span> independent trials. Propose how to use those trials to compute empirical mean squared error for each estimator. Prepare plots where on <span class="math inline">\(x\)</span>-axis you put the number of random projections m used and on the <span class="math inline">\(y\)</span>-axis the average value of the estimator. Show also computed mean squared error in the form of the error-bars. Remark: If <span class="math inline">\(m &gt; d\)</span> the orthogonal trick can be still applied by constructing independent ensembles of samples such that within each ensemble samples are exactly orthogonal.</p>
<h2 id="problem-2-softmax-kernel-is-positive-semidefinite-30-points">Problem 2 Softmax-kernel is positive semidefinite [30 points]</h2>
<p><span class="math inline">\(K : \mathbb{R}^{d\times d} \to \mathbb{R}^{d}\)</span> is positive semidefinite (PSD) if:</p>
<p><span class="math display">\[v^T\kappa(X)v \geq 0\]</span></p>
<p>for any <span class="math inline">\(N&gt;0\)</span>, any set of feature vectors <span class="math inline">\(\chi = \{x_1, ..., x_N\}\subseteq \mathbb{R}^d\)</span>, matrix <span class="math inline">\(\kappa(X) := [K(x_i, x_j)]_{i,j=1,...,N} \in \mathbb{R}^{N\times N}\)</span> and any vector <span class="math inline">\(v \in \mathbb{R}^{N}\)</span>. Show that softmax-kernel is PSD.</p>
<h3 id="proof"><strong>Proof</strong>:</h3>
<!-- $$\kappa(X)_{ij} = K_{SM}(x_i, x_j) = e^{x_i^Tx_j}$$

$$v = \begin{bmatrix}v_1, v_2, ..., v_N\end{bmatrix} ,v_i \in \mathbb{R}$$

$$v^T\kappa(X)v = \begin{bmatrix}v_1, v_2, ..., v_N\end{bmatrix}\kappa(X) \begin{bmatrix}v_1\\v_2\\...\\v_N\end{bmatrix}, $$

$$ = \begin{bmatrix}e^{x_1^Tx_1}v_1 + e^{x_2^Tx_1}v_2+...+e^{x_N^Tx_1}v_N\\e^{x_1^Tx_2}v_1 + e^{x_2^Tx_2}v_2+...+e^{x_N^Tx_2}v_N\\...\\e^{x_1^Tx_N}v_1 + e^{x_2^Tx_N}v_2+...+e^{x_N^Tx_N}v_N\end{bmatrix}^T \begin{bmatrix}v_1\\v_2\\...\\v_N\end{bmatrix}$$

$$=\sum_{i=1}^{N}\sum_{j=1}^{N}{e^{x_j^Tx_i}v_iv_j}$$ -->
<p><span class="math display">\[X \in \mathbb{R}^{d\times N},\]</span> <span class="math display">\[\kappa(X)_{ij} = K_{SM}(x_i, x_j) = e^{x_i^Tx_j}\]</span> <span class="math display">\[ \kappa(X) = \exp{(X^TX)} \in \mathbb{R}^{N\times N}\]</span></p>
<h4 id="lemma1-xtx-in-mathbbrn-and-xxt-in-mathbbrd-are-psd">Lemma1: <span class="math inline">\(X^TX \in \mathbb{R}^N and \ XX^T \in \mathbb{R}^d\)</span> are PSD</h4>
<p>Proof:</p>
<p><span class="math display">\[v^T(X^TX)v = (Xv)^T(Xv) = y^Ty \geq 0\]</span></p>
<p><span class="math display">\[v \in \mathbb{R}^{N}\]</span></p>
<p><span class="math display">\[y = Xv \in \mathbb{R}^{d}\]</span></p>
<p>Similarly, $XX^T $ is PSD</p>
<h4 id="lemma2-xtxk-and-xxtk-k012...-are-psd.">Lemma2: <span class="math inline">\((X^TX)^k \ and \  (XX^T)^k, k=0,1,2,...\)</span> are PSD.</h4>
<p>Proof:</p>
<p>For <span class="math inline">\(k=0\)</span>, obviously <span class="math inline">\(I\)</span> is PSD.</p>
<p>From above, this holds when <span class="math inline">\(k=1\)</span>. Use mathematical induction, if this is true for <span class="math inline">\(k=n-1\)</span>, then for <span class="math inline">\(k=n\)</span> <span class="math display">\[ v^T(X^TX)^{n}v = (Xv)^T(XX^T)^{n-1}(Xv) = y^T(XX^T)^{n-1}y \geq 0\]</span> <span class="math display">\[ v\in \mathbb{R}^N, y = Xv \in \mathbb{R}^d\]</span> <span class="math display">\[ u^T(XX^T)^{n}u = (X^Tu)^T(X^TX)^{n-1}(X^Tu) = z^T(X^TX)^{n-1}z \geq 0,\  z\in \mathbb{R}^N \]</span> <span class="math display">\[ u\in \mathbb{R}^d, z=X^Tu\in \mathbb{R}^N\]</span></p>
<p>Therefore this holds for arbitrary <span class="math inline">\(k \in \{0,1,2,3...\}\)</span>.</p>
<h4 id="lemma3-matrix-exponential">Lemma3: Matrix exponential</h4>
<p>The exponential of a <span class="math inline">\(N\times N\)</span> matrix <span class="math inline">\(X\)</span> is: <span class="math display">\[e^{X} = \sum_{k=0}^{\infty}{\frac{1}{k!}X^k}\]</span></p>
<h4 id="using-results-above">Using results above,</h4>
<p><span class="math display">\[ \therefore \kappa(X) = \exp{(X^TX)} = \sum_{k=0}^{\infty}{\frac{1}{k!}(X^TX)^k}\]</span></p>
<p><span class="math display">\[ v^T\kappa(X)v = \sum_{k=0}^{\infty}{\frac{1}{k!}v^T(X^TX)^kv} \geq 0\]</span></p>
<p><span class="math inline">\(\therefore\)</span> Softmax-kernel is PSD.</p>
<h1 id="notebook-for-problem-1">Notebook for Problem 1</h1>
<h2 id="import-packages">Import packages</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> norm</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.transform <span class="keyword">import</span> Rotation <span class="keyword">as</span> R</span><br><span class="line"><span class="keyword">import</span> scipy <span class="keyword">as</span> sp</span><br></pre></td></tr></table></figure>
<h2 id="problem-1-softmax-kernel-approximators-50-points-1">Problem 1: Softmax-kernel approximators [50 points]</h2>
<h3 id="choose-two-feature-vectors-x-y-in-mathbbr20-of-unit-l_2-norm-and-with-angle-fracπ3-between-them.">Choose two feature vectors <span class="math inline">\(x, y \in \mathbb{R}^{20}\)</span> of unit <span class="math inline">\(L_2\)</span>-norm and with angle <span class="math inline">\(\frac{π}{3}\)</span> between them.</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateXY</span>(<span class="params">d = <span class="number">20</span></span>):</span></span><br><span class="line">    <span class="comment"># init X</span></span><br><span class="line">    x = np.array([<span class="number">1</span>] + [<span class="number">0</span>]*(d<span class="number">-1</span>))</span><br><span class="line">    y = np.array([<span class="number">0.5</span>, <span class="number">3</span>**<span class="number">0.5</span>/<span class="number">2</span>] + [<span class="number">0</span>]*(d<span class="number">-2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Orthogonal Matrix Q</span></span><br><span class="line">    A = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (d,d))</span><br><span class="line">    Q, _ = np.linalg.qr(A, mode = <span class="string">&#x27;complete&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x^Ty=0.5 =&gt; (Qx)^T(Qy)=0.5, where Q is orthogonal</span></span><br><span class="line">    x = np.matmul(Q, x)</span><br><span class="line">    y = np.matmul(Q, y)</span><br><span class="line">    <span class="keyword">return</span> x,y</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y = generateXY(<span class="number">20</span>)</span><br><span class="line">x, y</span><br></pre></td></tr></table></figure>
<pre><code>(array([-0.29894506, -0.66638541, -0.18786531, -0.08032163,  0.01395138,
         0.002299  ,  0.1465464 ,  0.32123403, -0.13995845,  0.17208692,
        -0.30362139, -0.20299325, -0.00676445, -0.17788199, -0.00389046,
         0.11739096,  0.13262346, -0.07173246,  0.18018864, -0.12911171]),
 array([ 0.05091238, -0.50959723,  0.39335244, -0.36683427,  0.11539508,
        -0.07330203,  0.07384118,  0.13288575, -0.47794303,  0.09279718,
        -0.08177025,  0.01269871, -0.01592124,  0.1074321 , -0.0916396 ,
         0.05875871,  0.19641505, -0.27930029,  0.14967152,  0.01007921]))</code></pre>
<p><span class="math inline">\(K_{SM}(x,y) = e^{x^Ty} = e^{0.5}\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">true_value = np.exp(np.dot(x, y))</span><br><span class="line">true_value</span><br></pre></td></tr></table></figure>
<pre><code>1.6487212707001284</code></pre>
<h3 id="consider-three-estimators-of-the-value-of-the-softmax-kernel-in-these-points-describe-in-detail-each-estimator.">Consider three estimators of the value of the softmax-kernel in these points; Describe in detail each estimator.</h3>
<ul>
<li>the regular one using independent sin/cos-random features (leveraging random feature maps for the Gaussian kernel)</li>
<li>and its two modifications: the one using Givens random rotations</li>
<li>and the one applying random Hadamard matrices (with three <strong>HD</strong>-blocks).</li>
</ul>
<h4 id="answer">Answer</h4>
<ul>
<li>Regular one:
<ul>
<li>Generate matrix <span class="math inline">\(G:N(0,I_d) \in \mathbb{R}^{m\times d}\)</span></li>
<li>caculate the norms of each row(<span class="math inline">\(|w_i|^2\sim \chi^2(d)\)</span>)</li>
<li>Map through <span class="math inline">\(G\)</span>'s <span class="math inline">\(m\)</span> rows and orthogonalize <span class="math inline">\(G\)</span>'s each <span class="math inline">\(d\times d\)</span> block(or the remainder part <span class="math inline">\((m\%d) \times d\)</span>)</li>
<li>Renormalize the orthogonalized matrix with its original row norms. <span class="math display">\[ \phi_{SM}(x) = e^{\frac{||x||^2}{2}} \frac{1}{\sqrt{m}} \begin{bmatrix}\cos(w_1^Tx)\\...\\\cos(w_m^Tx)\\\sin(w_1^Tx)\\...\\\sin(w_m^Tx) \end{bmatrix} \]</span></li>
<li>Calculate <span class="math inline">\(\phi(x)\)</span> and <span class="math inline">\(\phi(y)\)</span>, and thus <span class="math inline">\(\phi(x)^T\phi(y)\)</span></li>
</ul></li>
<li>Givens random rotations:
<ul>
<li>Generate random Givens Matrices <span class="math inline">\(\{Giv_i \in \mathbb{R}^{d\times d}\}, i=1,...,k = d\log{d}\)</span></li>
<li>Generate orthogonal <span class="math inline">\(d\times d\)</span> matrix <span class="math inline">\(G_{ort} = Giv_1,...Giv_k\)</span></li>
<li>Generate diagnoal matrix <span class="math inline">\(S\)</span> with entries <span class="math inline">\(S_{ii}\)</span> such that <span class="math inline">\(S_{ii} \sim \chi(d)\)</span></li>
<li>Renormalize <span class="math inline">\(G_{ort}\)</span> by left multiplying <span class="math inline">\(S\)</span></li>
<li>Generate several such <span class="math inline">\(G_{ort} \in \mathbb{R}^{d\times d}\)</span> and concatenate to get <span class="math inline">\(G_{ort} \in \mathbb{R}^{m\times d}\)</span></li>
<li>Apply the softmax random feature function <span class="math inline">\(\phi_{SM}\)</span> like the regular one</li>
</ul></li>
<li>Hadamard Matrices
<ul>
<li>Calculate the padded size <span class="math inline">\(d&#39; = 2^T\)</span></li>
<li>Pad the input <span class="math inline">\(x\)</span> and <span class="math inline">\(y\)</span> to dimension of <span class="math inline">\(d&#39;\)</span></li>
<li>Generate Hadamard Matrix <span class="math inline">\(H: d&#39; \times d&#39;\)</span></li>
<li>Generate 3 random diagonal "sign-flipping" matrices <span class="math inline">\(D_i\)</span></li>
<li>Generate diagnoal matrix <span class="math inline">\(S\)</span> with entries <span class="math inline">\(S_{ii}\)</span> such that <span class="math inline">\(S_{ii} \sim \chi(d&#39;)\)</span></li>
<li><span class="math inline">\(G_{ort} = S(\frac{1}{\sqrt{d&#39;}}HD_1)(\frac{1}{\sqrt{d&#39;}}HD_2)(\frac{1}{\sqrt{d&#39;}}HD_3)\)</span></li>
<li>Generate several such <span class="math inline">\(G_{ort} \in \mathbb{R}^{d&#39;\times d&#39;}\)</span> and concatenate to get <span class="math inline">\(G_{ort} \in \mathbb{R}^{m\times d&#39;}\)</span></li>
<li>Apply the softmax random feature function <span class="math inline">\(\phi_{SM}\)</span> like the regular one</li>
</ul></li>
</ul>
<h3 id="then-for-the-number-of-random-projections-m-5-10-20-30-50-100-and-each-estimator-compute-its-value-as-an-average-over-s-10-independent-trials.">Then for the number of random projections <span class="math inline">\(m = 5, 10, 20, 30, 50, 100\)</span> and each estimator, compute its value as an average over <span class="math inline">\(s = 10\)</span> independent trials.</h3>
<h4 id="estimator1-regular-one">Estimator1: Regular one</h4>
<p><span class="math display">\[ \phi_{SM}(x) = e^{\frac{||x||^2}{2}}\phi_{Gauss}(x) = e^{\frac{||x||^2}{2}} \frac{1}{\sqrt{m}} \begin{bmatrix}\cos(w_1^Tx)\\...\\\cos(w_m^Tx)\\\sin(w_1^Tx)\\...\\\sin(w_m^Tx) \end{bmatrix} \]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gram_schmidt_columns</span>(<span class="params">X</span>):</span></span><br><span class="line">    Q, R = np.linalg.qr(X)</span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">orthgonalize</span>(<span class="params">V</span>):</span></span><br><span class="line">    N = V.shape[<span class="number">0</span>]</span><br><span class="line">    d = V.shape[<span class="number">1</span>]</span><br><span class="line">    turns = int(N/d)</span><br><span class="line">    remainder = N%d</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#V =  np.random.normal(size=[(turns+1)*d, d])</span></span><br><span class="line">    <span class="comment">#V =  np.random.normal(size =[N, d])</span></span><br><span class="line">    <span class="comment">#print(V.shape)</span></span><br><span class="line">    V_ = np.zeros_like(V)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(turns):</span><br><span class="line">        v = gram_schmidt_columns(V[i*d:(i+<span class="number">1</span>)*d, :].T).T</span><br><span class="line">        V_[i*d:(i+<span class="number">1</span>)*d, :] = v</span><br><span class="line">    <span class="keyword">if</span> remainder != <span class="number">0</span>:</span><br><span class="line">        V_[turns*d:,:] = gram_schmidt_columns(V[turns*d:,:].T).T</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> V_</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateGMatrix</span>(<span class="params">m = <span class="number">5</span>, d = <span class="number">20</span></span>) -&gt; np.array:</span></span><br><span class="line">    G = np.random.normal(<span class="number">0</span>,<span class="number">1</span>, (m,d))</span><br><span class="line">    <span class="comment"># Renormalize</span></span><br><span class="line">    norms = np.linalg.norm(G, axis=<span class="number">1</span>).reshape([m,<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> orthgonalize(G) * norms</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Softmax with sin/cos random features</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseline_SM</span>(<span class="params">x, G, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Calculate the result of baseline random feature mapping</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Parameters</span></span><br><span class="line"><span class="string">        ----------</span></span><br><span class="line"><span class="string">        x: array, dimension = d</span></span><br><span class="line"><span class="string">            The data point to input to the baseline mapping</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        G: matrix, dimension = m*d</span></span><br><span class="line"><span class="string">            The matrix in the baseline random feature mapping</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        m: integer</span></span><br><span class="line"><span class="string">            The number of dimension that we want to reduce to</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    left = np.cos(np.dot(G, x).astype(np.float32))</span><br><span class="line">    right = np.sin(np.dot(G, x).astype(np.float32))</span><br><span class="line">    <span class="keyword">return</span> np.exp( (np.linalg.norm(x))**<span class="number">2</span> / <span class="number">2</span>) * ((<span class="number">1</span>/m)**<span class="number">0.5</span>) * np.append(left, right)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseline_SM_approximation</span>(<span class="params">x, y, m, d=<span class="number">20</span>, s=<span class="number">10</span></span>):</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(s):</span><br><span class="line">        G = generateGMatrix(m=m, d=d)</span><br><span class="line">        phi_x = baseline_SM(x, G, m)</span><br><span class="line">        phi_y = baseline_SM(y, G, m)</span><br><span class="line">        xTy = np.dot(phi_x, phi_y)</span><br><span class="line">        sum += xTy</span><br><span class="line">    <span class="keyword">return</span> sum / s</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr_m = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">100</span>]</span><br><span class="line">arr_estimation = [baseline_SM_approximation(x, y, i, <span class="number">20</span>, <span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> arr_m]</span><br><span class="line">arr_estimation</span><br></pre></td></tr></table></figure>
<pre><code>[1.8072113811969757,
 1.69626122713089,
 1.6249037623405456,
 1.670891809463501,
 1.6728131294250488,
 1.640375828742981]</code></pre>
<h4 id="estimator2-givens-random-rotations">Estimator2: Givens random rotations</h4>
<p><span class="math inline">\(G_{ort} = Giv_1,...Giv_k, k=O(d\log{d})\)</span></p>
<p><span class="math inline">\(Giv_i \in \mathbb{R}^{d\times d}\)</span></p>
<p><img src="https://www.zhihu.com/equation?tex=G%28i%2Cj%2C%5Ctheta%29+%3D++%5Cbegin%7Bbmatrix%7D+1+%26+%5Cdots+%26+0+%26+%5Cdots+%26+0+%26+%5Cdots+%26+0%5C%5C+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots%5C%5C+0+%26+%5Cdots+%26+cos%5Ctheta+%26+%5Cdots+%26+sin%5Ctheta+%26+%5Cdots+%26+0%5C%5C+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots%5C%5C+0+%26+%5Cdots+%26+-sin%5Ctheta+%26+%5Cdots+%26+cos%5Ctheta+%26+%5Cdots+%26+0%5C%5C+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots+%26+%5Cddots+%26+%5Cvdots%5C%5C+0+%26+%5Cdots+%26+0+%26+%5Cdots+%26+0+%26+%5Cdots+%26+1%5C%5C+%5Cend%7Bbmatrix%7D+%5Ctag%7B8%7D" /></p>
<p><img src="https://www.zhihu.com/equation?tex=%5Cbegin%7Baligned%7D+i+%26%3C+j+%5C%5C+G_%7Bi%2Ci%7D+%26%3D+c%5C%5C+G_%7Bj%2Cj%7D+%26%3D+c%5C%5C+G_%7Bi%2Cj%7D+%26%3D+s%5C%5C+G_%7Bj%2Ci%7D+%26%3D+-s%5C%5C+G_%7Bk%2Ck%7D+%26%3D+1%2C%5C+for%5C+k%5Cne+i%5C+or%5C+j%5C%5C+G_%7Bt%2Cs%7D+%26%3D+0%2C%5C+otherwise+%5Cend%7Baligned%7D+%5Ctag%7B9%7D" /></p>
<p><a href="http://papers.nips.cc/paper/6246-orthogonal-random-features.pdf">Orthogonal Random Features</a></p>
<p>The idea of Orthogonal Random Features (ORF) is to impose orthogonality on the matrix on the linear transformation matrix <span class="math inline">\(G\)</span>. Note that one cannot achieve unbiased kernel estimation by simply replacing <span class="math inline">\(G\)</span> by an orthogonal matrix, since the norms of the rows of <span class="math inline">\(G\)</span> follow the -distribution, while rows of an orthogonal matrix have the unit norm. The linear transformation matrix of ORF has the following form <span class="math display">\[W_{ORF} = \frac{1}{\sigma}
SQ\]</span> where <span class="math inline">\(Q\)</span> is a uniformly distributed random orthogonal matrix. The set of rows of <span class="math inline">\(Q\)</span> forms a bases in <span class="math inline">\(R^d\)</span>. <span class="math inline">\(S\)</span> is a diagonal matrix, with diagonal entries sampled i.i.d. from the <span class="math inline">\(\chi\)</span>-distribution</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateGiv</span>(<span class="params">d</span>):</span></span><br><span class="line">    Giv = np.identity(d)</span><br><span class="line">    i = np.random.randint(<span class="number">0</span>, d<span class="number">-1</span>)</span><br><span class="line">    j = np.random.randint(i+<span class="number">1</span>, d)</span><br><span class="line">    theta = np.random.uniform(<span class="number">0</span>, <span class="number">2</span>*np.pi)</span><br><span class="line">    c = np.cos(theta)</span><br><span class="line">    s = np.sin(theta)</span><br><span class="line">    Giv[i,i] = c</span><br><span class="line">    Giv[j,j] = c</span><br><span class="line">    Giv[i,j] = s</span><br><span class="line">    Giv[j, i] = -s</span><br><span class="line">    <span class="keyword">return</span> Giv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateS</span>(<span class="params">d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np.diag(np.sqrt(np.random.chisquare(d, (d))))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Givens_generateGort_dd</span>(<span class="params">d</span>):</span></span><br><span class="line">    k = int(d * np.log(d))</span><br><span class="line">    Gort_dd = generateGiv(d)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k<span class="number">-1</span>):</span><br><span class="line">        Gort_dd = np.matmul(Gort_dd, generateGiv(d))</span><br><span class="line">    <span class="keyword">return</span> np.matmul(generateS(d), Gort_dd)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Givens_generateGort_md</span>(<span class="params">m, d</span>):</span></span><br><span class="line">    arr_Gort_dd = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m//d + <span class="number">1</span>):</span><br><span class="line">        arr_Gort_dd.append(Givens_generateGort_dd(d)) <span class="comment"># (m//d+1, d, d)</span></span><br><span class="line">    Gort_md = np.concatenate(arr_Gort_dd, axis=<span class="number">0</span>)</span><br><span class="line">    Gort_md = Gort_md[:m, :]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Gort_md</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GivensRandomRotations_SM_approximation</span>(<span class="params">x, y, m, d=<span class="number">20</span>, s=<span class="number">10</span></span>):</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(s):</span><br><span class="line">        G = Givens_generateGort_md(m,<span class="number">20</span>)</span><br><span class="line">        phi_x = baseline_SM(x, G, m)</span><br><span class="line">        phi_y = baseline_SM(y, G, m)</span><br><span class="line">        xTy = np.dot(phi_x, phi_y)</span><br><span class="line">        sum += xTy</span><br><span class="line">    <span class="keyword">return</span> sum / s</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr_m = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">100</span>]</span><br><span class="line">arr_estimation = [GivensRandomRotations_SM_approximation(x, y, i, <span class="number">20</span>, <span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> arr_m]</span><br><span class="line">arr_estimation</span><br></pre></td></tr></table></figure>
<pre><code>[1.3707373946905137,
 1.7438804149627685,
 1.6728084802627563,
 1.7161020755767822,
 1.689209222793579,
 1.6569807291030885]</code></pre>
<h4 id="estimator3-hadamard-matriceswith-3-hd-blocks">Estimator3: Hadamard matrices(with 3 HD-blocks)</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hadamard</span>(<span class="params">d</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;return: Hadamard matrix of shape(2^d, 2^d)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> d==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> np.ones((<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ul = Hadamard(d<span class="number">-1</span>)</span><br><span class="line">        ur = Hadamard(d<span class="number">-1</span>)</span><br><span class="line">        bl = Hadamard(d<span class="number">-1</span>)</span><br><span class="line">        br = -Hadamard(d<span class="number">-1</span>)</span><br><span class="line">        u = np.concatenate((ul,ur),axis=<span class="number">1</span>)</span><br><span class="line">        b = np.concatenate((bl,br),axis=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> np.concatenate((u,b),axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalized_Hadamard</span>(<span class="params">d</span>):</span></span><br><span class="line">    H = Hadamard(d)</span><br><span class="line">    norms = np.linalg.norm(H, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> H / norms</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateDi</span>(<span class="params">d</span>):</span></span><br><span class="line">    D_i = np.diag([np.random.choice([<span class="number">1</span>, <span class="number">-1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, d+<span class="number">1</span>)])</span><br><span class="line">    <span class="keyword">return</span> D_i</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Uncomment to get Structured Orthogonal Random Features (SORF) solution</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hadamard_generateGort_dd</span>(<span class="params">d</span>):</span> </span><br><span class="line">    t = np.ceil(np.log2(d)).astype(int)</span><br><span class="line">    d_ = <span class="number">2</span>**t</span><br><span class="line">    <span class="comment"># H = normalized_Hadamard(t)</span></span><br><span class="line">    H = Hadamard(t)</span><br><span class="line">    Gort_dd = np.identity(d_)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="comment"># Gort_dd = np.matmul(Gort_dd ,np.matmul(H, generateDi(d_)))</span></span><br><span class="line">        Gort_dd = np.matmul(Gort_dd ,np.matmul(<span class="number">1</span> / np.sqrt(d_) * H, generateDi(d_)))</span><br><span class="line">    <span class="comment"># return np.sqrt(d_)*Gort_dd</span></span><br><span class="line">    <span class="keyword">return</span> np.matmul(generateS(d_), Gort_dd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hadamard_generateGort_md</span>(<span class="params">m, d</span>):</span></span><br><span class="line">    t = np.floor(np.log2(d)).astype(int) + <span class="number">1</span></span><br><span class="line">    d_ = <span class="number">2</span>**t</span><br><span class="line">    arr_Gort_dd = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m//d_ + <span class="number">1</span>):</span><br><span class="line">        arr_Gort_dd.append(Hadamard_generateGort_dd(d))</span><br><span class="line">    Gort_md = np.concatenate(arr_Gort_dd, axis=<span class="number">0</span>)</span><br><span class="line">    Gort_md = Gort_md[:m, :]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Gort_md</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Hadamard_SM_approximation</span>(<span class="params">x, y, m, d=<span class="number">20</span>, s=<span class="number">10</span></span>):</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(s):</span><br><span class="line">        G = Hadamard_generateGort_md(m,<span class="number">20</span>)</span><br><span class="line">        d_ = G.shape[<span class="number">1</span>]</span><br><span class="line">        x_padded = np.pad(x, (<span class="number">0</span>, d_-d))</span><br><span class="line">        y_padded = np.pad(y, (<span class="number">0</span>, d_-d))</span><br><span class="line">        phi_x = baseline_SM(x_padded, G, m)</span><br><span class="line">        phi_y = baseline_SM(y_padded, G, m)</span><br><span class="line">        xTy = np.dot(phi_x, phi_y)</span><br><span class="line">        sum += xTy</span><br><span class="line">    <span class="keyword">return</span> sum / s</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr_m = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">100</span>]</span><br><span class="line">arr_estimation = [Hadamard_SM_approximation(x, y, i, <span class="number">20</span>, <span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> arr_m]</span><br><span class="line">arr_estimation</span><br></pre></td></tr></table></figure>
<pre><code>[1.7086819410324097,
 1.617677903175354,
 1.6517545461654664,
 1.645971429347992,
 1.6519848704338074,
 1.6540889978408813]</code></pre>
<h3 id="propose-how-to-use-those-trials-to-compute-empirical-mean-squared-error-for-each-estimator.">Propose how to use those trials to compute empirical mean squared error for each estimator.</h3>
<h4 id="answer-1">Answer</h4>
<ul>
<li>The true value: <span class="math inline">\(K_{SM}(x,y) = e^{x^Ty} = e^{0.5}\)</span></li>
<li>For each <span class="math inline">\(m\)</span>, run 10 trials. <span class="math display">\[MSE = \frac{\sum_{i=1}^{10}{(est_i - e^{0.5}})^2}{10}\]</span></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MSE_iid</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    SM_approximation=Hadamard_SM_approximation,</span></span></span><br><span class="line"><span class="function"><span class="params">    episode=<span class="number">1</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">    epoch=<span class="number">10</span>, </span></span></span><br><span class="line"><span class="function"><span class="params">    arr_m=[<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">100</span>],</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>):</span></span><br><span class="line"></span><br><span class="line">    estimation = np.zeros((len(arr_m), episode, epoch))</span><br><span class="line">    MSE_iid = []</span><br><span class="line">    list_of_samples = []</span><br><span class="line"></span><br><span class="line">    x, y = generateXY(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for e in tqdm(range(episode), position=0, leave=True):</span></span><br><span class="line">    <span class="comment">#     x, y = generateXY(20)</span></span><br><span class="line">    <span class="comment">#     true_value = np.exp(0.5)</span></span><br><span class="line">    <span class="comment">#     list_of_samples.append((x, y))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(arr_m)):</span><br><span class="line">        mse_m = []</span><br><span class="line">        m = arr_m[n]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> tqdm(range(episode), position=<span class="number">0</span>, leave=<span class="literal">True</span>):        </span><br><span class="line">            <span class="comment"># x = list_of_samples[e][0]</span></span><br><span class="line">            <span class="comment"># y = list_of_samples[e][1]</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(epoch):</span><br><span class="line">                np.random.seed()</span><br><span class="line">                estimation[n, e, i] = SM_approximation(x, y, m, d=<span class="number">20</span>, s=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            mse_m.append(mean_squared_error(np.repeat(true_value, epoch), estimation[n, e])) <span class="comment"># compare 10 values</span></span><br><span class="line">        </span><br><span class="line">        MSE_iid.append(mse_m)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> estimation.mean(axis=(<span class="number">1</span>,<span class="number">2</span>)) ,MSE_iid</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">estimation_regular, MSE_iid_regular = MSE_iid(SM_approximation=baseline_SM_approximation)</span><br><span class="line">df_MSE_Regular = pd.DataFrame(MSE_iid_regular, index = arr_m, columns = [<span class="string">&quot;Regular&quot;</span>])</span><br><span class="line">df_estimation_Regular = pd.DataFrame(estimation_regular, index = arr_m, columns = [<span class="string">&quot;Regular&quot;</span>])</span><br></pre></td></tr></table></figure>
<pre><code>100%|██████████| 1/1 [00:00&lt;00:00, 101.45it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 119.49it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 95.60it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 112.89it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 89.43it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 74.54it/s]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">estimation_Givens, MSE_iid_Givens = MSE_iid(SM_approximation=GivensRandomRotations_SM_approximation)</span><br><span class="line">df_MSE_Givens = pd.DataFrame(MSE_iid_Givens, index = arr_m, columns = [<span class="string">&quot;GivensRotation&quot;</span>])</span><br><span class="line">df_estimation_Givens = pd.DataFrame(estimation_Givens, index = arr_m, columns = [<span class="string">&quot;GivensRotation&quot;</span>])</span><br></pre></td></tr></table></figure>
<pre><code>100%|██████████| 1/1 [00:00&lt;00:00, 25.62it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 30.17it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 13.01it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 16.68it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 14.39it/s]
100%|██████████| 1/1 [00:00&lt;00:00,  6.19it/s]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">estimation_Hadamard, MSE_iid_Hadamard = MSE_iid(SM_approximation=Hadamard_SM_approximation)</span><br><span class="line">df_MSE_Hadamard = pd.DataFrame(MSE_iid_Hadamard, index = arr_m, columns = [<span class="string">&quot;Hadamard&quot;</span>])</span><br><span class="line">df_estimation_Hadamard = pd.DataFrame(estimation_Hadamard, index = arr_m, columns = [<span class="string">&quot;Hadamard&quot;</span>])</span><br></pre></td></tr></table></figure>
<pre><code>100%|██████████| 1/1 [00:00&lt;00:00, 12.08it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 11.96it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 12.45it/s]
100%|██████████| 1/1 [00:00&lt;00:00, 12.02it/s]
100%|██████████| 1/1 [00:00&lt;00:00,  7.46it/s]
100%|██████████| 1/1 [00:00&lt;00:00,  3.86it/s]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_MSE_total = pd.concat([df_MSE_Regular, df_MSE_Givens, df_MSE_Hadamard], axis=<span class="number">1</span>)</span><br><span class="line">df_estimation_total = pd.concat([df_estimation_Regular, df_estimation_Givens, df_estimation_Hadamard], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_MSE_total</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
Regular
</th>
<th>
GivensRotation
</th>
<th>
Hadamard
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
5
</th>
<td>
0.172311
</td>
<td>
0.188588
</td>
<td>
0.162290
</td>
</tr>
<tr>
<th>
10
</th>
<td>
0.066876
</td>
<td>
0.065423
</td>
<td>
0.077146
</td>
</tr>
<tr>
<th>
20
</th>
<td>
0.007488
</td>
<td>
0.017989
</td>
<td>
0.032074
</td>
</tr>
<tr>
<th>
30
</th>
<td>
0.020978
</td>
<td>
0.027808
</td>
<td>
0.007083
</td>
</tr>
<tr>
<th>
50
</th>
<td>
0.011074
</td>
<td>
0.003390
</td>
<td>
0.004394
</td>
</tr>
<tr>
<th>
100
</th>
<td>
0.001614
</td>
<td>
0.001725
</td>
<td>
0.001746
</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_estimation_total</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
Regular
</th>
<th>
GivensRotation
</th>
<th>
Hadamard
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
5
</th>
<td>
1.709679
</td>
<td>
1.735700
</td>
<td>
1.481327
</td>
</tr>
<tr>
<th>
10
</th>
<td>
1.560758
</td>
<td>
1.708040
</td>
<td>
1.657001
</td>
</tr>
<tr>
<th>
20
</th>
<td>
1.659077
</td>
<td>
1.617314
</td>
<td>
1.574311
</td>
</tr>
<tr>
<th>
30
</th>
<td>
1.615470
</td>
<td>
1.572253
</td>
<td>
1.635823
</td>
</tr>
<tr>
<th>
50
</th>
<td>
1.603345
</td>
<td>
1.656838
</td>
<td>
1.642844
</td>
</tr>
<tr>
<th>
100
</th>
<td>
1.617124
</td>
<td>
1.648726
</td>
<td>
1.638272
</td>
</tr>
</tbody>
</table>
</div>
<h3 id="prepare-plots-where-on-x-axis-you-put-the-number-of-random-projections-m-used-and-on-the-y-axis-the-average-value-of-the-estimator.-show-also-computed-mean-squared-error-in-the-form-of-the-error-bars">Prepare plots where on x-axis you put the number of random projections m used and on the y-axis the average value of the estimator. Show also computed mean squared error in the form of the error-bars</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set_style(<span class="string">&quot;darkgrid&quot;</span>)    </span><br><span class="line">df_estimation_total.plot(</span><br><span class="line">    kind = <span class="string">&#x27;line&#x27;</span>, </span><br><span class="line">    title = <span class="string">&#x27;Softmax-kernel approximators comparison&#x27;</span>, </span><br><span class="line">    grid=<span class="literal">True</span>, </span><br><span class="line">    legend=[df_estimation_total.columns],</span><br><span class="line">    xlabel=<span class="string">&#x27;m&#x27;</span>, </span><br><span class="line">    ylabel=<span class="string">&#x27;Average of Estimation&#x27;</span>,</span><br><span class="line">    figsize = (<span class="number">12</span>,<span class="number">8</span>),</span><br><span class="line">    yerr=df_MSE_total,</span><br><span class="line">    )</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/05/Data-Mining-HW1/DataMining_HW1_39_0.png" /></p>
]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Data-Mining-Lec5</title>
    <url>/2020/10/07/Data-Mining-Lec5/</url>
    <content><![CDATA[<h2 id="transformers"><a class="markdownIt-Anchor" href="#transformers"></a> Transformers</h2>
<p><strong>&quot;Attention is all you need&quot;</strong></p>
<h3 id="attention-block"><a class="markdownIt-Anchor" href="#attention-block"></a> Attention Block</h3>
<p>a sequence of feature vectors <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>L</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>L</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">X = [x_1, ... x_L]^T \in \mathbb{R}^{L\times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span> are fed into an attention block.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>Q</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>K</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>V</mi></msub></mrow><annotation encoding="application/x-tex">W_Q, W_K, W_V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi><mo>=</mo><mi>X</mi><msub><mi>W</mi><mi>Q</mi></msub><mo separator="true">,</mo><mi>K</mi><mo>=</mo><mi>X</mi><msub><mi>W</mi><mi>K</mi></msub><mo separator="true">,</mo><mi>V</mi><mo>=</mo><mi>X</mi><msub><mi>W</mi><mi>V</mi></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>L</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">Q=XW_Q, K=XW_K, V=XW_V \in \mathbb{R}^{L\times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.328331em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><msup><mi>e</mi><mfrac><mrow><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup></mrow><msqrt><mi>d</mi></msqrt></mfrac></msup><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>L</mi><mo>×</mo><mi>L</mi></mrow></msup></mrow><annotation encoding="application/x-tex">A = e^{\frac{QK^T}{\sqrt{d}}}\in \mathbb{R}^{L\times L}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.410635em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3715350000000002em;"><span style="top:-3.5042em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2390500000000002em;"><span style="top:-2.5066107142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.937845em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mathdefault mtight">d</span></span></span><span style="top:-2.8978450000000002em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.102155em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.4623857142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">Q</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0873300000000001em;"><span style="top:-3.0873299999999997em;margin-right:0.1em;"><span class="pstrut" style="height:2.6833299999999998em;"></span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5663571428571429em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">L</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>Elementwise exponential.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>V</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mrow><mi>L</mi><mo>×</mo><mi>d</mi></mrow></msup></mrow><annotation encoding="application/x-tex">AV \in \mathbb{R}^{L\times d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbb">R</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="residual-connection"><a class="markdownIt-Anchor" href="#residual-connection"></a> Residual Connection</h3>
<p>Skip connection, ResNet layer, (<strong>Residual connection</strong>), <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>+</mo><mi>f</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X + f(X)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span> where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> here is the attention block.</p>
<p>The adavantage of using Residual connection,…</p>
<p>Dynamical System: Initial condition as 0, revolutions,</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>d</mi><mi>x</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{dx}{dt} = F(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>: neural ODEs</p>
<h3 id="layernorm"><a class="markdownIt-Anchor" href="#layernorm"></a> LayerNorm</h3>
<p>After the attention block and skip connection, there is another <strong>LayerNorm</strong> layer. This normalization normalizes each input <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>L</mi></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup><mo>→</mo><mo stretchy="false">[</mo><mover accent="true"><msub><mi>x</mi><mi>i</mi></msub><mo>^</mo></mover><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">X = [x_1, ..., x_L]^T \to [\hat{x_i}...]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>x</mi><mi>i</mi></msub><mo>^</mo></mover><mo>=</mo><mfrac><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mfrac><mn>1</mn><mi>d</mi></mfrac><mrow><mi>j</mi><mo>=</mo><mi>i</mi></mrow></msub><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><mrow><mi>s</mi><mi>t</mi><mi>d</mi><mi>d</mi><mi>e</mi><mi>v</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">[</mo><mi>d</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\hat{x_i} = \frac{x_i - \frac{1}{d}_{j=i}x_i[j]}{stddev(x_1[1],...x_1[d])} 
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.7019159999999998em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7659159999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.920808em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.06696400000000002em;"><span style="top:-2.3053000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.530808em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>Other forms of norm: batch norm, …</p>
<h3 id="mlp"><a class="markdownIt-Anchor" href="#mlp"></a> MLP</h3>
<p>After the layernorm, we get <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>X</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{X}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9467699999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span></span></span></span></span></span></span>. Then it goes to multiple <strong>MLP</strong>s (<strong>MultiLayerPerceptron</strong>)</p>
<p>Perceptron: some computation unit. It takes some inputs <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>3</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>4</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">y_1, y_2, y_3, y_4...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>. Each channel has different weights<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>w</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">w_1, w_2, ...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>. The percepetron calculates the weighted sum <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mrow><msub><mi>w</mi><mi>i</mi></msub><msub><mi>y</mi><mi>i</mi></msub></mrow></mrow><annotation encoding="application/x-tex">\sum{w_iy_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span> and applies some nonlinear mapping <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mo>∑</mo><mrow><msub><mi>w</mi><mi>i</mi></msub><msub><mi>y</mi><mi>i</mi></msub></mrow><mo stretchy="false">)</mo><mo>:</mo><mi>R</mi><mo>→</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">\sigma(\sum{w_iy_i}): R \to R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span>.</p>
<p>Some examples of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span>:<br />
Sigmoid: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma(x) = \frac{1}{1+e^{-x}} \in [0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>tanh</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\tanh(x) = \frac{e^x-e^{-x}}{e^x+e^{-x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">tanh</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3906960000000002em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.987365em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5935428571428571em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8476642857142858em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>: resized version of sigmoid</p>
<p>Relu(rectified linear unit):</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mo>≤</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">y = \begin{cases} x, x&gt;0 \\ 0, x\leq 0 \end{cases}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<h3 id="multilayer-how-to-organize-perceptrons"><a class="markdownIt-Anchor" href="#multilayer-how-to-organize-perceptrons"></a> Multilayer: How to organize perceptrons</h3>
<ul>
<li>
<p>neurons in layer i broadcast signal to neurons in layer i+1.</p>
</li>
<li>
<p>weights of connections are learned(through optimizing)</p>
</li>
<li>
<p>Paralellization of different MLPs and finally layernorm</p>
</li>
</ul>
<h2 id="positive-random-features-for-softmax-and-gaussian-kernels"><a class="markdownIt-Anchor" href="#positive-random-features-for-softmax-and-gaussian-kernels"></a> Positive random features for softmax and gaussian kernels</h2>
<p>Valari Likhoshevstov</p>
<p>Attention matrix: A</p>
<p>A: rows q, columns k</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msup><mi>e</mi><mrow><msub><mi>q</mi><mi>i</mi></msub><msubsup><mi>k</mi><mi>j</mi><mi>T</mi></msubsup></mrow></msup></mrow><annotation encoding="application/x-tex">A_{ij} = e^{q_ik_j^T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.048535em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.048535em;"><span style="top:-3.10517em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42488571428571426em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>renormalization:</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>A</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>^</mo></mover><mo>=</mo><mfrac><msup><mi>e</mi><mrow><msub><mi>q</mi><mi>i</mi></msub><msubsup><mi>k</mi><mi>j</mi><mi>T</mi></msubsup></mrow></msup><mrow><munderover><mo>∑</mo><mrow><mi>s</mi><mo>=</mo><mn>1</mn></mrow><mi>L</mi></munderover><msup><mi>e</mi><mrow><msub><mi>q</mi><mi>i</mi></msub><msubsup><mi>k</mi><mi>s</mi><mi>T</mi></msubsup></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\hat{A_{ij}} = \frac{e^{q_ik_j^T}}{\sum_{s=1}^{L}{e^{q_ik_s^T}}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.232878em;vertical-align:-0.286108em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.896476em;vertical-align:-1.170941em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.725535em;"><span style="top:-2.1773040000000004em;"><span class="pstrut" style="height:3.048535em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8498149999999999em;"><span style="top:-3.00795em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7740928571428571em;"><span style="top:-2.214em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">s</span></span></span><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.278535em;"><span class="pstrut" style="height:3.048535em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7255350000000003em;"><span class="pstrut" style="height:3.048535em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.048535em;"><span style="top:-3.10517em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42488571428571426em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.170941em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>e</mi><mrow><msub><mi>q</mi><mi>i</mi></msub><msubsup><mi>k</mi><mi>j</mi><mi>T</mi></msubsup></mrow></msup><mo>=</mo><mi>S</mi><mi>M</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>k</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">[</mo><mi>ϕ</mi><mo stretchy="false">(</mo><msub><mi>q</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>ϕ</mi><mo stretchy="false">(</mo><msub><mi>k</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">e^{q_ik_j^T} = SM(q_i, k_j) = E[\phi(q_i)\phi(k_j)]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.056365em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.056365em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9190928571428572em;"><span style="top:-2.214em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42488571428571426em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">[</span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></p>
<p>where</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mover><mo><mo>=</mo></mo><mrow><mi>d</mi><mi>e</mi><mi>f</mi></mrow></mover><msup><mi>e</mi><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></msup><mfrac><mn>1</mn><msqrt><mi>m</mi></msqrt></mfrac><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\phi(x)\stackrel{def}{=} e^{\frac{||x||^2}{2}} \frac{1}{\sqrt{m}} \begin{bmatrix}\cos(w_1^Tx)\\...\\\cos(w_m^Tx)\\\sin(w_1^Tx)\\...\\\sin(w_m^Tx) \end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.450086em;vertical-align:-0.25em;"></span><span class="mord mathdefault">ϕ</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mop op-limits"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.200086em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">=</span></span></span><span style="top:-3.613978em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:7.208652000000001em;vertical-align:-3.3526620000000005em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">m</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9300000000000002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8559900000000003em;"><span style="top:-0.44997000000000076em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.6049700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.2059700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.8069700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.4079700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.008970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.609970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.85599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500499999999995em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8526620000000005em;"><span style="top:-6.011331000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-4.811331em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-3.6100000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-2.408669em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-1.2086690000000002em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-0.007337999999999567em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3526620000000005em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.8559900000000003em;"><span style="top:-0.44997000000000076em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.6049700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.2059700000000007em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.8069700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.4079700000000006em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.008970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.609970000000001em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.85599em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.3500499999999995em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>w</mi><mi>m</mi></msub><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>I</mi><mi>d</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w_i, ...w_m \sim N(0, I_d)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>small value matters: error. Renormalize helps smaller values become accurate.</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>S</mi><mi>E</mi><mo stretchy="false">(</mo><msubsup><mover accent="true"><mrow><mi>S</mi><mi>M</mi></mrow><mo>^</mo></mover><mi>m</mi><mrow><mi>t</mi><mi>r</mi><mi>i</mi><mi>g</mi></mrow></msubsup><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><mi>e</mi><mi>x</mi><mi>p</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>+</mo><mi>y</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mi>S</mi><msup><mi>M</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>exp</mi><mo>⁡</mo><mo stretchy="false">(</mo><mo>−</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mo>−</mo><mi>y</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">MSE(\hat{SM}_m^{trig}(x,y)) = \frac{1}{2m} exp(||x+y||^2)SM^{-2}(x,y)\times (1-\exp(-||x-y||^2))^2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4113339999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1613339999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.3996700000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">exp</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>M</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>E</mi><mrow><mi>ω</mi><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>I</mi><mi>d</mi></msub><mo stretchy="false">)</mo></mrow></msub><mo stretchy="false">[</mo><mi>exp</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mi>w</mi><mi>T</mi></msup><mi>x</mi><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo><mi>exp</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mi>w</mi><mi>T</mi></msup><mi>y</mi><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">SM(x,y) = E_{\omega \sim N(0, I_d)}[\exp(w^Tx - \frac{||x||^2}{2})\exp(w^Ty - \frac{||y||^2}{2})]
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2465309999999998em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mrel mtight">∼</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mopen mtight">(</span><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.07847em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mop">exp</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">exp</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>ϕ</mi><mi>m</mi><mo>+</mo></msubsup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><mn>2</mn></mfrac></mrow></msup><mfrac><mn>1</mn><msqrt><mi>m</mi></msqrt></mfrac><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>exp</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mn>1</mn><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>exp</mi><mo>⁡</mo><mo stretchy="false">(</mo><msubsup><mi>w</mi><mi>m</mi><mi>T</mi></msubsup><mi>x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\phi_m^{+}(x) = e^{-\frac{||x||^2}{2}}\frac{1}{\sqrt{m}}\begin{bmatrix}\exp(w_1^Tx)\\...\\\exp(w_m^Tx) \end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0713309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6026619999999996em;vertical-align:-1.5513309999999998em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2886700000000002em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.250957142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mtight">∣</span><span class="mord mathdefault mtight">x</span><span class="mord mtight">∣</span><span class="mord mtight"><span class="mord mtight">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.04844em;"><span style="top:-3.04844em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.30972em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">m</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9300000000000002em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.051331em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">exp</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.8086690000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">exp</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5513309999999998em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>M</mi></mrow><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><msubsup><mo stretchy="false">)</mo><mi>m</mi><mo>+</mo></msubsup><mo>=</mo><msubsup><mi>ϕ</mi><mi>m</mi><mo>+</mo></msubsup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msubsup><mi>ϕ</mi><mi>m</mi><mo>+</mo></msubsup><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">\hat{SM}(x,y)^{+}_{m} = \phi_m^{+}(x)(\phi_m^{+}(y))^T
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8213309999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="key-difference-btw-hatsmxytrig_m-and-hatsmxy_m"><a class="markdownIt-Anchor" href="#key-difference-btw-hatsmxytrig_m-and-hatsmxy_m"></a> Key difference btw: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>M</mi></mrow><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><msubsup><mo stretchy="false">)</mo><mi>m</mi><mrow><mi>t</mi><mi>r</mi><mi>i</mi><mi>g</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">\hat{SM}(x,y)^{trig}_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>M</mi></mrow><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><msubsup><mo stretchy="false">)</mo><mi>m</mi><mo>+</mo></msubsup></mrow><annotation encoding="application/x-tex">\hat{SM}(x,y)^{+}_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></h3>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>M</mi></mrow><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><msubsup><mo stretchy="false">)</mo><mi>m</mi><mrow><mi>t</mi><mi>r</mi><mi>i</mi><mi>g</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">\hat{SM}(x,y)^{trig}_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> becomes arbitrarily accurate as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>→</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x\to y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mrow><mi>S</mi><mi>M</mi></mrow><mo>^</mo></mover><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><msubsup><mo stretchy="false">)</mo><mi>m</mi><mo>+</mo></msubsup></mrow><annotation encoding="application/x-tex">\hat{SM}(x,y)^{+}_{m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19677em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9467699999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> becomes … as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>M</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>→</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">SM(x,y) \to 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li>
</ul>
]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>谈判案例模拟：Leckenby Company</title>
    <url>/2020/10/09/%E8%B0%88%E5%88%A4%E6%A1%88%E4%BE%8B%E6%A8%A1%E6%8B%9F%EF%BC%9ALeckenby-Company/</url>
    <content><![CDATA[<h1 id="概述">概述</h1>
<p>Managerial Negotiation 第五周的案例，强调了在谈判前要发现双方共同利益、maximize value creation。在本案例情境中，谈判轮数增加会导致双方可变成本增加，且谈判核心-<span class="math inline">\(w\)</span>值的增加会导致双方总福利的降低。在设计本模拟工具时也考虑了两种情况：</p>
<ul>
<li>君子条约: 在罢工（即造成双方成本增加）开始前确定<span class="math inline">\(w\)</span>在 <span class="math inline">\(0.5-0.52\)</span> 范围内，对两者较为公平且最大化总价值</li>
<li>消耗战(War of Attrition): 通过模拟发现作为Kunzler(希望w小)，利用前两轮压价、第三轮结束通常能获得最好结果，但该结果仍比君子条约差；作为Arnold(希望w大)，第六轮后结果比君子条约差，但在此之前有较大的议价空间。没有达成君子条约默契并消耗至第六轮，最终结果<span class="math inline">\(w\)</span>通常在0.6左右，Arnold小赚而Kunzler较亏</li>
</ul>
<p>针对消耗战情况，又设计了一个函数<code>find_Case</code>来针对当前已知信息（轮数，己方出价，对方出价），找出一个模拟情况，从而对未来局势有所判断。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_Case</span>(<span class="params">round, w_K, w_A</span>)</span></span><br></pre></td></tr></table></figure>
<h1 id="案例材料">案例材料</h1>
<div class="pdfobject-container" data-target="./Leckenby_Company1.pdf" data-height="1000px"></div>
<hr />
<h1 id="代码部分">代码部分</h1>
<h1 id="import">Import</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> spst</span><br></pre></td></tr></table></figure>
<h1 id="simulation1">Simulation1</h1>
<h2 id="distribution-triangular001">Distribution: triangular(0,0,1)</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">h = plt.hist(np.random.triangular(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10000</span>),bins = <span class="number">200</span>, density=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/09/%E8%B0%88%E5%88%A4%E6%A1%88%E4%BE%8B%E6%A8%A1%E6%8B%9F%EF%BC%9ALeckenby-Company/LeckenbySimulation_files/LeckenbySimulation_4_0.png" /></p>
<h2 id="simulation-code">Simulation Code</h2>
<p>As two parties approaching the final <span class="math inline">\(w\)</span>, they do not calculate their gain&amp;loss in each round. The next bid is solely subject to the triangular distribution</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bid_Kunzler = 10</span></span><br><span class="line"><span class="comment"># bid_Arnold = 11</span></span><br><span class="line"><span class="comment"># round = 0</span></span><br><span class="line"><span class="comment"># while ((bid_Kunzler+0.0004 &lt; bid_Arnold) &amp; (round &lt;=22)):</span></span><br><span class="line"><span class="comment">#     round += 1</span></span><br><span class="line"><span class="comment">#     bid_Kunzler += (bid_Arnold - bid_Kunzler)*np.random.triangular(0, 0.4, 1)</span></span><br><span class="line"><span class="comment">#     bid_Arnold -= (bid_Arnold - bid_Kunzler)*np.random.triangular(0, 0.2, 1)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># np.around(bid_Kunzler, 3,), np.around(bid_Arnold, 3,)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Kunzler</span>(<span class="params">w, d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-5</span>*w -(<span class="number">0.1</span>*d + <span class="number">0.015</span>*d**<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Arnold</span>(<span class="params">w, d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>*w - (<span class="number">0.05</span>*d + <span class="number">0.005</span>*d**<span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simulation</span>():</span></span><br><span class="line">    bid_Kunzler = <span class="number">10</span></span><br><span class="line">    bid_Arnold = <span class="number">11</span></span><br><span class="line">    round = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> ((bid_Kunzler+<span class="number">0.0004</span> &lt; bid_Arnold) &amp; (round &lt;=<span class="number">22</span>)):</span><br><span class="line">        round += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (np.random.random()&gt;<span class="number">0.2</span>): <span class="comment"># 20% chance stick to the previous bid</span></span><br><span class="line">            bid_Kunzler += (bid_Arnold - bid_Kunzler)*np.random.triangular(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (np.random.random()&gt;<span class="number">0.2</span>):</span><br><span class="line">            bid_Arnold -= (bid_Arnold - bid_Kunzler)*np.random.triangular(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    round -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> round==<span class="number">22</span>:</span><br><span class="line">        w = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        w = np.around(bid_Kunzler, <span class="number">3</span>) - <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    d = (round &gt; <span class="number">2</span>)*(round - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (round, w, Kunzler(w, d), Arnold(w, d))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="run-simulation-100000-times">Run Simulation 100000 times</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sim = np.array([simulation() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>)])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_sim = pd.DataFrame(sim, columns = [<span class="string">&quot;round&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;Kunzler&quot;</span>, <span class="string">&quot;Arnold&quot;</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_sim = df_sim.assign(total = <span class="keyword">lambda</span> x: x.Kunzler + x.Arnold)</span><br></pre></td></tr></table></figure>
<h2 id="scatterplot-kunzler-arnold-hueround-w">Scatterplot (Kunzler, Arnold), hue="round" / "w"</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">sns.scatterplot(data=df_sim, x=<span class="string">&quot;Kunzler&quot;</span>, y=<span class="string">&quot;Arnold&quot;</span>, hue=<span class="string">&quot;round&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/09/%E8%B0%88%E5%88%A4%E6%A1%88%E4%BE%8B%E6%A8%A1%E6%8B%9F%EF%BC%9ALeckenby-Company/LeckenbySimulation_files/LeckenbySimulation_14_0.png" /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">sns.scatterplot(data=df_sim, x=<span class="string">&quot;Kunzler&quot;</span>, y=<span class="string">&quot;Arnold&quot;</span>, hue=<span class="string">&quot;w&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/09/%E8%B0%88%E5%88%A4%E6%A1%88%E4%BE%8B%E6%A8%A1%E6%8B%9F%EF%BC%9ALeckenby-Company/LeckenbySimulation_files/LeckenbySimulation_15_0.png" /></p>
<h2 id="analysis">Analysis</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_sim.sort_values([<span class="string">&quot;round&quot;</span>, <span class="string">&quot;Kunzler&quot;</span>]).groupby(<span class="string">&quot;round&quot;</span>).agg(<span class="string">&quot;mean&quot;</span>)</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
w
</th>
<th>
Kunzler
</th>
<th>
Arnold
</th>
<th>
total
</th>
</tr>
<tr>
<th>
round
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
1.0
</th>
<td>
0.750143
</td>
<td>
-3.750714
</td>
<td>
3.000571
</td>
<td>
-0.750143
</td>
</tr>
<tr>
<th>
2.0
</th>
<td>
0.741615
</td>
<td>
-3.708077
</td>
<td>
2.966462
</td>
<td>
-0.741615
</td>
</tr>
<tr>
<th>
3.0
</th>
<td>
0.645737
</td>
<td>
-3.343684
</td>
<td>
2.527947
</td>
<td>
-0.815737
</td>
</tr>
<tr>
<th>
4.0
</th>
<td>
0.645440
</td>
<td>
-3.487198
</td>
<td>
2.461759
</td>
<td>
-1.025440
</td>
</tr>
<tr>
<th>
5.0
</th>
<td>
0.615148
</td>
<td>
-3.510739
</td>
<td>
2.265591
</td>
<td>
-1.245148
</td>
</tr>
<tr>
<th>
6.0
</th>
<td>
0.603678
</td>
<td>
-3.658389
</td>
<td>
2.134711
</td>
<td>
-1.523678
</td>
</tr>
<tr>
<th>
7.0
</th>
<td>
0.590758
</td>
<td>
-3.828791
</td>
<td>
1.988033
</td>
<td>
-1.840758
</td>
</tr>
<tr>
<th>
8.0
</th>
<td>
0.584565
</td>
<td>
-4.062823
</td>
<td>
1.858259
</td>
<td>
-2.204565
</td>
</tr>
<tr>
<th>
9.0
</th>
<td>
0.575110
</td>
<td>
-4.310551
</td>
<td>
1.705441
</td>
<td>
-2.605110
</td>
</tr>
<tr>
<th>
10.0
</th>
<td>
0.571312
</td>
<td>
-4.616559
</td>
<td>
1.565247
</td>
<td>
-3.051312
</td>
</tr>
<tr>
<th>
11.0
</th>
<td>
0.569395
</td>
<td>
-4.961974
</td>
<td>
1.422579
</td>
<td>
-3.539395
</td>
</tr>
<tr>
<th>
12.0
</th>
<td>
0.561997
</td>
<td>
-5.309983
</td>
<td>
1.247986
</td>
<td>
-4.061997
</td>
</tr>
<tr>
<th>
13.0
</th>
<td>
0.556362
</td>
<td>
-5.696812
</td>
<td>
1.070450
</td>
<td>
-4.626362
</td>
</tr>
<tr>
<th>
14.0
</th>
<td>
0.552071
</td>
<td>
-6.120357
</td>
<td>
0.888286
</td>
<td>
-5.232071
</td>
</tr>
<tr>
<th>
15.0
</th>
<td>
0.559690
</td>
<td>
-6.633452
</td>
<td>
0.743762
</td>
<td>
-5.889690
</td>
</tr>
<tr>
<th>
16.0
</th>
<td>
0.546763
</td>
<td>
-7.073814
</td>
<td>
0.507051
</td>
<td>
-6.566763
</td>
</tr>
<tr>
<th>
17.0
</th>
<td>
0.540981
</td>
<td>
-7.579907
</td>
<td>
0.288926
</td>
<td>
-7.290981
</td>
</tr>
<tr>
<th>
18.0
</th>
<td>
0.540375
</td>
<td>
-8.141877
</td>
<td>
0.081502
</td>
<td>
-8.060375
</td>
</tr>
<tr>
<th>
19.0
</th>
<td>
0.532353
</td>
<td>
-8.696763
</td>
<td>
-0.165590
</td>
<td>
-8.862353
</td>
</tr>
<tr>
<th>
20.0
</th>
<td>
0.581473
</td>
<td>
-9.567364
</td>
<td>
-0.194109
</td>
<td>
-9.761473
</td>
</tr>
<tr>
<th>
21.0
</th>
<td>
0.622667
</td>
<td>
-10.428333
</td>
<td>
-0.264333
</td>
<td>
-10.692667
</td>
</tr>
<tr>
<th>
22.0
</th>
<td>
0.000000
</td>
<td>
-8.000000
</td>
<td>
-3.000000
</td>
<td>
-11.000000
</td>
</tr>
</tbody>
</table>
</div>
<h3 id="try-to-end-it-early...-the-upperright-midpoint-looks-good">Try to end it early... The upperright midpoint looks good</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sns.set_theme(style=<span class="string">&quot;ticks&quot;</span>, font_scale=<span class="number">1.25</span>,)</span><br><span class="line">sns.jointplot(data=df_sim, y=<span class="string">&quot;Kunzler&quot;</span>, x=<span class="string">&quot;Arnold&quot;</span>, hue=<span class="string">&quot;round&quot;</span>,height=<span class="number">8</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<pre><code>/usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:305: UserWarning: Dataset has 0 variance; skipping density estimate.
  warnings.warn(msg, UserWarning)
/usr/local/lib/python3.6/dist-packages/seaborn/distributions.py:305: UserWarning: Dataset has 0 variance; skipping density estimate.
  warnings.warn(msg, UserWarning)</code></pre>
<p><img src="/2020/10/09/%E8%B0%88%E5%88%A4%E6%A1%88%E4%BE%8B%E6%A8%A1%E6%8B%9F%EF%BC%9ALeckenby-Company/LeckenbySimulation_files/LeckenbySimulation_19_1.png" /></p>
<h3 id="if-we-end-early-before-round3-what-would-be-a-good-proposition-answer-win-0.50.53">If we end early before round3, what would be a good proposition? Answer: <span class="math inline">\(w\in [0.5,0.53]\)</span></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_early = df_sim.loc[df_sim[<span class="string">&quot;round&quot;</span>]&lt;=<span class="number">3</span>].sort_values(<span class="string">&quot;total&quot;</span>, ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(df_early[<span class="string">&quot;Kunzler&quot;</span>].min() + df_early[<span class="string">&quot;Kunzler&quot;</span>].max()) / <span class="number">2</span></span><br></pre></td></tr></table></figure>
<pre><code>-2.6799999999999997</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(df_early[<span class="string">&quot;Arnold&quot;</span>].min() + df_early[<span class="string">&quot;Arnold&quot;</span>].max()) / <span class="number">2</span></span><br></pre></td></tr></table></figure>
<pre><code>2.026500000000002</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Arnold(<span class="number">0.53</span>,<span class="number">0</span>), Kunzler(<span class="number">0.53</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>(2.12, -2.6500000000000004)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Arnold(<span class="number">0.5</span>,<span class="number">0</span>), Kunzler(<span class="number">0.5</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>(2.0, -2.5)</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">sns.scatterplot(data=df_early, x=<span class="string">&quot;Arnold&quot;</span>, y=<span class="string">&quot;Kunzler&quot;</span>, hue=<span class="string">&quot;round&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="/2020/10/09/%E8%B0%88%E5%88%A4%E6%A1%88%E4%BE%8B%E6%A8%A1%E6%8B%9F%EF%BC%9ALeckenby-Company/LeckenbySimulation_files/LeckenbySimulation_26_0.png" /></p>
<h1 id="simulation-2-what-if-my-counterpart-does-not-end-early">Simulation 2: What if my counterpart does not end early?</h1>
<h2 id="another-simulation-function-exhibits-the-process-of-negotiation">Another simulation function: Exhibits the process of negotiation</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simulation</span>():</span> <span class="comment"># Exhibits the process of negotiation</span></span><br><span class="line">    bid_Kunzler = <span class="number">10</span></span><br><span class="line">    bid_Arnold = <span class="number">11</span></span><br><span class="line">    round = <span class="number">0</span></span><br><span class="line">    <span class="comment"># p_Kunzler = 0</span></span><br><span class="line">    <span class="comment"># p_Arnold = 0</span></span><br><span class="line">    rows = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((bid_Kunzler+<span class="number">0.004</span> &lt; bid_Arnold) &amp; (round &lt;=<span class="number">22</span>)):</span><br><span class="line">        round += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (np.random.random()&gt;<span class="number">0.2</span>): <span class="comment"># 20% chance stick to the previous bid</span></span><br><span class="line">            bid_Kunzler += (bid_Arnold - bid_Kunzler)*np.random.triangular(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> (np.random.random()&gt;<span class="number">0.2</span>):</span><br><span class="line">            bid_Arnold -= (bid_Arnold - bid_Kunzler)*np.random.triangular(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        w_Kunzler = bid_Kunzler- <span class="number">10</span></span><br><span class="line">        w_Arnold = bid_Arnold<span class="number">-10</span></span><br><span class="line">        d = (round &gt; <span class="number">2</span>)*(round - <span class="number">2</span>)</span><br><span class="line">        Kunzler_ = Kunzler(w_Kunzler, d)</span><br><span class="line">        Arnold_ = Arnold(w_Arnold, d)</span><br><span class="line">        rows.append(np.array([round, w_Kunzler, w_Arnold, Kunzler_, Arnold_]))</span><br><span class="line">    df = pd.DataFrame(np.array(rows), columns = [<span class="string">&quot;round&quot;</span>, <span class="string">&quot;w_Kunzler&quot;</span>, <span class="string">&quot;w_Arnold&quot;</span>, <span class="string">&quot;Kunzler_&quot;</span>, <span class="string">&quot;Arnold_&quot;</span>])</span><br><span class="line">    df = df.assign(sum = <span class="keyword">lambda</span> x: x.Kunzler_ + x.Arnold_)</span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">simulation()</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
round
</th>
<th>
w_Kunzler
</th>
<th>
w_Arnold
</th>
<th>
Kunzler_
</th>
<th>
Arnold_
</th>
<th>
sum
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1.0
</td>
<td>
0.000000
</td>
<td>
0.868807
</td>
<td>
0.000000
</td>
<td>
3.475230
</td>
<td>
3.475230
</td>
</tr>
<tr>
<th>
1
</th>
<td>
2.0
</td>
<td>
0.000000
</td>
<td>
0.420516
</td>
<td>
0.000000
</td>
<td>
1.682066
</td>
<td>
1.682066
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3.0
</td>
<td>
0.000297
</td>
<td>
0.420516
</td>
<td>
-0.116485
</td>
<td>
1.627066
</td>
<td>
1.510581
</td>
</tr>
<tr>
<th>
3
</th>
<td>
4.0
</td>
<td>
0.107588
</td>
<td>
0.201068
</td>
<td>
-0.797939
</td>
<td>
0.684272
</td>
<td>
-0.113667
</td>
</tr>
<tr>
<th>
4
</th>
<td>
5.0
</td>
<td>
0.132680
</td>
<td>
0.157974
</td>
<td>
-1.098401
</td>
<td>
0.436896
</td>
<td>
-0.661505
</td>
</tr>
<tr>
<th>
5
</th>
<td>
6.0
</td>
<td>
0.147227
</td>
<td>
0.156502
</td>
<td>
-1.376134
</td>
<td>
0.346006
</td>
<td>
-1.030128
</td>
</tr>
<tr>
<th>
6
</th>
<td>
7.0
</td>
<td>
0.149804
</td>
<td>
0.156216
</td>
<td>
-1.624022
</td>
<td>
0.249866
</td>
<td>
-1.374156
</td>
</tr>
<tr>
<th>
7
</th>
<td>
8.0
</td>
<td>
0.151529
</td>
<td>
0.156216
</td>
<td>
-1.897647
</td>
<td>
0.144866
</td>
<td>
-1.752782
</td>
</tr>
<tr>
<th>
8
</th>
<td>
9.0
</td>
<td>
0.155463
</td>
<td>
0.155972
</td>
<td>
-2.212317
</td>
<td>
0.028890
</td>
<td>
-2.183427
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="tool-for-finding-a-similar-caseround-w_k-w_a-when-negotiating">Tool for finding a similar case(round, w_K, w_A) when negotiating</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Arnold(<span class="number">0</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<pre><code>-3.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Kunzler(<span class="number">0</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<pre><code>-8.0</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_Case</span>(<span class="params">round, w_K, w_A</span>):</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        df = simulation()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            row = df.iloc[round<span class="number">-1</span>]</span><br><span class="line">            flag = (np.abs(row[<span class="string">&quot;w_Kunzler&quot;</span>]-w_K)&lt;<span class="number">0.01</span>) &amp; (np.abs(row[<span class="string">&quot;w_Arnold&quot;</span>]-w_A)&lt;<span class="number">0.01</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> (flag):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> df</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_Case(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
round
</th>
<th>
w_Kunzler
</th>
<th>
w_Arnold
</th>
<th>
Kunzler_
</th>
<th>
Arnold_
</th>
<th>
sum
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1.0
</td>
<td>
0.000000
</td>
<td>
1.000000
</td>
<td>
0.000000
</td>
<td>
4.000000
</td>
<td>
4.000000
</td>
</tr>
<tr>
<th>
1
</th>
<td>
2.0
</td>
<td>
0.000000
</td>
<td>
1.000000
</td>
<td>
0.000000
</td>
<td>
4.000000
</td>
<td>
4.000000
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3.0
</td>
<td>
0.382837
</td>
<td>
0.997914
</td>
<td>
-2.029186
</td>
<td>
3.936654
</td>
<td>
1.907469
</td>
</tr>
<tr>
<th>
3
</th>
<td>
4.0
</td>
<td>
0.387834
</td>
<td>
0.603973
</td>
<td>
-2.199168
</td>
<td>
2.295893
</td>
<td>
0.096725
</td>
</tr>
<tr>
<th>
4
</th>
<td>
5.0
</td>
<td>
0.495310
</td>
<td>
0.586222
</td>
<td>
-2.911552
</td>
<td>
2.149887
</td>
<td>
-0.761664
</td>
</tr>
<tr>
<th>
5
</th>
<td>
6.0
</td>
<td>
0.529410
</td>
<td>
0.584511
</td>
<td>
-3.287050
</td>
<td>
2.058045
</td>
<td>
-1.229006
</td>
</tr>
<tr>
<th>
6
</th>
<td>
7.0
</td>
<td>
0.529410
</td>
<td>
0.579932
</td>
<td>
-3.522050
</td>
<td>
1.944727
</td>
<td>
-1.577323
</td>
</tr>
<tr>
<th>
7
</th>
<td>
8.0
</td>
<td>
0.533581
</td>
<td>
0.579932
</td>
<td>
-3.807903
</td>
<td>
1.839727
</td>
<td>
-1.968176
</td>
</tr>
<tr>
<th>
8
</th>
<td>
9.0
</td>
<td>
0.541261
</td>
<td>
0.577473
</td>
<td>
-4.141303
</td>
<td>
1.714890
</td>
<td>
-2.426413
</td>
</tr>
<tr>
<th>
9
</th>
<td>
10.0
</td>
<td>
0.541261
</td>
<td>
0.577473
</td>
<td>
-4.466303
</td>
<td>
1.589890
</td>
<td>
-2.876413
</td>
</tr>
<tr>
<th>
10
</th>
<td>
11.0
</td>
<td>
0.541261
</td>
<td>
0.575655
</td>
<td>
-4.821303
</td>
<td>
1.447619
</td>
<td>
-3.373685
</td>
</tr>
<tr>
<th>
11
</th>
<td>
12.0
</td>
<td>
0.572203
</td>
<td>
0.575655
</td>
<td>
-5.361013
</td>
<td>
1.302619
</td>
<td>
-4.058394
</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_Case(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
round
</th>
<th>
w_Kunzler
</th>
<th>
w_Arnold
</th>
<th>
Kunzler_
</th>
<th>
Arnold_
</th>
<th>
sum
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1.0
</td>
<td>
0.000000
</td>
<td>
1.000000
</td>
<td>
0.000000
</td>
<td>
4.000000
</td>
<td>
4.000000
</td>
</tr>
<tr>
<th>
1
</th>
<td>
2.0
</td>
<td>
0.000000
</td>
<td>
1.000000
</td>
<td>
0.000000
</td>
<td>
4.000000
</td>
<td>
4.000000
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3.0
</td>
<td>
0.000000
</td>
<td>
0.470998
</td>
<td>
-0.115000
</td>
<td>
1.828994
</td>
<td>
1.713994
</td>
</tr>
<tr>
<th>
3
</th>
<td>
4.0
</td>
<td>
0.000000
</td>
<td>
0.337204
</td>
<td>
-0.260000
</td>
<td>
1.228817
</td>
<td>
0.968817
</td>
</tr>
<tr>
<th>
4
</th>
<td>
5.0
</td>
<td>
0.000000
</td>
<td>
0.094733
</td>
<td>
-0.435000
</td>
<td>
0.183932
</td>
<td>
-0.251068
</td>
</tr>
<tr>
<th>
5
</th>
<td>
6.0
</td>
<td>
0.000000
</td>
<td>
0.094733
</td>
<td>
-0.640000
</td>
<td>
0.098932
</td>
<td>
-0.541068
</td>
</tr>
<tr>
<th>
6
</th>
<td>
7.0
</td>
<td>
0.000000
</td>
<td>
0.072679
</td>
<td>
-0.875000
</td>
<td>
-0.084283
</td>
<td>
-0.959283
</td>
</tr>
<tr>
<th>
7
</th>
<td>
8.0
</td>
<td>
0.009111
</td>
<td>
0.068337
</td>
<td>
-1.185556
</td>
<td>
-0.206651
</td>
<td>
-1.392207
</td>
</tr>
<tr>
<th>
8
</th>
<td>
9.0
</td>
<td>
0.044854
</td>
<td>
0.058973
</td>
<td>
-1.659270
</td>
<td>
-0.359107
</td>
<td>
-2.018377
</td>
</tr>
<tr>
<th>
9
</th>
<td>
10.0
</td>
<td>
0.047908
</td>
<td>
0.056863
</td>
<td>
-1.999541
</td>
<td>
-0.492550
</td>
<td>
-2.492091
</td>
</tr>
<tr>
<th>
10
</th>
<td>
11.0
</td>
<td>
0.048806
</td>
<td>
0.055739
</td>
<td>
-2.359032
</td>
<td>
-0.632043
</td>
<td>
-2.991074
</td>
</tr>
<tr>
<th>
11
</th>
<td>
12.0
</td>
<td>
0.048806
</td>
<td>
0.052226
</td>
<td>
-2.744032
</td>
<td>
-0.791096
</td>
<td>
-3.535128
</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">find_Case(<span class="number">4</span>, <span class="number">0.3</span>, <span class="number">0.6</span>)</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
round
</th>
<th>
w_Kunzler
</th>
<th>
w_Arnold
</th>
<th>
Kunzler_
</th>
<th>
Arnold_
</th>
<th>
sum
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1.0
</td>
<td>
0.155860
</td>
<td>
0.919539
</td>
<td>
-0.779300
</td>
<td>
3.678158
</td>
<td>
2.898858
</td>
</tr>
<tr>
<th>
1
</th>
<td>
2.0
</td>
<td>
0.262073
</td>
<td>
0.819940
</td>
<td>
-1.310366
</td>
<td>
3.279758
</td>
<td>
1.969392
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3.0
</td>
<td>
0.304963
</td>
<td>
0.808350
</td>
<td>
-1.639815
</td>
<td>
3.178401
</td>
<td>
1.538586
</td>
</tr>
<tr>
<th>
3
</th>
<td>
4.0
</td>
<td>
0.304963
</td>
<td>
0.597116
</td>
<td>
-1.784815
</td>
<td>
2.268465
</td>
<td>
0.483650
</td>
</tr>
<tr>
<th>
4
</th>
<td>
5.0
</td>
<td>
0.400535
</td>
<td>
0.532053
</td>
<td>
-2.437677
</td>
<td>
1.933211
</td>
<td>
-0.504466
</td>
</tr>
<tr>
<th>
5
</th>
<td>
6.0
</td>
<td>
0.400584
</td>
<td>
0.417896
</td>
<td>
-2.642919
</td>
<td>
1.391584
</td>
<td>
-1.251335
</td>
</tr>
<tr>
<th>
6
</th>
<td>
7.0
</td>
<td>
0.412972
</td>
<td>
0.415010
</td>
<td>
-2.939859
</td>
<td>
1.285039
</td>
<td>
-1.654820
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="do-not-concede-before-round-4">Do not concede before Round 4!!!</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%<span class="built_in">cd</span> /content/drive/My Drive/20FA</span><br><span class="line">!jupyter nb</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Simulation</category>
      </categories>
      <tags>
        <tag>Managerial Negotiation</tag>
      </tags>
  </entry>
  <entry>
    <title>Data-Mining-Lec6</title>
    <url>/2020/10/14/Data-Mining-Lec6/</url>
    <content><![CDATA[<p><a href="https://syncedreview.com/2020/10/02/google-cambridge-deepmind-alan-turing-institutes-performer-transformer-slashes-compute-costs/#comments">Performers: variant of transformer</a></p>
<p>Random feature for different kernels Softmax: triangnometric, positive Orthogonal features construction: different ways(Givens, Hadamard, regular(GM), or even more), different renormalizations</p>
<p>concentration, <strong>computing variance</strong> of certain feature map, Cherbychev, concentration results</p>
<p>attention: ..., transformer, MLP, resnet, ...</p>
<h2 id="markovs-inequality">Markov's inequality</h2>
<p><span class="math display">\[ \mathbb{P}(Z\geq t) \leq \frac{\mathbb{E}[Z]}{t} , t\geq 0\]</span> Proof: <span class="math display">\[
\mathbb{P}(Z\geq t) = E[1\{Z\geq t\}] \leq E[\frac{Z}{t}]=\frac{\mathbb{E}[Z]}{t}
\]</span></p>
<h2 id="chebyshevs-inequality">Chebyshev's inequality</h2>
<p><img src="https://www.zhihu.com/equation?tex=%5Cquad+%5Cquad+%5Cmathbb%7BP%7D%28Z%5Cge+%5Cmathbb%7BE%7D%5BZ%5D%2Bt+~or~Z%5Cle+%5Cmathbb%7BE%7D%5BZ%5D-t%29%5Cle+%5Cfrac%7BVar%28Z%29%7D%7Bt%5E2%7D" /></p>
<p><img src="https://pic1.zhimg.com/v2-7e8070e499bcb47e78c3f668b8f00504_b.jpg" /> ## Hoeffding's inequality</p>
]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Data-Mining-Midterm</title>
    <url>/2020/10/18/Data-Mining-Midterm/</url>
    <content><![CDATA[<h1 id="data-mining-midterm">Data Mining Midterm</h1>
<p><strong>Hua Yao(UNI: hy2632)</strong></p>
<h2 id="problem-1-anisotropic-gaussian-kernels-50-points">Problem 1: Anisotropic Gaussian Kernels (50 points)</h2>
<p>Given: <span class="math display">\[K(x,y) = (2\pi)^{-\frac{d}{2}}(\det(\Sigma))^{-\frac{1}{2}}\exp(-\frac{1}{2}(x-y)^{\top}\Sigma^{-1}(x-y)), \]</span> <span class="math inline">\(\Sigma \in \mathbb{R}^{d\times d}\)</span> is positive definite symmetric.</p>
<h3 id="show-that-k-does-not-need-to-be-an-rbf-kernel-10-points">Show that K does not need to be an RBF kernel (10 points)</h3>
<p>Radius basis function kernel(RBF) is defined as <span class="math display">\[K(x,y) = \exp\big( -\frac{||x-y||^2}{2\sigma^2}  \big)\]</span> While <span class="math display">\[K(x,y) = \big[(2\pi)^{-\frac{d}{2}}(\det(\Sigma))^{-\frac{1}{2}}\big] \cdot \big[\exp(-\frac{1}{2}(x-y)^{\top}\Sigma^{-1}(x-y))\big]\]</span></p>
<p>Therefore, K is not necessarily an RBF for 2 reasons:</p>
<ul>
<li>The constant coefficient <span class="math inline">\((2\pi)^{-\frac{d}{2}}(\det(\Sigma))^{-\frac{1}{2}}\)</span> is not necessarily <span class="math inline">\(1\)</span></li>
<li><span class="math inline">\(\exp(-\frac{1}{2}(x-y)^{\top}\Sigma^{-1}(x-y))\)</span> does not necessarily have the form of <span class="math inline">\(\exp\big( -\frac{||x-y||^2_2}{2\sigma^2}\big)\)</span></li>
</ul>
<h3 id="give-necessary-and-sufficient-conditions-for-k-to-be-an-rbf-function-10-points">Give necessary and sufficient conditions for K to be an RBF function (10 points)</h3>
<h4 id="condition-1-2pi-fracd2detsigma-frac12-1">Condition 1: <span class="math inline">\((2\pi)^{-\frac{d}{2}}(\det(\Sigma))^{-\frac{1}{2}} = 1\)</span></h4>
<p><span class="math display">\[\det(\Sigma) = (\frac{1}{2\pi})^d\]</span></p>
<p>Also, since <span class="math inline">\(\Sigma\)</span> is positive definite symmetric, all of its eigenvalues are positive, <span class="math display">\[\therefore \det(\Sigma^{-1}) = (2\pi)^d \]</span></p>
<h4 id="condition-2-exp-frac12x-ytopsigma-1x-y-expbig--fracx-y22sigma2big">Condition 2: <span class="math inline">\(\exp(-\frac{1}{2}(x-y)^{\top}\Sigma^{-1}(x-y)) = \exp\big( -\frac{||x-y||^2}{2\sigma^2}\big)\)</span></h4>
<!-- Related: [Anisotropic Gaussian kernel adaptive filtering by Lie-group dictionary learning](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0237654#sec001) -->
<p><span class="math display">\[(x-y)^{\top}\Sigma^{-1}(x-y) = \frac{||x-y||^2}{\sigma^2}\]</span></p>
<p>Let <span class="math inline">\(z = x-y \in \mathbb{R}^{d}\)</span>,</p>
<p><span class="math display">\[z^{\top}\Sigma^{-1}z = \frac{||z||^2}{\sigma^2} = \frac{z^{\top}z}{\sigma^2} = z^{\top}\frac{I}{\sigma^2}z\]</span></p>
<p><span class="math display">\[z^{\top}(\Sigma^{-1}-\frac{I}{\sigma^2})z = \mathbf{0}\]</span></p>
<p><span class="math inline">\(\because \Sigma^{-1}, \frac{I}{\sigma^2}\)</span> are both real symmetric</p>
<p><span class="math display">\[\therefore \Sigma^{-1} - \frac{I}{\sigma^2} = 0\]</span></p>
<p><span class="math display">\[\therefore \Sigma^{-1} = \frac{I}{\sigma^2}, \Sigma = \sigma^2 I\]</span></p>
<h4 id="combine-results-from-the-previous-2-parts">Combine results from the previous 2 parts</h4>
<p>From Part 2, <span class="math display">\[\det({\Sigma}) = \prod_{i=1}^d{\lambda_i} = (\sigma^2)^d\]</span></p>
<p>From Part 1, <span class="math display">\[\det(\Sigma) = (\frac{1}{2\pi})^d\]</span></p>
<p><span class="math display">\[\therefore \sigma^2 = \frac{1}{2\pi}\]</span></p>
<h4 id="conclusion">Conclusion</h4>
<p>To sum up, the necessary and sufficient conditions for <span class="math inline">\(K\)</span> to be an RBF function is <span class="math display">\[\Sigma = \frac{1}{2\pi}I_d\]</span></p>
<p><span class="math display">\[\Sigma^{-1} = 2\pi I_d\]</span></p>
<h3 id="show-that-k-is-psd-function-and-provide-random-feature-map-phimathbbr_dmathbbr_m-for-k-25-points">Show that K is PSD function and provide random feature map <span class="math inline">\(\phi:\mathbb{R}_{d}→\mathbb{R}_{m}\)</span> for K (25 points)</h3>
<h4 id="random-feature-map-for-multivariate-gaussian">Random Feature Map for Multivariate Gaussian</h4>
<p><span class="math display">\[K(x,y) = (2\pi)^{-\frac{d}{2}}(\det(\Sigma))^{-\frac{1}{2}}\exp(-\frac{1}{2}(x-y)^{\top}\Sigma^{-1}(x-y)) \]</span></p>
<p><span class="math display">\[X = \{x_1, ...x_N\} \in \mathbb{R}^{d\times N}\]</span></p>
<p>For 1-d gaussian distribution, the pdf is</p>
<p><span class="math display">\[f(x) = \frac{1}{\sqrt{2 π}σ}e^{\frac{-(x - μ)^2}{2 σ^2}}\]</span></p>
<p>And we have trignometric random feature maps because</p>
<p><span class="math display">\[E_w[cos(\frac{w^T(x-y))}{\sigma}] = e^{\frac{-(x - y)^2}{2 σ^2}}\]</span></p>
<p>Similarly, for multivariate Gaussian distribution,</p>
<p><span class="math display">\[E_w[cos(w^T\Sigma^{-\frac12}(x-y))] = \exp(-\frac{1}{2}(x-y)^{\top}\Sigma^{-1}(x-y))\]</span></p>
<p>Here we propose the random feature map <span class="math display">\[ \phi(x) = \frac{\sqrt{(2\pi)^{-\frac{d}{2}}(\det(\Sigma))^{-\frac{1}{2}}}}{\sqrt{m}} \begin{bmatrix} \cos(w_1^T\Sigma^{-\frac12}x)\\...\\ \cos(w_m^T\Sigma^{-\frac12}x)\\ \sin(w_1^T\Sigma^{-\frac12}x)\\...\\ \sin(w_m^T\Sigma^{-\frac12}x) \end{bmatrix} \]</span></p>
<p><strong>The <span class="math inline">\(\Sigma^{-\frac12}\)</span> is derived from eigenvalue diagonalization:</strong> <!-- **Lemma**: Real symmetric matrix $A$ is positive definite iff there exists invertible matrix $P$ that $A=P^TP$ --> * Since <span class="math inline">\(\Sigma\)</span> is postive definite, the diagonalized <span class="math inline">\(\Lambda\)</span> have positive eigenvalues on its diagonal <span class="math display">\[\Sigma = U\Lambda U^T = (U\Lambda^{\frac12})(U\Lambda^{\frac12})^T = AA^T, A = U\Lambda^{\frac12}\]</span> * Then for <span class="math inline">\(\Sigma^{-1}\)</span>, <span class="math display">\[\Sigma^{-1} = (AA^T)^{-1}=(A^{-1})^TA^{-1}\]</span> <strong>Here <span class="math inline">\(A^{-1}\)</span> is the <span class="math inline">\(\Sigma^{-\frac12}\)</span>.</strong></p>
<h4 id="proof-of-psd">Proof of PSD</h4>
<p>From above we know the random feature map for this kernel. <span class="math display">\[K(x,y) = (2\pi)^{-\frac{d}{2}}(\det(\Sigma))^{-\frac{1}{2}}\exp(-\frac{1}{2}(x-y)^{\top}\Sigma^{-1}(x-y)) \]</span></p>
<p><span class="math display">\[X = \{x_1, ..., x_n\} \subseteq \mathbb{R}^d \]</span></p>
<p><span class="math display">\[\kappa(X)_{ij} =K(x_i,x_j)= E[\phi(x_i)\phi(x_j)^T]\]</span></p>
<p><span class="math display">\[\begin{aligned}
v\kappa(X)v^T &amp;= \sum_{ij}E[\phi(x_i)\phi(x_j)^T]v_iv_j\\
&amp;= \sum_{ij}E[\phi(x_i)\phi(x_j)^Tv_iv_j]\\
&amp;= E[\sum_{ij}\phi(x_i)\phi(x_j)^Tv_iv_j]\\
\end{aligned}\]</span></p>
<p><span class="math display">\[\Phi(X) \in \mathbb{R}^{N\times m} = 
\begin{bmatrix}
\phi(x_1)\\
...\\
\phi(x_N)\\
\end{bmatrix}
\]</span></p>
<p><span class="math display">\[\Phi(X)\Phi(X)^T \in \mathbb{R}^{N\times N}, \Phi(X)\Phi(X)^T_{ij} = \phi(x_i)\phi(x_j)^T\]</span></p>
<p><span class="math display">\[\begin{aligned}
\therefore v\kappa(X)v^T 
&amp;= E[v\Phi(X)\Phi(X)^Tv^T]\\
&amp;= E[v\Phi(X)(v\Phi(X))^T] \geq 0
\end{aligned}\]</span></p>
<h3 id="what-is-time-complexity-of-computing-phi-5-points">What is time complexity of computing <span class="math inline">\(\phi\)</span> (5 points)?</h3>
<p>From above, <span class="math display">\[ \phi(x) = \frac{\sqrt{(2\pi)^{-\frac{d}{2}}(\det(\Sigma))^{-\frac{1}{2}}}}{\sqrt{m}} \begin{bmatrix} \cos(w_1^T\Sigma^{-\frac12}x)\\...\\ \cos(w_m^T\Sigma^{-\frac12}x)\\ \sin(w_1^T\Sigma^{-\frac12}x)\\...\\ \sin(w_m^T\Sigma^{-\frac12}x) \end{bmatrix} \]</span></p>
<ul>
<li><p>Firstly we diagonalize <span class="math inline">\(\Sigma\)</span> to get <span class="math inline">\(\Sigma^{-\frac12}\)</span> : <span class="math inline">\(\Sigma = U\Lambda U^T = (U\Lambda^{\frac12})(U\Lambda^{\frac12})^T = AA^T\)</span>. This decomposition takes <span class="math inline">\(O(d^3)\)</span>.</p></li>
<li><p>Then we compute each entry of <span class="math inline">\(\phi(x)\)</span>: <span class="math inline">\(\cos(w_i^T\Sigma^{-\frac12}x)\)</span>, this takes <span class="math inline">\(O(d^2)\)</span>. So for all entries it takes <span class="math inline">\(O(md^2)\)</span></p></li>
<li><h2 id="the-overall-time-complexity-is-the-larger-of-od3-and-omd2.-usually-md-so-the-final-result-is-omd2.">The overall time complexity is the larger of <span class="math inline">\(O(d^3)\)</span> and <span class="math inline">\(O(md^2)\)</span>. Usually <span class="math inline">\(m&gt;d\)</span> so the final result is <span class="math inline">\(O(md^2)\)</span>.</h2></li>
</ul>
<h2 id="problem-2-composite-attention-50-points">Problem 2: Composite Attention (50 points)</h2>
<!-- Reference: [Transformers are RNNs: Fast Autoregressive Transformers with Linear Attention](https://arxiv.org/pdf/2006.16236.pdf) -->
<h3 id="algorithm-1.-online-linear-time-attention">Algorithm 1. Online Linear-Time Attention</h3>
<!-- Reference: [Online and Linear-Time Attention by Enforcing Monotonic Alignments](https://arxiv.org/pdf/1704.00784.pdf) -->
<p>For example, we only attend to the closest 1 token, a.k.a only compute <span class="math inline">\(A_{i,i\pm 1}\)</span>; Or attend to a few tokens, but learn what to attend to.</p>
<h3 id="algorithm-2.-efficient-dense-attention">Algorithm 2. Efficient Dense Attention</h3>
<h4 id="construct-random-feature-map-for-this-composite-kernel">Construct random feature map for this composite kernel</h4>
<p>Noticed that this kernel is the product of softmax and angular kernel.</p>
<p><span class="math display">\[\begin{aligned}
A_{ij} &amp;= K_{SM}(d^{-\frac{1}{4}}q_i, d^{-\frac{1}{4}}k_j)K_{Ang}(q_i, k_j)\\
&amp;=E[\phi_{SM}(\bar{q_i})\phi_{SM}(\bar{k_j})^T]  E[\phi_{Ang}(q_i)\phi_{Ang}(k_j)^T]\\
&amp;\approx E[\phi_{SM}(\bar{q_i})\phi_{SM}(\bar{k_j})^T * \phi_{Ang}(q_i)\phi_{Ang}(k_j)^T]
\end{aligned}\]</span></p>
<p>Here we denote <span class="math inline">\(d^{-\frac{1}{4}}x\)</span> as <span class="math inline">\(\bar{x}\)</span>.</p>
<p>Use positive random features for <span class="math inline">\(\phi_{SM}\)</span>: <span class="math display">\[\phi_{SM} = \frac{1}{\sqrt m}e^{-\frac{||x||^2}{2}}[e^{w_1^Tx},...,e^{w_m^Tx}]\]</span></p>
<p><span class="math display">\[\phi_{Ang} = \frac{1}{\sqrt m}[sgn(w_1^Tx),...,sgn(w_m^Tx)] \]</span></p>
<p><span class="math display">\[\begin{aligned} 
E_w[\phi_{SM}(\bar{x})\phi_{SM}(\bar{y})^T*\phi_{Ang}(x)\phi_{Ang}(y)^T]
&amp;= E_w[\frac{1}{m^2}e^{-\frac{||\bar{x}||^2}{2}}e^{-\frac{||\bar{y}||^2}{2}}\sum_{i=1}^{m}{e^{w_i^T\bar{x}}e^{w_i^T\bar{y}}} \sum_{i=1}^{m}{sgn(w_i^Tx)sgn(w_i^Ty)}]\\
&amp;= E_w[\frac{1}{m^2}e^{-\frac{||\bar{x}||^2}{2}}e^{-\frac{||\bar{y}||^2}{2}}\sum_{i=1}^{m}{e^{w_i^T\bar{x}}e^{w_i^T\bar{y}}}\cdot m \cdot E_w[sgn(w^Tx)sgn(w^Ty)]]\\
&amp; \scriptstyle{\text{Use one point estimation}}\\
&amp;\approx E_w[\frac{1}{m}e^{-\frac{||\bar{x}||^2}{2}}e^{-\frac{||\bar{y}||^2}{2}}\sum_{i=1}^{m}{e^{w_i^T\bar{x}}e^{w_i^T\bar{y}}}{sgn(w_{m+1}^Tx)sgn(w_{m+1}^Ty)}]
\end{aligned}\]</span></p>
<p>The new proposed random feature here is <span class="math display">\[\phi_{comp}(x) = \frac{1}{\sqrt{m}}e^{-\frac{||\bar{x}||^2}{2}}\begin{bmatrix}
e^{w_1^T\bar{x}}sgn(w_{m+1}^Tx)\\
...\\
e^{w_m^T\bar{x}}sgn(w_{m+1}^Tx)
\end{bmatrix}, \bar{x} = d^{-\frac{1}{4}}x \]</span></p>
<p>Each time we generate an extra <span class="math inline">\(w_{m+1}\in \mathbb{R}^{d}\)</span> to compute the <span class="math inline">\(sgn\)</span> term and apply to all entries in the feature map.</p>
<h4 id="apply-the-dense-attention-mechanism">Apply the Dense Attention mechanism</h4>
<p>Since we already found a proper random feature map for this composite kernel, we can conduct "efficient dense attention" algorithm.</p>
<p><span class="math display">\[\begin{aligned}
A_{ij} &amp;= K_{SM}(d^{-\frac{1}{4}}q_i, d^{-\frac{1}{4}}k_j)K_{Angular}(q_i, k_j)\\
&amp;= K_{comp}(q_i, kj)\\
&amp;\approx E[\phi_{comp}(q_i)^T\phi_{comp}(k_j)]
\end{aligned}\]</span></p>
<p>Then in matrix form, <span class="math display">\[A\approx E[Q&#39;(K&#39;)^T]\]</span></p>
<p><span class="math display">\[Q&#39;=[\phi_{comp}(q_1)..., \phi_{comp}(q_l)]^T\]</span></p>
<p><span class="math display">\[K&#39;=[\phi_{comp}(k_1)..., \phi_{comp}(k_l)]^T\]</span></p>
<p><span class="math display">\[AV \approx E[Q&#39;(K&#39;)^T]V = E[Q&#39;(K&#39;)^TV]\approx Q&#39;(K&#39;)^TV = Q&#39;((K&#39;)^TV)\]</span></p>
<p><span class="math display">\[Q&#39;,K&#39;\in \mathbb{R}^{L\times m}, V\in \mathbb{R}^{L\times d}\]</span></p>
<p>We take: <span class="math inline">\(O(mLd)\)</span> time to get <span class="math inline">\((K&#39;)^TV\in \mathbb{R}^{m\times d}\)</span> and <span class="math inline">\(O(mLd)\)</span> time to get <span class="math inline">\(Q&#39;(K&#39;)^TV\)</span>.</p>
<hr />
<h2 id="problem-3-mlps-for-attention-30-points">Problem 3: MLPs for attention (30 points)</h2>
<p><span class="math display">\[E[Q&#39;(K&#39;)^T] = A = \exp(\frac{QK^T}{\sqrt{d}})\]</span></p>
<p><span class="math display">\[Q\in \mathbb{R}^{L\times d}, Q&#39;\in \mathbb{R}^{L\times m}\]</span></p>
<p><span class="math display">\[A_{ij} = \exp(\frac{q_ik_j^T}{\sqrt{d}})\]</span></p>
<p><span class="math display">\[\begin{aligned}
\therefore E[q_i&#39;k_j&#39;^T]   
&amp; =\exp(\frac{q_ik_j^T}{\sqrt{d}})\\
&amp; =K_{SM}(d^{-\frac{1}{4}}q_i, d^{-\frac{1}{4}}k_j)\\
&amp; =E[\phi(d^{-\frac{1}{4}}q_i)\phi(d^{-\frac{1}{4}}k_j)^T]
\end{aligned}\]</span></p>
<p>One valid pair of <span class="math inline">\(Q&#39;\)</span> and <span class="math inline">\(K&#39;\)</span> satisfy:</p>
<p><span class="math display">\[q_i&#39; = \phi(d^{-\frac{1}{4}}q_i)\]</span></p>
<p><span class="math display">\[k_j&#39; = \phi(d^{-\frac{1}{4}}k_j)\]</span></p>
<p><span class="math display">\[q_i&#39;, k_j&#39; \in \mathbb{R}^{m}\]</span></p>
<p>Here we use positive random features <span class="math inline">\(\phi_m^+:\mathbb{R}^d \to \mathbb{R}^m\)</span> to guarantee that the dimensionality of output is <span class="math inline">\(m\)</span>.</p>
<p><span class="math display">\[\phi_m^{+}(x) = e^{-\frac{||x||^2}{2}}\frac{1}{\sqrt{m}}\begin{bmatrix}\exp(w_1^Tx)\\...\\ \exp(w_m^Tx) \end{bmatrix}\]</span></p>
<p><span class="math display">\[w_1,...w_m \sim N(0,I_d)\]</span></p>
<p><span class="math display">\[q_i&#39; = \phi_m^{+}(d^{-\frac{1}{4}}q_i)\]</span></p>
<p><span class="math display">\[k_j&#39; = \phi_m^{+}(d^{-\frac{1}{4}}k_j)\]</span></p>
<p>Map all queries <span class="math inline">\(q_1, ... q_L\)</span> and keys <span class="math inline">\(k_1, ..., k_L\)</span> to generate rows of <span class="math inline">\(Q&#39;\)</span> and <span class="math inline">\(K&#39;\)</span>.</p>
<hr />
<h2 id="problem-4-gaussian-kernel-via-random-feature-maps-40-points">Problem 4: Gaussian kernel via random feature maps (40 points)</h2>
<p>Take hyperparameter <span class="math inline">\(\sigma^2=1\)</span>,</p>
<p><span class="math display">\[K_{Gauss}(x,y) = \exp(-\frac{||x-y||^2}{2})\]</span></p>
<h3 id="trigonometric-feature-map">Trigonometric feature map</h3>
<p><span class="math display">\[K_{Gauss}(x,y) = E[\phi(x)\phi(y)^T]\]</span></p>
<p><span class="math display">\[\phi(x)\stackrel{def}{=}\frac{1}{\sqrt{m}} \begin{bmatrix}\cos(w_1^Tx)\\...\\ \cos(w_m^Tx)\\ \sin(w_1^Tx)\\...\\ \sin(w_m^Tx) \end{bmatrix}\]</span></p>
<p><span class="math display">\[w\stackrel{dist}{=} N(0,I_d)\]</span></p>
<p>This feature map leads to unbiased estimation.</p>
<p><span class="math display">\[\begin{aligned}
\phi(x)\phi(y)^T &amp;= \frac{1}{m}\sum_{i=1}^{m}{\cos(w_i^Tx)\cos(w_i^Ty)+\sin(w_i^Tx)\sin(w_i^Ty)}\\
&amp;= \frac{1}{m}\sum_{i=1}^{m}{\cos(w_i^T(x-y))}
\end{aligned} \]</span></p>
<p><span class="math display">\[\begin{aligned}
E[\phi(x)\phi(y)^T] &amp;= E[\frac{1}{m}\sum_{i=1}^{m}{\cos(w_i^T(x-y))}]\\
&amp;=E_w[\cos(w^T(x-y))]\\
&amp;= \Re \int{e^{w^T(x-y)i}dP(w)}\\
&amp;=\exp(-\frac{||x-y||^2}{2})
\end{aligned} \]</span></p>
<h3 id="positive-feature-map">Positive feature map</h3>
<p>For softmax kernel, the postive feature map is <span class="math display">\[\phi_m&#39;^{+}(x) = e^{-\frac{||x||^2}{2}}\frac{1}{\sqrt{m}}\begin{bmatrix}\exp(w_1^Tx)\\...\\ \exp(w_m^Tx) \end{bmatrix}\]</span></p>
<p>We know that</p>
<p><span class="math display">\[\begin{aligned}
K_{Gauss}(x,y) &amp;= \exp(-\frac{||x-y||^2}{2}) \\
&amp;= e^{-\frac{||x||^2}{2}}e^{-\frac{||y||^2}{2}}e^{x^Ty}\\
&amp;= e^{-\frac{||x||^2}{2}}e^{-\frac{||y||^2}{2}}K_{SM}(x,y)\\
\end{aligned} \]</span></p>
<p><span class="math display">\[\phi_{Gauss}(x) = e^{-\frac{||x||^2}{2}}\phi_{SM}(x)\]</span></p>
<p>Then for Gaussian kernel <span class="math display">\[\phi_m^{+}(x) = e^{-||x||^2}\frac{1}{\sqrt{m}}\begin{bmatrix}\exp(w_1^Tx)\\...\\ \exp(w_m^Tx) \end{bmatrix}\]</span></p>
<p>Now prove that positive random map for gaussian kernel is unbiased.</p>
<p><span class="math display">\[\phi_m^{+}(x)\phi_m^{+}(y)^T = e^{-||x||^2}e^{-||y||^2}\frac{1}{m}\sum_{i=1}^{m}{\exp(w_i^T(x+y))}\]</span></p>
<p><span class="math display">\[\begin{aligned}
E[\phi_m^{+}(x)\phi_m^{+}(y)^T] &amp;= E\big[e^{-||x||^2}e^{-||y||^2}\frac{1}{m}\sum_{i=1}^{m}{\exp(w_i^T(x+y))}\big]\\
&amp;=e^{-||x||^2}e^{-||y||^2}E\big[\frac{1}{m}\sum_{i=1}^{m}{\exp(w_i^T(x+y))}\big]\\
&amp;=e^{-||x||^2}e^{-||y||^2}E_w\big[\exp(w^T(x+y))\big]
\end{aligned} \]</span></p>
<p><span class="math display">\[\begin{aligned}\because E_w\big[\exp(w^T(x+y))\big] 
&amp;= \int{e^{w^T(x+y)}dP(w)}\\
&amp;= \int_{-\infty}^{+\infty}{e^{w^Tz}\cdot \frac{1}{\sqrt{2\pi}}\cdot e^{-\frac{||w||^2}{2}}dw}\\
&amp;= \frac{1}{\sqrt{2\pi}} e^{\frac{||z||^2}{2}} \int_{-\infty}^{+\infty}{e^{-\frac{||z-w||^2}{2}}dw}\\
&amp;= \frac{1}{\sqrt{2\pi}} e^{\frac{||z||^2}{2}} \int_{-\infty}^{+\infty}{e^{-\frac{||a||^2}{2}}da} \\
&amp;= \frac{1}{\sqrt{2\pi}} e^{\frac{||z||^2}{2}}\cdot \sqrt{2\pi} \\
&amp;= e^{\frac{||z||^2}{2}}\\ 
&amp;= e^{\frac{||x+y||^2}{2}}\\ 
&amp;= e^{\frac{||x||^2}{2}}e^{\frac{||y||^2}{2}}e^{x^Ty}
\end{aligned}\]</span></p>
<p><span class="math display">\[\begin{aligned}
\therefore  E[\phi_m^{+}(x)\phi_m^{+}(y)^T] 
&amp;= e^{-||x||^2}e^{-||y||^2}e^{\frac{||x||^2}{2}}e^{\frac{||y||^2}{2}}e^{x^Ty}\\ 
&amp;= e^{-\frac{||x||^2}{2}}e^{-\frac{||y||^2}{2}}e^{x^Ty}\\
&amp;= \exp(-\frac{||x-y||^2}{2}) \\
&amp;= K_{Gauss}(x,y) 
\end{aligned}\]</span></p>
]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
  </entry>
  <entry>
    <title>Data-Mining-Recitation2</title>
    <url>/2020/10/10/Data-Mining-Recitation2/</url>
    <content><![CDATA[<h2 id="monte-carlo-approximation-techniques">Monte Carlo Approximation techniques</h2>
<h2 id="evolutionary-strategies-策略梯度">Evolutionary Strategies, 策略梯度</h2>
<p>Policy optimization can be done through gradient ascend:</p>
<p><span class="math display">\[\nabla_\theta \mathbb{E}_{\epsilon\sim\mathcal{N}(0, I)} F(\theta + \sigma \epsilon) = \frac{1}{\sigma}\mathbb{E}_{\epsilon\sim\mathcal{N}(0, I)} [ \epsilon F(\theta + \sigma\epsilon) ]\]</span></p>
<p><strong>Proof:</strong></p>
<p>一些参考资料：<br />
<a href="https://lilianweng.github.io/lil-log/2019/09/05/evolution-strategies.html">Evolution Strategies</a> <!-- $$
\begin{aligned}
& \nabla_\theta \mathbb{E}_{\theta\sim\mathcal{N}(\hat{\theta}, \sigma^2 I)} F(\theta) \\
&= \nabla_\theta \mathbb{E}_{\epsilon\sim\mathcal{N}(0, I)} F(\hat{\theta} + \sigma\epsilon) \\
&= \nabla_\theta \int_{\epsilon} p(\epsilon) F(\hat{\theta} + \sigma\epsilon) d\epsilon & \scriptstyle{\text{; Gaussian }p(\epsilon)=(2\pi)^{-\frac{n}{2}} \exp(-\frac{1}{2}\epsilon^\top\epsilon)} \\
&= \int_{\epsilon} p(\epsilon) \nabla_\epsilon \log p(\epsilon) \nabla_\theta \epsilon\;F(\hat{\theta} + \sigma\epsilon) d\epsilon & \scriptstyle{\text{; log-likelihood trick}}\\
&= \mathbb{E}_{\epsilon\sim\mathcal{N}(0, I)} [ \nabla_\epsilon \big(-\frac{1}{2}\epsilon^\top\epsilon\big) \nabla_\theta \big(\frac{\theta - \hat{\theta}}{\sigma}\big) F(\hat{\theta} + \sigma\epsilon) ] & \\
&= \mathbb{E}_{\epsilon\sim\mathcal{N}(0, I)} [ (-\epsilon) (\frac{1}{\sigma}) F(\hat{\theta} + \sigma\epsilon) ] & \\
&= \frac{1}{\sigma}\mathbb{E}_{\epsilon\sim\mathcal{N}(0, I)} [ \epsilon F(\hat{\theta} + \sigma\epsilon) ] & \scriptstyle{\text{; negative sign can be absorbed.}}
\end{aligned}
$$ --> <a href="https://arxiv.org/pdf/1703.03864.pdf">Evolution Strategies as a Scalable Alternative to Reinforcement Learning</a><br />
<a href="https://www.zhihu.com/question/275040392/answer/383301722">知乎回答 OpenAI ES</a><br />
<a href="https://blog.csdn.net/Xurui_Luo/article/details/106160581">CSDN推导</a></p>
<p><span class="math display">\[
\begin{aligned}
&amp;\nabla_\theta \mathbb{E}_{\epsilon\sim\mathcal{N}(0, I)} F(\theta + \sigma\epsilon) \\
&amp;= \nabla_\theta \int_{\epsilon} p(\epsilon) F(\theta + \sigma\epsilon) d\epsilon &amp; \scriptstyle{\text{; Gaussian }p(\epsilon)=(2\pi)^{-\frac{n}{2}} \exp(-\frac{1}{2}\epsilon^\top\epsilon)} \\
&amp;= \frac{1}{\sigma}\int_{\epsilon} \nabla_\epsilon p(\epsilon) F(\theta + \sigma\epsilon) d\epsilon  \\
&amp;= \frac{1}{\sigma}\int_{\epsilon} p(\epsilon) \nabla_\epsilon \log p(\epsilon) F(\hat{\theta} + \sigma\epsilon) d\epsilon &amp; \scriptstyle{\text{; log-likelihood trick}}\\
&amp;= \frac{1}{\sigma}\mathbb{E}_{\epsilon\sim\mathcal{N}(0, I)} [ \nabla_\epsilon \big(-\frac{1}{2}\epsilon^\top\epsilon\big)  F(\hat{\theta} + \sigma\epsilon) ] &amp; \\
&amp;= \frac{1}{\sigma}\mathbb{E}_{\epsilon\sim\mathcal{N}(0, I)} [ (-\epsilon)  F(\hat{\theta} + \sigma\epsilon) ] &amp; \\
&amp;= \frac{1}{\sigma}\mathbb{E}_{\epsilon\sim\mathcal{N}(0, I)} [ \epsilon F(\hat{\theta} + \sigma\epsilon) ] &amp; \scriptstyle{\text{; negative sign can be absorbed.}}
\end{aligned}
\]</span></p>
<p><a href="http://blog.shakirm.com/2015/11/machine-learning-trick-of-the-day-5-log-derivative-trick/">Log likelihood trick</a></p>
<p><a href="http://gregorygundersen.com/blog/2018/04/29/reparameterization/">The Reparameterization Trick</a></p>
]]></content>
      <categories>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Data-Mining-Lec7</title>
    <url>/2020/10/21/Data-Mining-Lec7/</url>
    <content><![CDATA[<h2 id="Some-hints-on-Midterm"><a href="#Some-hints-on-Midterm" class="headerlink" title="Some hints on Midterm"></a>Some hints on Midterm</h2><p>Problem1: PSD: Random feature decomposition to prove</p>
<p>Problem2: Find a random feature map of the product of two kernels,<br>    angular might be negative</p>
]]></content>
  </entry>
  <entry>
    <title>LC1541平衡括号字符串的最少插入次数</title>
    <url>/2020/10/23/LC1541%E5%B9%B3%E8%A1%A1%E6%8B%AC%E5%8F%B7%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%B0%91%E6%8F%92%E5%85%A5%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode-cn.com/problems/minimum-insertions-to-balance-a-parentheses-string/">题目描述</a></h2><p>给你一个括号字符串 s ，它只包含字符 ‘(‘ 和 ‘)’ 。一个括号字符串被称为平衡的当它满足：</p>
<p>任何左括号 ‘(‘ 必须对应两个连续的右括号 ‘))’ 。<br>左括号 ‘(‘ 必须在对应的连续两个右括号 ‘))’ 之前。<br>比方说 “())”， “())(())))” 和 “(())())))” 都是平衡的， “)()”， “()))” 和 “(()))” 都是不平衡的。</p>
<p>你可以在任意位置插入字符 ‘(‘ 和 ‘)’ 使字符串平衡。</p>
<p>请你返回让 s 平衡的最少插入次数。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;(()))&quot;</span><br><span class="line">输出：1</span><br><span class="line">解释：第二个左括号有与之匹配的两个右括号，但是第一个左括号只有一个右括号。</span><br><span class="line">我们需要在字符串结尾额外增加一个 &#39;)&#39; 使字符串变成平衡字符串 &quot;(())))&quot; 。</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul>
<li><p>当前步如果是左括号，则左边的问题结束(因为没有连续右括号了)，默认左边问题已经解决，只需要记住当前步多了一个左括号（可以放到栈里也可以计数）。</p>
</li>
<li><p>当前步如果是右括号，</p>
<ul>
<li>如果下一步也是右括号，两个并成一个 “))”，如果Left里有左括号就pop出来一个，和现在的 “))”消去；如果目前没有多余的左括号，就把 “))” 存到 Right2 栈里 (计数也行)</li>
<li>如果下一步是个左括号，那这一步的 ‘)’ 就需要单独处理：<ul>
<li>当前Left栈里有左括号，直接在这一步插入一个 ‘)’ 消去一组 “())”, 这种借来的 ‘)’先计入rightDemand中</li>
<li>2.2 当前Left栈空，就在这个’)’左右加 ‘(‘ 和 ‘)’，leftDemand 和 rightDemand 各计一个</li>
</ul>
</li>
</ul>
</li>
<li><p>最后多余的每一个 ‘(‘ 需要给rightDemand加两个 ‘)’, 每一个”))” 需要给leftDemand加一个’(‘</p>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LC1541</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minInsertions</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        Stack&lt;String&gt; Left = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;String&gt; Right2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> rightDemand = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftDemand = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.length()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                Left.push(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; s.length() &amp;&amp; s.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;)&#x27;</span>) &#123; <span class="comment">// try to combine &quot;))&quot;</span></span><br><span class="line">                    i += <span class="number">1</span>; <span class="comment">// skip 1</span></span><br><span class="line">                    <span class="keyword">if</span> (!Left.empty()) &#123;</span><br><span class="line">                        Left.pop();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Right2.push(<span class="string">&quot;))&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!Left.empty()) &#123;</span><br><span class="line">                        <span class="comment">// Add &quot;)&quot; to the right immediately and eliminate one left.</span></span><br><span class="line">                        Left.pop();</span><br><span class="line">                        rightDemand++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// only one single &#x27;)&#x27;, immediately eliminate it</span></span><br><span class="line">                        leftDemand += <span class="number">1</span>;</span><br><span class="line">                        rightDemand += <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rightDemand += <span class="number">2</span> * Left.size();</span><br><span class="line">        leftDemand += Right2.size();</span><br><span class="line">        <span class="keyword">return</span> rightDemand + leftDemand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// String str = &quot;))())(&quot;;</span></span><br><span class="line">        String str = <span class="string">&quot;(()))&quot;</span>;</span><br><span class="line">        System.out.println(minInsertions(str));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java数据结构与算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>CS229-LinearAlgebra Recap</title>
    <url>/2020/10/23/CS229-LinearAlgebra-Recap/</url>
    <content><![CDATA[<h2 id="link">Link</h2>
<p><a href="http://cs229.stanford.edu/summer2020/cs229-linalg.pdf">CS229: Review of Linear Algebra</a></p>
<h1 id="operations-and-properties">Operations and properties</h1>
<h2 id="norms">Norms</h2>
<p>Euclidean or <span class="math inline">\(l_2\)</span> norm;</p>
<p>More formally, a <strong>norm</strong> can be any function <span class="math inline">\(f: R^n \to R\)</span> that satisfies 4 properties:</p>
<ul>
<li>Non-negativity: <span class="math inline">\(f(x)\geq 0\)</span></li>
<li>Definiteness: <span class="math inline">\(f(x)=0\)</span> iff <span class="math inline">\(x=0\)</span></li>
<li>Homogeneity: <span class="math inline">\(f(tx) = |t|f(x)\)</span></li>
<li>Triangle inequality: <span class="math inline">\(f(x+y) \leq f(x) + f(y)\)</span></li>
</ul>
<p>Comment: According to the Bochner's Theorem, a <strong>kernel</strong> <span class="math inline">\(K(x,y): R^d \times R^d \to R\)</span> should have property that <span class="math inline">\(\kappa(X) = K(X^T, X)\)</span> is PSD.</p>
<p><span class="math inline">\(l_1\)</span> norm: <span class="math inline">\(\sum_{i}{|x_i|}\)</span></p>
<p><span class="math inline">\(l_{\infty}\)</span> norm: <span class="math inline">\(\max_i{x_i}\)</span>. This is because other dimensions diminishes.</p>
<ul>
<li>General form of <span class="math inline">\(l_p\)</span> norm</li>
</ul>
<p><span class="math display">\[||x||_p = \bigg(\sum_{i=1}^{n}{|x_i|^p}\bigg)^{\frac{1}{p}}\]</span></p>
<ul>
<li>Norm definition for Matrices: Frobenius norm</li>
</ul>
<p><span class="math display">\[||A||_F = \sqrt{\sum_{i,j}{A_{ij}^2} } = \sqrt{\textrm{tr}(A^TA)}\]</span></p>
<h2 id="linear-independence-and-rank">Linear independence and rank</h2>
<p>Linearly dependent:</p>
<p><span class="math display">\[ x_n = \sum_{i=1}^{n-1}{\alpha_ix_i}\]</span></p>
<p>Column rank: # of linearly independent columns of A</p>
<p>Row rank is similarly defined and equals to column rank. <a href="https://ocw.mit.edu/courses/mathematics/18-701-algebra-i-fall-2010/study-materials/MIT18_701F10_rrk_crk.pdf">Proof</a></p>
<p>Both called rank.</p>
<ul>
<li>Full rank if the <span class="math inline">\(=\min(m,n)\)</span></li>
<li>rank(<span class="math inline">\(A\)</span>) = rank(<span class="math inline">\(A^T\)</span>)</li>
<li>rank(<span class="math inline">\(AB\)</span>) <span class="math inline">\(\leq\)</span> min(rank(<span class="math inline">\(A\)</span>), rank(<span class="math inline">\(B\)</span>))</li>
<li>rank(<span class="math inline">\(A+B\)</span>) <span class="math inline">\(\leq\)</span> rank(<span class="math inline">\(A\)</span>) + rank(<span class="math inline">\(B\)</span>)</li>
</ul>
<p>Comment: <a href="https://yutsumura.com/the-rank-of-the-sum-of-two-matrices/">Proof</a> <span class="math display">\[rank(A) = dim(span(a_1, ..., a_n))\]</span> Use this to easily get the 4th property.</p>
<h2 id="orthogonal-matrices">Orthogonal Matrices</h2>
<p><span class="math display">\[U^TU = I = UU^T\]</span></p>
<p>Comment: This generally requires that, all the column vectors of <span class="math inline">\(U\)</span> has norm <span class="math inline">\(1\)</span> and orthogonal to any other columns. This property requires that <span class="math inline">\(n\leq m\)</span> because the dimension of the column space cannot surpass its dimensionality <span class="math inline">\(m\)</span>. And vice versa. Therefore only square matrices can satisfy both.</p>
<p>Property: Norm immutability</p>
<p><span class="math display">\[||Ux||_2 = ||x||_2\]</span></p>
<p>Comment: Expand by definition and find out that the cross quadratic terms equals 0.</p>
<h2 id="range-and-nullspace-of-a-matrix">Range and Nullspace of a Matrix</h2>
<p><strong>Span(线性生成空间)</strong>: all linear combinations of columns</p>
<p><strong>Projection</strong> of <span class="math inline">\(y\)</span> onto the span of <span class="math inline">\(\{x_1, ..., x_n\}\)</span>: minimizes the euclidean norm of the residual</p>
<p><span class="math display">\[Proj(y; {x_1,...,x_n}) = argmin_{v\in span(X)}||y-v||_2\]</span></p>
<p><strong>Range/Columnspace</strong>: span of columns of matrix</p>
<p><span class="math display">\[R(A) = \{ v \in \mathbb{R}^m: v = Ax, x\in \mathbb{R}^n \}\]</span></p>
<p>Projection of <span class="math inline">\(y\in \mathbb{R}^m\)</span> on to the range of <span class="math inline">\(A\)</span> is given by <span class="math display">\[Proj(y; A) = argmin_{v\in R(A)}||v-y||_2 = A(A^TA)^{-1}A^Ty\]</span></p>
<p>Proof: <a href="https://hy2632.github.io/2020/10/01/Data-Mining-%E6%96%BD%E5%AF%86%E7%89%B9%E6%AD%A3%E4%BA%A4%E5%8C%96/">最小二乘法与投影</a></p>
<p>When A is a column vector, the expression regenerates to <span class="math inline">\(\frac{aa^T}{a^Ta}y\)</span></p>
<p><strong>Nullspace</strong>:</p>
<p><span class="math display">\[N(A) = \{x\in\mathbb{R}^n: Ax=0\}\]</span></p>
<p>Comment: <span class="math inline">\(x\)</span> is a coordinate and <span class="math inline">\(A\)</span> is a set of column vectors. Certain <span class="math inline">\(x\)</span> could map to a zero vector.</p>
<p><strong>Orthogonal complements(正交补)</strong>:</p>
<p>Note that <span class="math inline">\(R(A)\subseteq \mathbb{R}^n\)</span> while <span class="math inline">\(N(A) \subseteq \mathbb{R}^m\)</span>. This is because, range is linear combination of <span class="math inline">\(n\)</span> <span class="math inline">\(\mathbb{R}^m\)</span> column vectors, while <span class="math inline">\(nullspace\)</span> consists of the coordinates <span class="math inline">\(x \in \mathbb{R}^n\)</span>.</p>
<p><span class="math inline">\(R(A^T)\)</span> and <span class="math inline">\(N(A)\)</span> are both in <span class="math inline">\(\mathbb{R}^n\)</span>. It can be proved that these two are disjoint subsets that together span the entire <span class="math inline">\(\mathbb{R}^n\)</span> space.</p>
<p><span class="math display">\[\{ w:w=u+v, u\in R(A^T), v\in N(A)\} = \mathbb{R}^n, \quad R(A^T)\cap N(A) = \{0\} \]</span></p>
<p>Comment:</p>
<p><span class="math display">\[w = u+v = A^Tx +y, \quad Ay = 0, \quad x \in \mathbb{R}^m, y,w \in \mathbb{R}^n \]</span></p>
<p><span class="math display">\[Aw = AA^Tx\]</span></p>
<p><span class="math display">\[rank(AA^T) = rank(A)\]</span></p>
<h2 id="determinantain-mathbbrntimes-n">Determinant(<span class="math inline">\(A\in \mathbb{R}^{n\times n}\)</span>)</h2>
<p>Set of points <span class="math inline">\(S \subset \mathbb{R}^n\)</span>: <span class="math display">\[S = \{ v\in \mathbb{R}^n: v = \sum_{i=1}^{n}{\alpha_ia_i}, \quad 0\leq \alpha_i \leq 1 \}\]</span></p>
<p>S is a restriction of span. |A| measures the <strong>"volume"</strong> of the set S.</p>
<p>Consider <span class="math display">\[\begin{bmatrix} a_1^T \\ a_2^T \end{bmatrix} = \begin{bmatrix} 1 \quad 3 \\ 3 \quad 2 \end{bmatrix}\]</span></p>
<p>The area of the parrelogram: <span class="math display">\[\sqrt{||a_1||^2||a_2||^2 - ||a_1\cdot a_2||^2}\]</span></p>
<ol type="1">
<li>The determinant of the identity is 1, |I| = 1. (Geometrically, the volume of a unit hypercube is 1).</li>
<li>Given a matrix <span class="math inline">\(A ∈ R^{n×n}\)</span>, if we multiply a single row in <span class="math inline">\(A\)</span> by a scalar <span class="math inline">\(t ∈ R\)</span>, then the determinant of the new matrix is <span class="math inline">\(t|A|\)</span>(Geometrically, multiplying one of the sides of the set <span class="math inline">\(S\)</span> by a factor <span class="math inline">\(t\)</span> causes the volume to increase by a factor <span class="math inline">\(t\)</span>.)</li>
<li>If we exchange any two rows of <span class="math inline">\(A\)</span>, then the determinant of the new matrix is <span class="math inline">\(−|A|\)</span></li>
</ol>
<p>For <span class="math inline">\(A,B\in \mathbb{R}^{n\times n}\)</span>, - <span class="math inline">\(|A| = |A^T|\)</span> - <span class="math inline">\(|AB| = |A||B|\)</span> - <span class="math inline">\(|A|=0\)</span> iff <span class="math inline">\(A\)</span> is singular(non-invertible). - For non-singular <span class="math inline">\(|A|^{-1} = 1/|A|\)</span></p>
<p><strong>Recursive formula for determinant</strong> <a href="https://en.wikipedia.org/wiki/Laplace_expansion">Laplace expansion</a> <strong>Complete expansion has <span class="math inline">\(n!\)</span> terms!</strong></p>
<p><span class="math display">\[|A| = \sum_{i=1}^{n}{a_{ij}|A_{\backslash i,\backslash j}|}, \forall j\]</span></p>
<p><strong>(Classical) adjoint</strong></p>
<p><span class="math display">\[(adj(A))_{ij} = (-1)^{i+j}|A_{\backslash j,\backslash i}|\]</span></p>
<p><span class="math display">\[A^{-1} = \frac{1}{|A|}adj(A)\]</span></p>
<h2 id="quadratic-forms-and-psd-matrices">Quadratic Forms and PSD matrices</h2>
<p><span class="math display">\[x^TAx = \sum_{i=1}^{n}\sum_{j=1}^{n}{A_{ij}x_ix_j}\]</span></p>
<p>Note that only the symmetric part contributes so generally we assume that <span class="math inline">\(A\)</span> is symmetric.</p>
<p><span class="math display">\[x^TAx = (x^TAx)^T = x^TA^Tx = x^T(\frac12A + \frac12A^T)x\]</span></p>
<p><strong>Property</strong>: PD/ND matrices are full rank and invertible.</p>
<p>Proof: if not, <span class="math inline">\(\exist x \neq 0, Ax=0\)</span>, then <span class="math inline">\(x^TAx=0\)</span></p>
<p><strong>Gram matrix</strong>: one type of PD matrix.</p>
<p><span class="math display">\[G = A^TA\]</span></p>
<p><span class="math inline">\(G\)</span> is PSD, and if <span class="math inline">\(m\geq n\)</span> and full rank, G is PD</p>
<h2 id="eigenvalues-and-eigenvectors">Eigenvalues and Eigenvectors</h2>
<p><span class="math display">\[Ax = \lambda x, x\neq 0\]</span></p>
<p>if <span class="math inline">\(x\)</span> is a eigenvector to eigenvalue <span class="math inline">\(\lambda\)</span>, then <span class="math inline">\(cx\)</span> is also a eigenvector. So we can normalize the eigenvectors.</p>
<p><span class="math display">\[(\lambda I - A)x = 0, x\neq 0\]</span> This has non-zero solution iff <span class="math inline">\((\lambda I - A)\)</span> has a non-empty nullspace. <span class="math display">\[|\lambda I - A| = 0\]</span></p>
<p><strong>Properties of eigenvalues/eigenvectors</strong></p>
<ul>
<li>trace equals to sum of eigenvalues</li>
<li>determinant equals to product of eigenvalues</li>
<li>rank equals to # of non-zero eigenvalues</li>
<li>for one pair, <span class="math inline">\(A^{-1}x = (1/\lambda)x\)</span></li>
<li>diagonal matrix: diagonal are eigen values</li>
</ul>
<h2 id="eigenvalues-and-eigenvectors-for-symmetric-matrices">Eigenvalues and Eigenvectors for symmetric matrices</h2>
<p>If <span class="math inline">\(A\)</span> is symmetric, 1. All eigenvalues are real 2. exist unit and orthogonal eigenvectors</p>
<p>Let <span class="math display">\[U = [u_1, ..., u_n]\]</span></p>
<p><span class="math inline">\(U\)</span> is orthogonal so <span class="math inline">\(UU^T=I\)</span>.</p>
<p><span class="math display">\[\Lambda = diag(\lambda_1, ..., \lambda_n)\]</span></p>
<p><span class="math display">\[AU = [Au_1, ... Au_n] = [\lambda_1u_1, ... \lambda_nu_n] = U\Lambda\]</span></p>
<p><span class="math display">\[A = AUU^T = U\Lambda U^T\]</span></p>
<p>This is just the diagonalization of the symmetric matrix A.</p>
<p>Comment: When PD a.k.a all eigenvalues positive, <span class="math inline">\(A = (U\Lambda^{\frac12})(U\Lambda^{\frac12})^T\)</span></p>
<p><strong>Representing vector w.r.t. another basis</strong> Switching coordinate system to orghogonal</p>
<p><span class="math display">\[x = U\hat{x}\]</span></p>
<p><span class="math display">\[\hat{x} = U^Tx\]</span></p>
<p>This indicates <span class="math inline">\(U^Tx\)</span> is another representation of x.</p>
<p><strong>Diagonalizing matrix-vector multiplication</strong></p>
<p><span class="math display">\[\hat{z} = U^Tz = U^TAx = U^TU\Lambda U^Tx = \Lambda \hat{x}\]</span></p>
<p>Then matrix multiplication is simpler because it merely scales each coordinate by the corresponding eigenvalue.</p>
<p>Especially when you left multiply one <span class="math inline">\(A^n\)</span></p>
<p><span class="math display">\[\hat{q} = U^Tq = U^TAAAx = U^TU\Lambda U^TU\Lambda U^TU\Lambda U^Tx = \Lambda^3\hat{x} \]</span></p>
<p>Comment: Time complexity of diagonalization is <span class="math inline">\(O(N^3)\)</span></p>
<p><strong>Diagonalizing quadratic form</strong></p>
<p><span class="math display">\[x^TAx = x^TU\Lambda U^Tx = \hat{x}^T \Lambda \hat{x} = \sum_{i=1}^{n}{\lambda_i \hat{x}_i^2}\]</span></p>
<p>Then the dedfiniteness of A is decided by the sign of its eigenvalues.</p>
<p>W.r.t <strong>maximizing the quadratic form</strong>, <span class="math inline">\(s.t. ||\hat{x}||_2^2 = 1\)</span></p>
<p>Upper bound is all weights on the largest eigenvalue <span class="math inline">\(\lambda_1\)</span>. Then <span class="math inline">\(x=u_1\)</span>.</p>
<h1 id="matrix-calculus">Matrix Calculus</h1>
<h2 id="the-gradient">The Gradient</h2>
<p>matrix of partial derivatives,</p>
<p><span class="math display">\[(\nabla_{A}f(A))_{ij} = \frac{\partial f(A)}{\partial A_{ij}}\]</span></p>
<p>Keep the notation clear by declaring the differentiated variable (<span class="math inline">\(z\)</span> for the whole chunk)</p>
<h2 id="the-hessian">The Hessian</h2>
<p><span class="math display">\[(\nabla_x^2f(x))_{ij} = \frac{\partial^2f(x)}{\partial x_i\partial x_j} \]</span></p>
<p>Symmetric (<span class="math inline">\(\mathbb{R}^{n\times n}\)</span>, real valued)</p>
<p>Caveat:</p>
<p>We cannot see the Hessian as the gradient of the gradient, because this is <strong>undefined</strong>:</p>
<p><span class="math display">\[\nabla_x\nabla_xf(x) = \nabla_x
\begin{bmatrix}
\frac{\partial f(x)}{\partial x_1}\\
...\\
\frac{\partial f(x)}{\partial x_n}
\end{bmatrix}\]</span></p>
<p>However, the column of the Hessian can be defined as</p>
<p><span class="math display">\[\nabla_x\nabla \frac{\partial f(x)}{\partial x_i} = 
\begin{bmatrix}
\frac{\partial^2 f(x)}{\partial x_i \partial x_1}\\
...\\
\frac{\partial^2 f(x)}{\partial x_i \partial x_n}
\end{bmatrix}\]</span></p>
<p>Therefore, Hessian can be defined by (fix one and derive another)</p>
<p><span class="math display">\[\nabla_x^2f(x) = [\nabla_x(\nabla_xf(x))_1, ...\nabla_x(\nabla_xf(x))_n]\]</span></p>
<h2 id="gradients-and-hessians-of-quadratic-and-linear-forms">Gradients and Hessians of Quadratic and Linear Forms</h2>
<p>Analogous to scalars. Note that the multiplier is <strong>transposed</strong>.</p>
<p><span class="math display">\[\nabla_x b^Tx = b\]</span></p>
<h2 id="least-squares">Least Squares</h2>
<p>Before we derived the expression <a href="https://hy2632.github.io/2020/10/01/Data-Mining-%E6%96%BD%E5%AF%86%E7%89%B9%E6%AD%A3%E4%BA%A4%E5%8C%96/">最小二乘法与投影</a></p>
<p>We want to minimize the residual when doing projection. This time we use derivative.</p>
<p><span class="math display">\[||Ax-b||_2^2 = (Ax-b)^T(Ax-b) = x^TA^TAx-2b^TAx+b^2\]</span></p>
<p><span class="math display">\[\nabla_x(||Ax-b||_2^2) = 2A^TAx-2A^Tb\]</span></p>
<p><span class="math display">\[x = (A^TA)^{-1}A^Tb\]</span></p>
<h2 id="gradients-of-the-determinent">Gradients of the Determinent</h2>
<p>For symmetric <span class="math inline">\(A\)</span>,</p>
<p><span class="math display">\[\nabla_A log|A| = \frac{1}{|A|}\nabla_A|A| = A^{-1}\]</span></p>
<p>The proof uses the adjoint(伴随矩阵) and cofactor(代数余子式).</p>
<h2 id="eigenvalus-as-optimization">Eigenvalus as optimization</h2>
<p>Before in the eigenvalue and eigenvector part we discussed maximizing a quadratic form with restricted norm.</p>
<p><span class="math display">\[\max_{x\in\mathbb{R}^n} x^TAx, s.t. ||x||_2^2=1\]</span></p>
<p>From the angle of Lagrangian multiplier</p>
<p><span class="math display">\[L(x, \lambda) = x^TAx - \lambda(x^Tx-1)\]</span></p>
<p><span class="math display">\[\nabla_x L(x,\lambda) = \nabla_x(x^TAx - \lambda x^Tx) = 2Ax - 2\lambda x = 0\]</span></p>
<p><span class="math display">\[Ax = \lambda x\]</span></p>
<p>Lagrangian multiplier method ensures that the optimal solution of the original is within the solution of the Lagrangian function.<a href="https://zh.wikipedia.org/wiki/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E6%95%B0">拉格朗日乘数法所得的极点会包含原问题的所有极值点，但并不保证每个极值点都是原问题的极值点。</a></p>
<p>This indicates that the optimal solution <span class="math inline">\(x\)</span> of this problem must be one eigenvector of <span class="math inline">\(A\)</span>.</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>CS229</tag>
      </tags>
  </entry>
  <entry>
    <title>CS229-ProbabilityTheory Recap</title>
    <url>/2020/10/24/CS229-ProbabilityTheory-Recap/</url>
    <content><![CDATA[<h3 id="some-common-random-variables">Some common random variables</h3>
<ul>
<li>Discrete random variables
<ul>
<li>Bernoulli(p)</li>
<li>Binomial(n, p)</li>
<li>Geometric(p)</li>
<li>Poisson(<span class="math inline">\(\lambda\)</span>): <span class="math inline">\(p(x) = e^{-\lambda}\frac{\lambda^x}{x!}\)</span>, non-negative integers</li>
</ul></li>
<li>Continuous random variables
<ul>
<li>Uniform(a,b)</li>
<li>Exponential(<span class="math inline">\(\lambda\)</span>): <span class="math inline">\(f(x) = \lambda e^{-\lambda x}, x\geq 0\)</span>; <span class="math inline">\(F(x) = e^{-\lambda x}, x\geq 0\)</span></li>
<li>Normal(<span class="math inline">\(\mu\)</span>, <span class="math inline">\(\sigma^2\)</span>)</li>
</ul></li>
</ul>
<p>Comment: some simulation methods 1. Inverse CDF technique : <span class="math inline">\(X = F^{-1}(U), U\sim unif(0,1)\)</span> 2. <a href="https://theclevermachine.wordpress.com/2012/09/11/sampling-from-the-normal-distribution-using-the-box-muller-transform/">Box Muller</a> method for generating Gaussian</p>
<h3 id="two-random-variables">Two random variables</h3>
<h4 id="expectation-covariance">Expectation &amp; Covariance</h4>
<p><span class="math display">\[Cov[x,y] = E[(x-E[x])(y-E[y])] = E[XY] - E[X]E[Y]\]</span></p>
<p>Properties: - Linearity of expectation - <span class="math inline">\(Var[X+Y] = Var[X] + Var[Y] + 2Cov[X,Y]\)</span> - If independent, <span class="math inline">\(Cov[X,Y]=0\)</span> - If Independet, <span class="math inline">\(E[XY] = E[X]E[Y]\)</span></p>
<h3 id="multiple-random-variables">Multiple random variables</h3>
<h4 id="random-vectors">Random vectors</h4>
<p>Vectorized denotation: <span class="math inline">\(X\)</span></p>
<p><strong>Covariance matrix</strong>: <strong>PSD</strong> and <strong>symmetric</strong> <span class="math display">\[\Sigma = E[XX^T] - E[X]E[X]^T = E[(X-E[X])(X-E[X])^T]\]</span></p>
<h4 id="multivariate-gaussian-distribution">Multivariate Gaussian distribution</h4>
<p><span class="math display">\[X\in \mathbb{R}^n \sim N(\mu, \Sigma)\]</span></p>
<p><span class="math display">\[f_X(X;\mu;\Sigma) = \frac{1}{(2\pi)^{n/2}|\Sigma|^{1/2}}\exp{\bigg(-\frac12(X-\mu)^T\Sigma^{-1}(X-\mu)\bigg)}
\]</span></p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>CS229</tag>
      </tags>
  </entry>
  <entry>
    <title>CS229 Notes1 Supervised Learning</title>
    <url>/2020/10/25/CS229-Notes1-Supervised-Learning/</url>
    <content><![CDATA[<h1 id="part-i-linear-regression">Part I Linear Regression</h1>
<p>Try to train the hypothesis function <span class="math inline">\(h\)</span>.</p>
<p>Letting <span class="math inline">\(x_0=1\)</span> gives the error term. <span class="math display">\[h(x) = \sum_{i=0}^d{\theta_ix_i}=\theta^T x\]</span></p>
<p>Cost function w.r.t parameter <span class="math inline">\(\theta\)</span>:</p>
<p><span class="math display">\[J(\theta) = \frac12\sum_{i=1}^{n}{(h_\theta(x^{(i)}) - y^{(i)})^2}\]</span></p>
<h2 id="lms-algorithm">LMS algorithm</h2>
<p>Gradient descent: <span class="math display">\[\theta_j := \theta_j - \alpha \frac{\partial}{\partial\theta_j}J(\theta)\]</span></p>
<p><span class="math inline">\(\alpha\)</span> is the learning rate.</p>
<p>Here, <span class="math display">\[\frac{\partial}{\partial\theta_j}J(\theta) = (h_\theta(x) - y)x_j\]</span></p>
<p>For <strong>a single training example</strong>, the learning rule is <strong>LMS</strong>(least squared error) a.k.a <strong>Widrow-Hoff</strong></p>
<p><span class="math display">\[\theta_j := \theta_j + \alpha (y - h_\theta(x))x_j\]</span></p>
<p>Into vector level,</p>
<p><span class="math display">\[\theta := \theta + \alpha {(y^{(i)} - h_\theta(x^{(i)}))x^{(i)}}\]</span></p>
<p>One sample each time, we call this <strong>SGD</strong>(strochastic gradient descent).</p>
<p>About applying the rule to <strong>a training set</strong>, - SGD - <strong>batch gradient descent</strong></p>
<p><span class="math display">\[\theta := \theta + \alpha \sum_{i=1}^{n}{(y^{(i)} - h_\theta(x^{(i)}))x^{(i)}}\]</span></p>
<p>SGD vs BGD: Fast / Robust</p>
<h2 id="the-normal-equations">The normal equations</h2>
<h3 id="matrix-derivatives-elementwise">Matrix derivatives (elementwise)</h3>
<p>... ### Least squares revisited (vectorized)</p>
<p>The <strong>design matrix</strong> <span class="math inline">\(X\)</span></p>
<p><span class="math display">\[X = \begin{bmatrix} (x^{(1)})^T\\ (x^{(2)})^T\\...\\(x^{(n)})^T\end{bmatrix} \in \mathbb{R}^{n\times(d+1)}\]</span></p>
<p><span class="math display">\[y = \begin{bmatrix} y^{(1)}\\ y^{(2)}\\...\\y^{(n)}\end{bmatrix}\]</span></p>
<p><span class="math display">\[X\theta - y = \begin{bmatrix} h_\theta(x^{(1)})-y^{(1)}\\ h_\theta(x^{(2)})-y^{(2)}\\...\\h_\theta(x^{(n)})-y^{(n)}\end{bmatrix}\]</span></p>
<p><span class="math display">\[J(\theta) = \frac12(X\theta-y)^T(X\theta-y)\]</span></p>
<p><span class="math display">\[\nabla_\theta J(\theta) = X^TX\theta - X^Ty\]</span></p>
<p>To minimize <span class="math inline">\(J\)</span>, we set its derivatives to zero, and obtain <strong>normal equations</strong>:</p>
<p><span class="math display">\[X^TX\theta = X^Ty\]</span></p>
<p>Thus, the value of <span class="math inline">\(\theta\)</span> that minimizes the <span class="math inline">\(J(\theta)\)</span> is given in closed form by the equation</p>
<p><span class="math display">\[\theta = (X^TX)^{-1}X^Ty\]</span></p>
<h3 id="probablistic-interpretation">Probablistic interpretation</h3>
<p>Assume</p>
<p><span class="math display">\[y^{(i)} = \theta^Tx^{(i)} + \epsilon^{(i)}  \]</span></p>
<p>Assume that the error term <span class="math inline">\(\epsilon \sim N(0, \sigma^2)\)</span></p>
<p>The density function of $^{(i)} $ is given by</p>
<p><span class="math display">\[p(\epsilon^{(i)}) = \frac{1}{\sqrt{2\pi}\sigma} e^{-\frac{(\epsilon^{(i)})^2}{2\sigma^2}}\]</span></p>
<p>Substitute <span class="math inline">\(\epsilon^{(i)}\)</span> with <span class="math inline">\(\theta^Tx^{(i)} -y^{(i)}\)</span></p>
<p><span class="math display">\[p(y^{(i)} | x^{(i)}; \theta) = \frac{1}{\sqrt{2\pi}\sigma} e^{-\frac{(\theta^Tx^{(i)} -y^{(i)})^2}{2\sigma^2}}\]</span></p>
<p>Note that we are not conditioning on <span class="math inline">\(\theta\)</span>, because <span class="math inline">\(\theta\)</span> is not a random variable. The distribution of <span class="math inline">\(y^{(i)}\)</span> can also be written as <span class="math inline">\(y^{(i)}|x^{(i)}; \theta \sim N(0, \sigma^2)\)</span></p>
<p>By seeing the conditional distribution as a function of <span class="math inline">\(\theta\)</span>, we define the <strong>likelihood function</strong>:</p>
<p><span class="math display">\[L(\theta) = \prod_{i=1}^{n}{\frac{1}{\sqrt{2\pi}\sigma} e^{-\frac{(\theta^Tx^{(i)} -y^{(i)})^2}{2\sigma^2}}}\]</span></p>
<p>How to best guess the parameter <span class="math inline">\(\theta\)</span>? <strong>Maximum likelihood</strong> --- to make the data as high-probability as possible.</p>
<p><em>Comment: 频率学派(Frequentist), MLE, "Seeing is believing"</em></p>
<p>Maximize the <strong>log likelihood</strong> or minimize the negative log likelihood (NLL).</p>
<p><span class="math display">\[\begin{aligned}l(\theta) &amp;= \log{L(\theta)}\\
&amp;= n\log{\frac1{\sqrt{2\pi}\sigma}} - \frac1{\sigma^2}\cdot \frac12\sum_{i=1}^{n}(\theta^Tx^{(i)} -y^{(i)})^2
\end{aligned}\]</span></p>
<p>Hence it gives the same answer as minimizing the cost function.</p>
<p>Note that here the choice of <span class="math inline">\(\theta\)</span> does not rely on <span class="math inline">\(\sigma^2\)</span></p>
<h3 id="locally-weighted-linear-regression-lwr">Locally weighted linear regression (LWR)</h3>
<p>Instead of fitting <span class="math inline">\(\theta\)</span> to minimize <span class="math inline">\(\sum_i{(y^{(i)}-\theta^Tx^{(i)})^2}\)</span>, minimize</p>
<p><span class="math display">\[\sum_iw^{(i)}{(y^{(i)}-\theta^Tx^{(i)})^2}\]</span></p>
<p>The standard choice for the weights:</p>
<p><span class="math display">\[w^{(i)} = \exp\bigg( -\frac{(x^{(i)}-x)^2}{2\tau^2} \bigg)\]</span></p>
<p>Comment: part of pdf of <span class="math inline">\(N(x, \tau^2)\)</span>, but has nothing to do with gaussian. Just measures the distance, lower weights to distant data points. <span class="math inline">\(tau\)</span> is called the <strong>bandwidth</strong> parameter which controls how quickly the weight diminishes with distance increasing.</p>
<p>LWR is <strong>non-parametric</strong> algorithm. It means the model relies on the training data and scales with bigger size of the training dataset.</p>
<h1 id="part-ii-classification-and-logistic-regression">Part II Classification and logistic regression</h1>
<p>Problem: binary classification Keywords: positive/negative class, label</p>
<h2 id="logistic-regression">Logistic regression</h2>
<p>To limit the predicted value of <span class="math inline">\(y\)</span> to <span class="math inline">\([0,1]\)</span>, use <strong>sigmoid/logitstic</strong> function</p>
<p><span class="math display">\[h_\theta(x) = g(\theta^Tx) = \frac1{1 + e^{-\theta^Tx}}\]</span></p>
<p>Sigmoid's derivative has such property</p>
<p><span class="math display">\[g&#39;(z) = g(z)(1-g(z))\]</span></p>
<p>Probablistic assumptions:</p>
<p><span class="math display">\[P(y=1 | x;\theta) = h_\theta(x)\]</span></p>
<p><span class="math display">\[P(y=0 | x;\theta) = 1-h_\theta(x)\]</span></p>
<p>Or more compactly written:</p>
<p><span class="math display">\[P(y| x;\theta) = (h_\theta(x))^y(1-h_\theta(x))^{1-y}\]</span></p>
<p>Then we can build a likelihood function for <span class="math inline">\(n\)</span> training examples</p>
<p><span class="math display">\[\begin{aligned}L(\theta) &amp;= p(y|X; \theta)\\
&amp;= \prod_{i=1}^{n}{(h_\theta(x^{(i)}))^{y^{(i)}}(1-h_\theta(x^{(i)}))^{1-y^{(i)}}}
\end{aligned}\]</span></p>
<p><span class="math display">\[\begin{aligned}l(\theta) &amp;= \log{L(\theta)}\\
&amp;= \sum_{i=1}^{n}{y^{(i)}\log h(x^{(i)})+({1-y^{(i)}})\log(1-h(x^{(i)}))}
\end{aligned}\]</span></p>
<p>Optimize the LL by Stochastic Gradient Ascent(maximizing):</p>
<p><span class="math display">\[\begin{aligned}\frac{\partial}{\partial \theta_j}l(\theta) 
&amp;= \bigg(y\frac1{g(\theta^Tx)} + (1-y)\frac1{1-g(\theta^Tx)}\bigg)\frac{\partial}{\partial \theta_j}g(\theta^Tx)\\
&amp;= \bigg(y\frac1{g(\theta^Tx)} + (1-y)\frac1{1-g(\theta^Tx)}\bigg)g(\theta^Tx)(1-g(\theta^Tx))\frac{\partial}{\partial \theta_j}\theta^Tx\\
&amp;= \big(y(1-g(\theta^Tx)) - (1-y)g(\theta^Tx)\big)x_j\\
&amp;= (y-h_\theta(x))x_j
\end{aligned}\]</span></p>
<p>Update rule:</p>
<p><span class="math display">\[\theta_j := \theta_j + \alpha(y - h_\theta(x))x_j\]</span></p>
<p>This looks identical with LMS update rule but <span class="math inline">\(h_\theta(x)\)</span> here is different. This is actually general rule.</p>
<h2 id="digression-perceptron-learning-algorithm">Digression: perceptron learning algorithm</h2>
<p>change <span class="math inline">\(g(z)\)</span> to <span class="math inline">\(1\{z\geq 0\}\)</span>, still using the previous update rule.</p>
<h2 id="newtons-method-for-maximizing-ltheta">Newton's method for maximizing <span class="math inline">\(l(\theta)\)</span></h2>
<p>Newton's method for finding a zero of a function. <span class="math display">\[\theta := \theta - \frac{f(\theta)}{f&#39;(\theta)}\]</span></p>
<p>To maximize, we want the derivative <span class="math inline">\(l&#39;(\theta) = 0\)</span>. So we set <span class="math inline">\(f(\theta) = l&#39;(\theta)\)</span> <span class="math display">\[\theta := \theta - \frac{l&#39;(\theta)}{l&#39;&#39;(\theta)}\]</span></p>
<p>Generalize Newton's method to vector-valued/multidimensional setting (a.k.a Newton-Raphson Method):</p>
<p><span class="math display">\[\theta := \theta - H^{-1}\nabla_\theta l(\theta)\]</span></p>
<p>Complexity: <span class="math inline">\(O(N^2)\)</span> for inverting <span class="math inline">\(d\times d\)</span> Hessian. Faster than batch gradient descent.</p>
<p>When maximizing logistic regression, called <strong>Fisher scoring</strong>.</p>
<h1 id="part-iii-generalized-linear-modelsglms">Part III Generalized Linear Models(GLMs)</h1>
<p>In the Classification part, the derivative of sigmoid function is kind of relevant to Bernoulli distribution.</p>
<p>Both of Linear regression and calssification are special cases of a broader family of models in GLM family.</p>
<h2 id="the-exponential-family">The exponential family</h2>
<p><span class="math display">\[p(y; \eta) = b(y)\exp(\eta^TT(y) - a(\eta))\]</span></p>
<p><span class="math inline">\(\eta\)</span>: natural/canonical parameter</p>
<p><span class="math inline">\(T(y)\)</span>: sufficient statistic, often <span class="math inline">\(y\)</span></p>
<p><span class="math inline">\(a(\eta)\)</span>: log partition function. <span class="math inline">\(\exp{a(\eta)}\)</span> used to normalize so the distributino integrates into 1.</p>
<p><span class="math inline">\(T\)</span> and <span class="math inline">\(b\)</span> dedfines a <strong>family</strong> of distributions parametrized by <span class="math inline">\(\eta\)</span></p>
<p><strong>Bernoulli</strong> and <strong>Gaussian</strong> distributions are examples of <strong>exponential family distributions</strong>.</p>
<p><span class="math display">\[\begin{aligned}
p(y;\phi) 
&amp;= \phi^y (1-\phi)^{1-y}\\
&amp;= \exp(y\log\phi + (1-y)\log(1-\phi))\\
&amp;= \exp\bigg( \bigg( \log \bigg( \frac{\phi}{1-\phi} \bigg)y + \log(1-\phi) \bigg) \bigg)
\end{aligned}\]</span></p>
<p>Exponential family distribution notations:</p>
<p><span class="math display">\[\begin{aligned} 
\eta &amp;= \log(\phi/(1-\phi))\\
\phi &amp;=  \frac{1}{1+e^{-\eta}}\\
T(y) &amp;=  y \\
a(\eta) &amp;=  -log(1-\phi)\\
&amp;= \log (1+e^{\eta})\\
b(y) &amp;= 1
\end{aligned}\]</span></p>
<p>Notice that <span class="math inline">\(\phi\)</span> is the sigmoid function.</p>
<p>For Gaussian distribution with <span class="math inline">\(\sigma^2 = 1\)</span> <span class="math display">\[\begin{aligned}
p(y;\mu) &amp;= \frac1{\sqrt{2\pi}}\exp\bigg(-\frac12(y-\mu)^2  \bigg)\\
&amp;= \frac1{\sqrt{2\pi}}\exp\bigg(-\frac12y^2 + \mu y -\frac12\mu^2  \bigg) \\
&amp;= \frac1{\sqrt{2\pi}}\exp\bigg(-\frac12y^2\bigg) \cdot \exp\bigg(\mu y -\frac12\mu^2\bigg)
\end{aligned}\]</span></p>
<p>Compare with the exponential distribution family form <span class="math display">\[p(y; \eta) = b(y)\exp(\eta^TT(y) - a(\eta))\]</span></p>
<p>We get</p>
<p><span class="math display">\[\begin{aligned} 
b(y) &amp;= \frac1{\sqrt{2\pi}}\exp\bigg(-\frac12y^2\bigg)\\
\eta &amp;= \mu\\
T(y) &amp;=  y \\
a(\eta) &amp;=  \mu^2/2\\
\end{aligned}\]</span></p>
<h2 id="constructing-glms">Constructing GLMs</h2>
<p>"<strong>Poisson distribution</strong> usually gives a good model for numbers of visitors". (Counting Model)</p>
<p>Poisson is an exponential family distribution.</p>
<p>To derive a GLM, make the following <strong>3 assumptions</strong>, 1. <span class="math inline">\(y|x; \theta\)</span>~ExponentialFamily<span class="math inline">\((\eta)\)</span>. Given <span class="math inline">\(x\)</span> and <span class="math inline">\(\eta\)</span>, the distribution of <span class="math inline">\(y\)</span> follows some exponential family distribution with partameter <span class="math inline">\(\eta\)</span> 2. Given <span class="math inline">\(x\)</span>, our goal is to <strong>predict <span class="math inline">\(T(y)\)</span></strong>. In most cases <span class="math inline">\(T(y) = y\)</span>. We would like <span class="math inline">\(h_\theta(x) = E[T(y)|x;\theta]\)</span>. 3. Natural parameter <span class="math inline">\(\eta\)</span> is linearly related with the inputs <span class="math inline">\(x\)</span>: <span class="math inline">\(\eta = \theta^Tx\)</span>. This is a <strong>"design choice"</strong></p>
<h2 id="ols-revisited-using-glm-construction">OLS revisited using GLM construction</h2>
<p>target variable <span class="math inline">\(y\)</span> is also called <strong>reponse variable</strong> in GLM terminology.</p>
<p><span class="math display">\[y\sim N(\mu, \sigma^2)\]</span> where <span class="math inline">\(\mu\)</span> relies on <span class="math inline">\(x\)</span>.</p>
<p>Previously we have GLM for Gaussian, <span class="math inline">\(\mu = \eta\)</span></p>
<p><span class="math display">\[\begin{aligned} 
h_\theta(x) &amp;= E[y|x;\theta]\\
&amp;= \mu \\
&amp;= \eta \\
&amp;= \theta^Tx
\end{aligned}\]</span></p>
<p>First equality from <strong>assumption 2</strong>. Third equality from <strong>assumption 1</strong>. Last from <strong>assumption 3</strong>.</p>
<h2 id="softmax-regression">Softmax Regression</h2>
<p>Problem set - <strong>Multinomial distribution</strong>: multiple classification, <span class="math inline">\(y\in \{1, ..., k\}\)</span></p>
<p><span class="math inline">\(T(y)\)</span> is a <span class="math inline">\(d-1\)</span> vector with y-th entry 1.</p>
<p><span class="math display">\[T(y)_i = 1\{y = i\}\]</span></p>
<p><span class="math inline">\((T(y))_i\)</span> is the i-th element of <span class="math inline">\(T(y)\)</span></p>
<p><span class="math display">\[E[(T(y))_i] = \phi_i\]</span></p>
<p>The multinomial is a member of the exponential family, where</p>
<p><span class="math display">\[\begin{aligned} 
b(y) &amp;= 1\\
a(\eta) &amp;= -\log(\phi_k)\\
\eta &amp;= \begin{bmatrix}
\log(\phi_1/\phi_k)\\ \log(\phi_2/\phi_k) \\...\\\log(\phi_{k-1}/\phi_k)
\end{bmatrix}
\end{aligned}\]</span></p>
<p>The link function is given by <span class="math display">\[\eta_i = \log\frac{\phi_i}{\phi_k}\]</span></p>
<p>Invert the link function</p>
<p><span class="math display">\[e^{\eta_i} = \phi_i/\phi_k\]</span></p>
<p><span class="math display">\[\phi_ke^{\eta_i} = \phi_i\]</span></p>
<p><span class="math display">\[\phi_k\sum_{i=1}^k{e^{\eta_i}} = \sum_{i=1}^k{\phi_i}=1\]</span></p>
<p><span class="math display">\[\therefore \phi_k = \frac1{\sum_{i=1}^k{e^{\eta_i}}}\]</span></p>
<p><span class="math display">\[\therefore \phi_i = \frac{e^{\eta_i}}{\sum_{j=1}^k{e^{\eta_j}}}\]</span></p>
<p>This function mapping from <span class="math inline">\(\eta\)</span> to <span class="math inline">\(\phi\)</span> is called <strong>softmax</strong>.</p>
<p>From assumption 3, <span class="math inline">\(\eta_i = \theta_i^Tx\)</span>, and since we define <span class="math inline">\(\theta_k = 0\)</span>, <span class="math inline">\(\eta_k = 0\)</span></p>
<p><span class="math display">\[\begin{aligned} p(y=i|x; \theta) 
&amp;= \phi_i \\
&amp;= \frac{e^{\eta_i}}{\sum_{j=1}^k{e^{\eta_j}}} \\
&amp;= \frac{e^{\theta_i^Tx}}{\sum_{j=1}^k{e^{\theta_j^Tx}}}
\end{aligned}\]</span></p>
<p>This is the <strong>softmax regression</strong>. It's a generalization of logistic regression (binary classification).</p>
<p><span class="math display">\[\begin{aligned} h_\theta(x)
&amp;= E[T(y)|x; \theta] \\
&amp;= [\phi_1 ,.. \phi_{k-1}]^T\\
&amp;= \bigg[\frac{e^{\theta_1^Tx}}{\sum_{j=1}^k{e^{\theta_j^Tx}}}, ..., \frac{e^{\theta_{k-1}^Tx}}{\sum_{j=1}^k{e^{\theta_j^Tx}}}\bigg]^T\\
\end{aligned}\]</span></p>
<p>Comment: the output is the estimated probability for each class.</p>
<p>For parameter fitting, maximize the log likelihood using gradient ascent or Newton's method.</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>CS229</tag>
      </tags>
  </entry>
  <entry>
    <title>CS229 Notes2 Generative Learning Algorithms</title>
    <url>/2020/10/26/CS229-Notes2-Generative-Learning-Algorithms/</url>
    <content><![CDATA[<p>Gaussian discriminant analysis - lemon的文章 - 知乎 https://zhuanlan.zhihu.com/p/22940577</p>
<p>Normal Equation如何实现一步求解最优参数及其对比梯度下降的特点是什么？ - 深度碎片的回答 - 知乎 https://www.zhihu.com/question/273799498/answer/370173526</p>
]]></content>
  </entry>
  <entry>
    <title>The Matrix Cookbook</title>
    <url>/2020/10/30/The-Matrix-Cookbook/</url>
    <content><![CDATA[<p>在学习cs229-notes11 时遇到了这样一个等式</p>
<p><span class="math display">\[\nabla_W|W| = |W|(W^{-1})^T \]</span></p>
<p>于是找到了这个 UCI 的“矩阵菜谱”。其中列举了与矩阵有关的公式，在此上传供以后查阅。</p>
<p>Credit to: <a href="https://www.ics.uci.edu/~welling/teaching/KernelsICS273B/MatrixCookBook.pdf">Max Welling's CS 273B: Kernel-Based Learning, 2005</a></p>
<p>(可见这是一个比较古早的研究kernel的课程)</p>
<div class="pdfobject-container" data-target="./MatrixCookBook.pdf" data-height="1000px"></div>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>矩阵</tag>
      </tags>
  </entry>
</search>
